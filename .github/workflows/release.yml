name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git log
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Ferrous Forge v${{ steps.get_version.outputs.version }}
          body: |
            ## Changes in v${{ steps.get_version.outputs.version }}
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ### Cargo
            ```bash
            cargo install ferrous-forge --version ${{ steps.get_version.outputs.version }}
            ```
            
            ### Binary Downloads
            Download the appropriate binary for your platform from the assets below.
            
            ### Package Managers
            - **Homebrew**: `brew install ferrous-forge`
            - **AUR**: `yay -S ferrous-forge`
            - **Nix**: `nix-env -iA nixpkgs.ferrous-forge`
            
            ## Upgrading
            
            ```bash
            ferrous-forge update
            ```
            
            ## Documentation
            
            - [Installation Guide](https://ferrous-forge.dev/docs/installation)
            - [Configuration Reference](https://ferrous-forge.dev/docs/configuration)
            - [API Documentation](https://docs.rs/ferrous-forge/${{ steps.get_version.outputs.version }})
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Build Release Binaries
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: ferrous-forge-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: ferrous-forge-linux-x86_64-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: ferrous-forge-linux-aarch64
          
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            name: ferrous-forge-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: ferrous-forge-macos-aarch64
          
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: ferrous-forge-windows-x86_64
            ext: .exe
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          
      - name: Install cross (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cargo install cross --locked
        
      - name: Build (native)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.os != 'ubuntu-latest'
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Build (cross)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}
        
      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/ferrous-forge
        
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ../../../${{ matrix.name }}.tar.gz ferrous-forge
          cd ../../..
          
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip ferrous-forge.exe
          cd ../../..
          
      - name: Upload binary (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}.tar.gz
          asset_name: ${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload binary (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}.zip
          asset_name: ${{ matrix.name }}.zip
          asset_content_type: application/zip

  # Publish to Crates.io
  publish-crates:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: [create-release, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
        
      - name: Publish
        run: cargo publish --allow-dirty

  # Update Package Managers
  update-packages:
    name: Update Package Managers
    runs-on: ubuntu-latest
    needs: [create-release, publish-crates]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Update Homebrew Formula
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          token: ${{ secrets.HOMEBREW_TOKEN }}
          formula: ferrous-forge
          
      - name: Update AUR Package
        uses: KSXGitHub/github-actions-deploy-aur@v2.7.0
        with:
          pkgname: ferrous-forge
          pkgbuild: packaging/PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}

  # Build and Push Docker Image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ferrousforge/ferrous-forge
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update Documentation
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install mdbook
        run: cargo install mdbook mdbook-linkcheck
        
      - name: Build book
        run: mdbook build docs/book
        
      - name: Build API docs
        run: cargo doc --no-deps --all-features
        
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/book
          destination_dir: docs
          
      - name: Deploy API documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/doc
          destination_dir: api

  # Notify Release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [publish-crates, update-packages, docker, docs]
    if: always()
    steps:
      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🔨 **Ferrous Forge v${{ needs.create-release.outputs.version }} Released!**
            
            📦 Available on crates.io: `cargo install ferrous-forge`
            🐳 Docker: `docker pull ferrousforge/ferrous-forge:${{ needs.create-release.outputs.version }}`
            📖 Docs: https://ferrous-forge.dev/docs
            
            🚀 **Upgrade**: `ferrous-forge update`