name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly dependency check

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read
  pull-requests: read

jobs:
  # Format and Lint Check
  check:
    name: Check & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.82"
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Format check
        run: cargo fmt --all -- --check
        
      - name: Clippy check
        run: cargo clippy --all-features --all-targets -- -D warnings
        
      - name: Documentation check
        run: cargo doc --no-deps --all-features

  # Test Matrix
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: ["1.82", "stable", "beta"]
        include:
          - os: ubuntu-latest
            rust: "nightly"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.rust }}
          
      - name: Install cargo-nextest (compatible version)
        run: cargo install cargo-nextest@0.9.72 --locked
        
      - name: Run tests
        run: cargo nextest run --all-features || cargo test --all-features
        
      - name: Run doc tests
        run: cargo test --doc --all-features

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install cargo-audit
        run: cargo install cargo-audit --locked
        
      - name: Security audit
        run: cargo audit
        
      - name: Vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov --locked
        
      - name: Generate coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
      - name: Upload to codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true

  # Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Run benchmarks
        run: cargo bench --bench validation_bench || true

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.82"
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Build binary
        run: cargo build --release
        
      - name: Test installation
        run: |
          # Test binary works
          ./target/release/ferrous-forge --version
          
          # Store the binary path
          FERROUS_FORGE_BIN="$PWD/target/release/ferrous-forge"
          
          # Test init in clean environment
          mkdir -p /tmp/test-ferrous-forge
          cd /tmp/test-ferrous-forge
          export HOME=/tmp/test-ferrous-forge
          "$FERROUS_FORGE_BIN" init --force
          
          # Test project creation
          cargo new test-project
          cd test-project
          
          # Verify standards are applied
          grep -q 'edition = "2024"' Cargo.toml
          test -f clippy.toml
          
          # Test validation
          cargo check

  # Cross-compilation (simplified - just check it compiles for major platforms)
  cross:
    name: Cross Compile
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - x86_64-pc-windows-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          
      - name: Check compilation
        run: cargo check --target ${{ matrix.target }}
        
      - name: Build (Linux only)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Upload artifact (Linux only)
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        uses: actions/upload-artifact@v3
        with:
          name: ferrous-forge-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/ferrous-forge

  # Documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        
      - name: Build documentation
        run: cargo doc --no-deps --all-features
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: api