{
  "metadata": {
    "timestamp": "2025-09-20T03:54:41.390708225+00:00",
    "project_path": ".",
    "ferrous_forge_version": "1.3.0",
    "total_violations": 302,
    "report_version": "1.0.0"
  },
  "summary": {
    "compliance_percentage": 0.0,
    "files_analyzed": 2,
    "most_critical_issues": [
      "UnderscoreBandaid violations (implement missing functionality)",
      "Large files need splitting (validation.rs: 1133 lines)",
      "Large functions need refactoring"
    ],
    "estimated_fix_time_hours": 75.5
  },
  "violations": [
    {
      "violation_type": "FileTooLarge",
      "file": "./src/ai_analyzer.rs",
      "line": 875,
      "message": "File has 875 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "LineTooLong",
      "file": "./src/ai_analyzer.rs",
      "line": 656,
      "message": "Line has 123 characters, maximum allowed is 100",
      "code_snippet": "    let system_prompt = r#\"You are an expert Rust developer tasked with fixing code violations identified by Ferrous Forge.",
      "suggested_fix": "Review and fix according to Ferrous Forge standards",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/ai_analyzer.rs",
      "line": 305,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "    } else if content.contains(\"panic!\") || content.contains(\".unwrap()\") {",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/ai_analyzer.rs",
      "line": 359,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn infer_actual_type(lines: &[&str], line_idx: usize) -> Option<String> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/ai_analyzer.rs",
      "line": 375,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn infer_expected_type(violation_type: &ViolationType) -> Option<String> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/ai_analyzer.rs",
      "line": 382,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn trace_data_flow(lines: &[&str], line_idx: usize) -> Vec<String> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/ai_analyzer.rs",
      "line": 391,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn trace_control_flow(lines: &[&str], line_idx: usize) -> Vec<String> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/ai_analyzer.rs",
      "line": 439,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn trace_error_propagation(lines: &[&str], line_idx: usize) -> Vec<String> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/ai_analyzer.rs",
      "line": 443,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "        if line.contains('?') || line.contains(\".unwrap()\") || line.contains(\".expect(\") {",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/ai_analyzer.rs",
      "line": 443,
      "message": "BANNED: .expect() in production code - use proper error handling with ?",
      "code_snippet": "        if line.contains('?') || line.contains(\".unwrap()\") || line.contains(\".expect(\") {",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/ai_analyzer.rs",
      "line": 576,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "            description: \"Heavy use of .unwrap() indicates poor error handling\".to_string(),",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/ai_analyzer.rs",
      "line": 609,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "            \"3. Replace .unwrap() with ? operator\".to_string(),",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/ai_analyzer.rs",
      "line": 598,
      "message": "Function has 54 lines, maximum allowed is 50",
      "code_snippet": "fn generate_fix_strategies(violations: &[Violation], patterns: &CodePatterns) -> Vec<FixStrategy> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/ai_analyzer.rs",
      "line": 652,
      "message": "Function has 56 lines, maximum allowed is 50",
      "code_snippet": "fn generate_ai_instructions(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/ai_analyzer.rs",
      "line": 746,
      "message": "Function has 95 lines, maximum allowed is 50",
      "code_snippet": "pub async fn generate_orchestrator_instructions(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/config.rs",
      "line": 7,
      "message": "Function has 80 lines, maximum allowed is 50",
      "code_snippet": "pub async fn execute(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/commands/edition.rs",
      "line": 334,
      "message": "File has 334 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/edition.rs",
      "line": 13,
      "message": "Function has 67 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_check(path: &Path) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/edition.rs",
      "line": 80,
      "message": "Function has 153 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_migrate(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/edition.rs",
      "line": 233,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "pub async fn handle_analyze(path: &Path, edition_str: &str) -> Result<()> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/edition.rs",
      "line": 233,
      "message": "Function has 102 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_analyze(path: &Path, edition_str: &str) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/commands/fix.rs",
      "line": 710,
      "message": "File has 710 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "LineTooLong",
      "file": "./src/commands/fix.rs",
      "line": 643,
      "message": "Line has 118 characters, maximum allowed is 100",
      "code_snippet": "        let content = \"use anyhow::Result;\\n\\nfn process() -> Result<()> {\\n    let value = some_func().unwrap();\\n}\";",
      "suggested_fix": "Review and fix according to Ferrous Forge standards",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "LineTooLong",
      "file": "./src/commands/fix.rs",
      "line": 664,
      "message": "Line has 125 characters, maximum allowed is 100",
      "code_snippet": "        let content = \"#[cfg(test)]\\nmod tests {\\n    #[test]\\n    fn test_something() {\\n        value.unwrap();\\n    }\\n}\";",
      "suggested_fix": "Review and fix according to Ferrous Forge standards",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/fix.rs",
      "line": 27,
      "message": "Function has 272 lines, maximum allowed is 50",
      "code_snippet": "pub async fn execute_with_ai(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/fix.rs",
      "line": 367,
      "message": "Function has 73 lines, maximum allowed is 50",
      "code_snippet": "fn fix_file_violations(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/fix.rs",
      "line": 471,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn parse_function_signature(line: &str, line_num: usize) -> Option<FunctionSignature> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/fix.rs",
      "line": 516,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "fn fix_unwrap_in_line(line: &str, _violation: &Violation, context: &FileContext) -> FixResult {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/commands/fix.rs",
      "line": 522,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "    if line.contains(\".unwrap()\") {",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/commands/fix.rs",
      "line": 529,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "                let fixed = line.replace(\".unwrap()\", \".expect(\\\"Failed to process\\\")\");",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/commands/fix.rs",
      "line": 529,
      "message": "BANNED: .expect() in production code - use proper error handling with ?",
      "code_snippet": "                let fixed = line.replace(\".unwrap()\", \".expect(\\\"Failed to process\\\")\");",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/commands/fix.rs",
      "line": 536,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "        return FixResult::Fixed(line.replace(\".unwrap()\", \"?\"));",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/commands/fix.rs",
      "line": 539,
      "message": "BANNED: .expect() in production code - use proper error handling with ?",
      "code_snippet": "    if line.contains(\".expect(\") {",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/commands/fix.rs",
      "line": 546,
      "message": "BANNED: .expect() in production code - use proper error handling with ?",
      "code_snippet": "        if let Some(start) = line.find(\".expect(\\\"\") {",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/fix.rs",
      "line": 597,
      "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
      "code_snippet": "    // Fix let _ = assignments",
      "suggested_fix": "Replace `let _ =` with proper error handling using `?`",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/fix.rs",
      "line": 598,
      "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
      "code_snippet": "    if line.trim_start().starts_with(\"let _ =\") {",
      "suggested_fix": "Replace `let _ =` with proper error handling using `?`",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/fix.rs",
      "line": 600,
      "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
      "code_snippet": "        if let Some(rest) = line.trim_start().strip_prefix(\"let _ =\") {",
      "suggested_fix": "Replace `let _ =` with proper error handling using `?`",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/fix.rs",
      "line": 584,
      "message": "Function has 58 lines, maximum allowed is 50",
      "code_snippet": "fn fix_underscore_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/init.rs",
      "line": 7,
      "message": "Function has 53 lines, maximum allowed is 50",
      "code_snippet": "pub async fn execute(force: bool) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/rust.rs",
      "line": 9,
      "message": "Function has 135 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_check(verbose: bool) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/rust.rs",
      "line": 144,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/rust.rs",
      "line": 144,
      "message": "Function has 88 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/rust.rs",
      "line": 232,
      "message": "Function has 59 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_list(count: usize) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/safety.rs",
      "line": 10,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "pub async fn handle_install(force: bool, project_path: &Path) -> Result<()> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/safety.rs",
      "line": 10,
      "message": "Function has 90 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_install(force: bool, project_path: &Path) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/safety.rs",
      "line": 100,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "pub async fn handle_check(stage_str: &str, project_path: &Path, verbose: bool) -> Result<()> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/safety.rs",
      "line": 136,
      "message": "Function has 91 lines, maximum allowed is 50",
      "code_snippet": "pub async fn handle_status() -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/safety.rs",
      "line": 227,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "pub async fn test_individual_checks(project_path: &Path) -> Result<()> {",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "LineTooLong",
      "file": "./src/commands/uninstall.rs",
      "line": 11,
      "message": "Line has 112 characters, maximum allowed is 100",
      "code_snippet": "            \"Are you sure you want to uninstall Ferrous Forge? This will remove all system integration. [y/N]: \"",
      "suggested_fix": "Review and fix according to Ferrous Forge standards",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/uninstall.rs",
      "line": 8,
      "message": "Function has 53 lines, maximum allowed is 50",
      "code_snippet": "pub async fn execute(confirm: bool) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    }
  ],
  "fix_instructions": [
    {
      "violation_type": "FileTooLarge",
      "count": 13,
      "fix_strategy": "1. Identify logical boundaries in the file\n2. Create new module directory\n3. Split into focused modules\n4. Update imports",
      "example_fix": "// Split validation.rs into validation/mod.rs, validation/core.rs, validation/types.rs",
      "effort_level": "Hard"
    },
    {
      "violation_type": "FunctionTooLarge",
      "count": 49,
      "fix_strategy": "Review and fix manually",
      "example_fix": "",
      "effort_level": "Moderate"
    },
    {
      "violation_type": "UnwrapInProduction",
      "count": 127,
      "fix_strategy": "1. Change function to return Result<T, Error>\n2. Replace ? with ?\n3. Handle errors at call sites",
      "example_fix": "// Before: value.unwrap()\n// After: value?",
      "effort_level": "Easy"
    },
    {
      "violation_type": "LineTooLong",
      "count": 15,
      "fix_strategy": "Review and fix manually",
      "example_fix": "",
      "effort_level": "Moderate"
    },
    {
      "violation_type": "UnderscoreBandaid",
      "count": 98,
      "fix_strategy": "1. Identify what functionality the parameter should provide\n2. Either implement the functionality or remove the parameter\n3. Update function signature and callers",
      "example_fix": "// Before: fn process(_unused: String, data: Data)\n// After: fn process(data: Data) or implement the unused parameter",
      "effort_level": "Moderate"
    }
  ]
}