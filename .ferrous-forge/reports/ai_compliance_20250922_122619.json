{
  "metadata": {
    "timestamp": "2025-09-22T12:26:19.815096141+00:00",
    "project_path": ".",
    "ferrous_forge_version": "1.3.0",
    "total_violations": 52,
    "report_version": "1.0.0"
  },
  "summary": {
    "compliance_percentage": 0.0,
    "files_analyzed": 0,
    "most_critical_issues": [
      "UnderscoreBandaid violations (implement missing functionality)",
      "Large files need splitting",
      "Large functions need refactoring"
    ],
    "estimated_fix_time_hours": 13.0
  },
  "violations": [
    {
      "violation_type": "FileTooLarge",
      "file": "./src/commands/fix/mod.rs",
      "line": 377,
      "message": "File has 377 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/fix/mod.rs",
      "line": 209,
      "message": "Function has 52 lines, maximum allowed is 50",
      "code_snippet": "    violations_by_file: std::collections::HashMap<PathBuf, Vec<Violation>>,",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/fix/mod.rs",
      "line": 326,
      "message": "Function has 52 lines, maximum allowed is 50",
      "code_snippet": "fn fix_file_violations(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/init.rs",
      "line": 8,
      "message": "Function has 53 lines, maximum allowed is 50",
      "code_snippet": "    println!(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/commands/rust.rs",
      "line": 356,
      "message": "File has 356 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/commands/template.rs",
      "line": 372,
      "message": "File has 372 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/commands/uninstall.rs",
      "line": 9,
      "message": "Function has 54 lines, maximum allowed is 50",
      "code_snippet": "    if !confirm {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/commands/validate.rs",
      "line": 550,
      "message": "File has 550 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "LineTooLong",
      "file": "./src/commands/validate.rs",
      "line": 282,
      "message": "Line has 120 characters, maximum allowed is 100",
      "code_snippet": "        ",
      "suggested_fix": "Review and fix according to Ferrous Forge standards",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/commands/validate.rs",
      "line": 366,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "            // After: fn process(data: Data) or implement the unused parameter\".to_string(),",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/config.rs",
      "line": 463,
      "message": "File has 463 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/doc_coverage.rs",
      "line": 68,
      "message": "Function has 58 lines, maximum allowed is 50",
      "code_snippet": "    // Run cargo doc with JSON output to get warnings",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/edition/migrator/mod.rs",
      "line": 353,
      "message": "File has 353 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/edition/migrator/mod.rs",
      "line": 38,
      "message": "Function has 58 lines, maximum allowed is 50",
      "code_snippet": "        &self,",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/formatting.rs",
      "line": 340,
      "message": "File has 340 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/formatting.rs",
      "line": 205,
      "message": "Function has 58 lines, maximum allowed is 50",
      "code_snippet": "    if success {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/rust_version/github.rs",
      "line": 73,
      "message": "Function has 51 lines, maximum allowed is 50",
      "code_snippet": "        let url = format!(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/rust_version/github.rs",
      "line": 124,
      "message": "Function has 53 lines, maximum allowed is 50",
      "code_snippet": "        let url = format!(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/rust_version/mod.rs",
      "line": 35,
      "message": "Function has 54 lines, maximum allowed is 50",
      "code_snippet": "        match self {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/audit.rs",
      "line": 30,
      "message": "Function has 64 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/build.rs",
      "line": 30,
      "message": "Function has 60 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/clippy.rs",
      "line": 30,
      "message": "Function has 85 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/format.rs",
      "line": 30,
      "message": "Function has 55 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/license.rs",
      "line": 30,
      "message": "Function has 108 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/publish.rs",
      "line": 30,
      "message": "Function has 61 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/semver.rs",
      "line": 31,
      "message": "Function has 83 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/test.rs",
      "line": 30,
      "message": "Function has 69 lines, maximum allowed is 50",
      "code_snippet": "    let start = Instant::now();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/checks/test_runner.rs",
      "line": 9,
      "message": "Function has 79 lines, maximum allowed is 50",
      "code_snippet": "pub async fn test_safety_checks(project_path: &Path) -> Result<()> {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/config.rs",
      "line": 174,
      "message": "Function has 64 lines, maximum allowed is 50",
      "code_snippet": "        match key {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/mod.rs",
      "line": 145,
      "message": "Function has 54 lines, maximum allowed is 50",
      "code_snippet": "        match stage {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/safety/pipeline.rs",
      "line": 38,
      "message": "Function has 52 lines, maximum allowed is 50",
      "code_snippet": "        if !self.config.enabled {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/security.rs",
      "line": 133,
      "message": "Function has 72 lines, maximum allowed is 50",
      "code_snippet": "    let output_str = String::from_utf8_lossy(output);",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/standards/defaults.rs",
      "line": 6,
      "message": "Function has 60 lines, maximum allowed is 50",
      "code_snippet": "    fn default() -> Self {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/templates/registry.rs",
      "line": 656,
      "message": "File has 656 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/templates/registry.rs",
      "line": 44,
      "message": "Function has 98 lines, maximum allowed is 50",
      "code_snippet": "        let mut manifest = TemplateManifest::new(\"cli-app\".to_string(), TemplateKind::CliApp);",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/templates/registry.rs",
      "line": 257,
      "message": "Function has 70 lines, maximum allowed is 50",
      "code_snippet": "        let mut manifest = TemplateManifest::new(\"library\".to_string(), TemplateKind::Library);",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/templates/registry.rs",
      "line": 377,
      "message": "Function has 96 lines, maximum allowed is 50",
      "code_snippet": "        let mut manifest =",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/test_coverage/analyzer.rs",
      "line": 114,
      "message": "Function has 95 lines, maximum allowed is 50",
      "code_snippet": "        #[derive(Deserialize)]",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "LineTooLong",
      "file": "./src/test_coverage/reporting.rs",
      "line": 55,
      "message": "Line has 149 characters, maximum allowed is 100",
      "code_snippet": "",
      "suggested_fix": "Review and fix according to Ferrous Forge standards",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/test_coverage/reporting.rs",
      "line": 51,
      "message": "Function has 96 lines, maximum allowed is 50",
      "code_snippet": "        let mut output = String::new();",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/test_coverage/types.rs",
      "line": 24,
      "message": "Function has 65 lines, maximum allowed is 50",
      "code_snippet": "    fn default() -> Self {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/updater.rs",
      "line": 428,
      "message": "File has 428 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/updater.rs",
      "line": 128,
      "message": "Function has 67 lines, maximum allowed is 50",
      "code_snippet": "        tracing::info!(\"Installing update to version {}\", update_info.version);",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/updater.rs",
      "line": 299,
      "message": "Function has 56 lines, maximum allowed is 50",
      "code_snippet": "        #[derive(Deserialize)]",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/validation/rust_validator/file_checks.rs",
      "line": 46,
      "message": "Function has 209 lines, maximum allowed is 50",
      "code_snippet": "pub async fn validate_rust_file(",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FunctionTooLarge",
      "file": "./src/validation/rust_validator.rs",
      "line": 70,
      "message": "Function has 51 lines, maximum allowed is 50",
      "code_snippet": "        if violations.is_empty() {",
      "suggested_fix": "Extract helper functions or split into smaller, focused functions",
      "auto_fixable": false,
      "priority": 3
    },
    {
      "violation_type": "FileTooLarge",
      "file": "./src/validation/tests.rs",
      "line": 367,
      "message": "File has 367 lines, maximum allowed is 300",
      "code_snippet": "}",
      "suggested_fix": "Split file into smaller modules following single responsibility principle",
      "auto_fixable": false,
      "priority": 4
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/validation/tests.rs",
      "line": 278,
      "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
      "code_snippet": "    let _ = some_operation();",
      "suggested_fix": "Remove unused parameter or implement missing functionality",
      "auto_fixable": false,
      "priority": 2
    },
    {
      "violation_type": "UnderscoreBandaid",
      "file": "./src/validation/tests.rs",
      "line": 279,
      "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
      "code_snippet": "}",
      "suggested_fix": "Replace `let _ =` with proper error handling using `?`",
      "auto_fixable": true,
      "priority": 1
    },
    {
      "violation_type": "UnwrapInProduction",
      "file": "./src/validation/violation.rs",
      "line": 20,
      "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
      "code_snippet": "    UnwrapInProduction,",
      "suggested_fix": "Replace `.unwrap()` with `?` or proper error handling",
      "auto_fixable": true,
      "priority": 1
    }
  ],
  "fix_instructions": [
    {
      "violation_type": "UnwrapInProduction",
      "count": 2,
      "fix_strategy": "1. Change function to return Result<T, Error>\n2. Replace unwrap with ?\n3. Handle errors at call sites",
      "example_fix": "// Before: value.unwrap()\n// After: value?",
      "effort_level": "Easy"
    },
    {
      "violation_type": "FileTooLarge",
      "count": 10,
      "fix_strategy": "1. Identify logical boundaries in the file\n2. Create new module directory\n3. Split into focused modules\n4. Update imports",
      "example_fix": "// Split validation.rs into validation/mod.rs, validation/core.rs, validation/types.rs",
      "effort_level": "Hard"
    },
    {
      "violation_type": "FunctionTooLarge",
      "count": 35,
      "fix_strategy": "Review and fix manually",
      "example_fix": "",
      "effort_level": "Moderate"
    },
    {
      "violation_type": "LineTooLong",
      "count": 2,
      "fix_strategy": "Review and fix manually",
      "example_fix": "",
      "effort_level": "Moderate"
    },
    {
      "violation_type": "UnderscoreBandaid",
      "count": 3,
      "fix_strategy": "1. Identify what functionality the parameter should provide\n2. Either implement the functionality or remove the parameter\n3. Update function signature and callers",
      "example_fix": "// Before: fn process(_unused: String, data: Data)\n// After: fn process(data: Data) or implement the unused parameter",
      "effort_level": "Moderate"
    }
  ]
}