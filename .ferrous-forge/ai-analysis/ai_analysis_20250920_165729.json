{
  "metadata": {
    "total_violations": 290,
    "analyzable_violations": 108,
    "project_path": "/mnt/projects/ferrous-forge",
    "analysis_depth": "Semantic"
  },
  "violation_analyses": [
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/analyzer.rs",
        "line": 20,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(project_root: PathBuf) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "use crate::validation::Violation;",
          "",
          "/// AI analyzer for automated violation analysis",
          "pub struct AIAnalyzer {",
          "    project_root: PathBuf,",
          "}",
          "",
          "impl AIAnalyzer {",
          "    /// Create a new AI analyzer",
          "    pub fn new(project_root: PathBuf) -> Self {",
          "        Self { project_root }",
          "    }",
          "",
          "    /// Analyze violations and generate report",
          "    pub fn analyze_violations(&self, violations: Vec<Violation>) -> Result<AIAnalysisReport> {",
          "        let mut violation_analyses = Vec::new();",
          "        let mut analyzable_count = 0;",
          "",
          "        for violation in &violations {",
          "            if let Ok(analysis) = self.analyze_single_violation(&violation) {"
        ],
        "imports": [
          "use std::fs;",
          "use std::path::PathBuf;",
          "use anyhow::Result;",
          "use chrono::Utc;",
          "use super::types::*;",
          "use super::context::extract_code_context;",
          "use super::semantic::{perform_semantic_analysis, assess_fix_complexity};",
          "use super::strategies::{generate_fix_strategies, generate_ai_instructions, identify_code_patterns};",
          "use crate::validation::Violation;",
          "        use std::fs;"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 30: Control flow statement",
          "Line 31: Control flow statement",
          "Line 71: Control flow statement",
          "Line 98: Control flow statement",
          "Line 100: Control flow statement",
          "Line 123: Control flow statement",
          "Line 125: Control flow statement",
          "Line 148: Control flow statement",
          "Line 150: Control flow statement",
          "Line 179: Control flow statement",
          "Line 187: Control flow statement",
          "Line 191: Control flow statement",
          "Line 192: Control flow statement",
          "Line 195: Control flow statement"
        ],
        "dependencies": [
          "use anyhow::Result;",
          "use chrono::Utc;",
          "use super::types::*;",
          "use super::context::extract_code_context;",
          "use super::semantic::{perform_semantic_analysis, assess_fix_complexity};",
          "use super::strategies::{generate_fix_strategies, generate_ai_instructions, identify_code_patterns};",
          "use crate::validation::Violation;"
        ],
        "error_propagation": [
          "Line 38: Error handling point",
          "Line 59: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 183: Error handling point",
          "Line 184: Error handling point",
          "Line 190: Error handling point",
          "Line 209: Error handling point",
          "Line 227: Error handling point",
          "Line 233: Error handling point",
          "Line 234: Error handling point",
          "Line 239: Error handling point",
          "Line 264: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/context.rs",
        "line": 88,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "detect_error_handling_style",
        "function_signature": "pub fn detect_error_handling_style(imports: &[String], content: &str) -> ErrorHandlingStyle {",
        "return_type": "ErrorHandlingStyle {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "pub fn detect_error_handling_style(imports: &[String], content: &str) -> ErrorHandlingStyle {",
          "    if imports.iter().any(|i| i.contains(\"anyhow\")) || content.contains(\"anyhow::Result\") {",
          "        ErrorHandlingStyle::AnyhowResult",
          "    } else if content.contains(\"Result<\") && !content.contains(\"std::result::Result\") {",
          "        ErrorHandlingStyle::CustomResult",
          "    } else if content.contains(\"Result<\") {",
          "        ErrorHandlingStyle::StdResult",
          "    } else if content.contains(\"Option<\") {",
          "        ErrorHandlingStyle::OptionBased",
          "    } else if content.contains(\"panic!\") || content.contains(\".unwrap()\") {",
          "        ErrorHandlingStyle::Panic",
          "    } else {",
          "        ErrorHandlingStyle::Unknown",
          "    }",
          "}",
          "",
          "fn detect_trait_impl(content: &str, line: usize) -> Option<String> {",
          "    let lines: Vec<&str> = content.lines().collect();",
          "    for i in (0..line.min(lines.len())).rev() {",
          "        if lines[i].contains(\"impl\") && lines[i].contains(\"for\") {"
        ],
        "imports": [
          "use super::types::{CodeContext, ErrorHandlingStyle};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 66: Control flow statement",
          "Line 80: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 88: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{CodeContext, ErrorHandlingStyle};"
        ],
        "error_propagation": [
          "Line 88: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 32,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "infer_actual_type",
        "function_signature": "fn infer_actual_type(lines: &[&str], line_idx: usize) -> Option<String> {",
        "return_type": "Option<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        actual_type,",
          "        expected_type,",
          "        data_flow,",
          "        control_flow,",
          "        dependencies,",
          "        error_propagation,",
          "    }",
          "}",
          "",
          "fn infer_actual_type(lines: &[&str], line_idx: usize) -> Option<String> {",
          "    if line_idx < lines.len() {",
          "        let line = lines[line_idx];",
          "        if line.contains(\"Result<\") {",
          "            Some(\"Result\".to_string())",
          "        } else if line.contains(\"Option<\") {",
          "            Some(\"Option\".to_string())",
          "        } else if line.contains(\"Vec<\") {",
          "            Some(\"Vec\".to_string())",
          "        } else {",
          "            None"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Option",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 49,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "infer_expected_type",
        "function_signature": "fn infer_expected_type(violation_type: &ViolationType) -> Option<String> {",
        "return_type": "Option<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            Some(\"Vec\".to_string())",
          "        } else {",
          "            None",
          "        }",
          "    } else {",
          "        None",
          "    }",
          "}",
          "",
          "fn infer_expected_type(violation_type: &ViolationType) -> Option<String> {",
          "    match violation_type {",
          "        ViolationType::UnwrapInProduction => Some(\"Result or Option\".to_string()),",
          "        _ => None,",
          "    }",
          "}",
          "",
          "fn trace_data_flow(lines: &[&str], line_idx: usize) -> Vec<String> {",
          "    let mut flow = Vec::new();",
          "    if line_idx < lines.len() {",
          "        if let Some(var_name) = extract_variable_name(lines[line_idx]) {"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Option",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 56,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "trace_data_flow",
        "function_signature": "fn trace_data_flow(lines: &[&str], line_idx: usize) -> Vec<String> {",
        "return_type": "Vec<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "}",
          "",
          "fn infer_expected_type(violation_type: &ViolationType) -> Option<String> {",
          "    match violation_type {",
          "        ViolationType::UnwrapInProduction => Some(\"Result or Option\".to_string()),",
          "        _ => None,",
          "    }",
          "}",
          "",
          "fn trace_data_flow(lines: &[&str], line_idx: usize) -> Vec<String> {",
          "    let mut flow = Vec::new();",
          "    if line_idx < lines.len() {",
          "        if let Some(var_name) = extract_variable_name(lines[line_idx]) {",
          "            let usage = analyze_variable_usage(lines);",
          "            if let Some(uses) = usage.get(&var_name) {",
          "                for use_line in uses {",
          "                    flow.push(format!(\"Line {}: Variable '{}' used\", use_line + 1, var_name));",
          "                }",
          "            }",
          "        }"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Vec",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 71,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "trace_control_flow",
        "function_signature": "fn trace_control_flow(lines: &[&str], _line_idx: usize) -> Vec<String> {",
        "return_type": "Vec<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                for use_line in uses {",
          "                    flow.push(format!(\"Line {}: Variable '{}' used\", use_line + 1, var_name));",
          "                }",
          "            }",
          "        }",
          "    }",
          "    flow",
          "}",
          "",
          "fn trace_control_flow(lines: &[&str], _line_idx: usize) -> Vec<String> {",
          "    let mut flow = Vec::new();",
          "    for (i, line) in lines.iter().enumerate() {",
          "        if line.contains(\"if \") || line.contains(\"match \") || line.contains(\"while \") {",
          "            flow.push(format!(\"Line {}: Control flow statement\", i + 1));",
          "        }",
          "    }",
          "    flow",
          "}",
          "",
          "fn analyze_variable_usage(lines: &[&str]) -> HashMap<String, Vec<usize>> {"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Vec",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 111,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "trace_error_propagation",
        "function_signature": "fn trace_error_propagation(lines: &[&str], _line_idx: usize) -> Vec<String> {",
        "return_type": "Vec<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    let mut calls = Vec::new();",
          "    for part in line.split(&[' ', '(', ')', '{', '}', ';'][..]) {",
          "        if part.contains(\"()\") {",
          "            calls.push(part.replace(\"()\", \"\"));",
          "        }",
          "    }",
          "    calls",
          "}",
          "",
          "fn trace_error_propagation(lines: &[&str], _line_idx: usize) -> Vec<String> {",
          "    let mut path = Vec::new();",
          "    for (i, line) in lines.iter().enumerate() {",
          "        if line.contains('?') || line.contains(\".unwrap()\") || line.contains(\".expect(\") {",
          "            path.push(format!(\"Line {}: Error handling point\", i + 1));",
          "        }",
          "    }",
          "    path",
          "}",
          "",
          "/// Assess the complexity of fixing a violation"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Vec",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 114,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "trace_error_propagation",
        "function_signature": "fn trace_error_propagation(lines: &[&str], _line_idx: usize) -> Vec<String> {",
        "return_type": "Vec<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            calls.push(part.replace(\"()\", \"\"));",
          "        }",
          "    }",
          "    calls",
          "}",
          "",
          "fn trace_error_propagation(lines: &[&str], _line_idx: usize) -> Vec<String> {",
          "    let mut path = Vec::new();",
          "    for (i, line) in lines.iter().enumerate() {",
          "        if line.contains('?') || line.contains(\".unwrap()\") || line.contains(\".expect(\") {",
          "            path.push(format!(\"Line {}: Error handling point\", i + 1));",
          "        }",
          "    }",
          "    path",
          "}",
          "",
          "/// Assess the complexity of fixing a violation",
          "pub fn assess_fix_complexity(",
          "    violation: &Violation,",
          "    context: &CodeContext,"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs",
        "line": 114,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "trace_error_propagation",
        "function_signature": "fn trace_error_propagation(lines: &[&str], _line_idx: usize) -> Vec<String> {",
        "return_type": "Vec<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            calls.push(part.replace(\"()\", \"\"));",
          "        }",
          "    }",
          "    calls",
          "}",
          "",
          "fn trace_error_propagation(lines: &[&str], _line_idx: usize) -> Vec<String> {",
          "    let mut path = Vec::new();",
          "    for (i, line) in lines.iter().enumerate() {",
          "        if line.contains('?') || line.contains(\".unwrap()\") || line.contains(\".expect(\") {",
          "            path.push(format!(\"Line {}: Error handling point\", i + 1));",
          "        }",
          "    }",
          "    path",
          "}",
          "",
          "/// Assess the complexity of fixing a violation",
          "pub fn assess_fix_complexity(",
          "    violation: &Violation,",
          "    context: &CodeContext,"
        ],
        "imports": [
          "use std::collections::HashMap;",
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 39: Control flow statement",
          "Line 50: Control flow statement",
          "Line 58: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 74: Control flow statement",
          "Line 84: Control flow statement",
          "Line 92: Control flow statement",
          "Line 104: Control flow statement",
          "Line 114: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 130: Control flow statement",
          "Line 151: Control flow statement",
          "Line 156: Control flow statement",
          "Line 160: Control flow statement",
          "Line 164: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{SemanticAnalysis, CodeContext, FixComplexity};",
          "use crate::validation::{ViolationType, Violation};",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 114: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 23,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "create_strategy",
        "function_signature": "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
        "return_type": "FixStrategy {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "    ",
          "    for (violation_type, count) in violation_counts {",
          "        strategies.push(create_strategy(violation_type.clone(), count));",
          "    }",
          "    ",
          "    strategies",
          "}",
          "",
          "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
          "    match violation_type {",
          "        ViolationType::UnwrapInProduction => FixStrategy {",
          "            violation_type,",
          "            strategy_name: \"Replace unwrap with proper error handling\".to_string(),",
          "            description: format!(",
          "                \"Replace {} instances of .unwrap() with ? operator or proper error handling\",",
          "                count",
          "            ),",
          "            implementation_steps: vec![",
          "                \"Identify function return type\".to_string(),"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 29,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "create_strategy",
        "function_signature": "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
        "return_type": "FixStrategy {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    strategies",
          "}",
          "",
          "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
          "    match violation_type {",
          "        ViolationType::UnwrapInProduction => FixStrategy {",
          "            violation_type,",
          "            strategy_name: \"Replace unwrap with proper error handling\".to_string(),",
          "            description: format!(",
          "                \"Replace {} instances of .unwrap() with ? operator or proper error handling\",",
          "                count",
          "            ),",
          "            implementation_steps: vec![",
          "                \"Identify function return type\".to_string(),",
          "                \"If Result type, replace .unwrap() with ?\".to_string(),",
          "                \"If not, change return type to Result\".to_string(),",
          "                \"Update function callers\".to_string(),",
          "            ],",
          "            estimated_effort: if count < 10 { \"Low\" } else { \"Medium\" }.to_string(),",
          "            risk_level: \"Low\".to_string(),"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 34,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "create_strategy",
        "function_signature": "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
        "return_type": "FixStrategy {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        ViolationType::UnwrapInProduction => FixStrategy {",
          "            violation_type,",
          "            strategy_name: \"Replace unwrap with proper error handling\".to_string(),",
          "            description: format!(",
          "                \"Replace {} instances of .unwrap() with ? operator or proper error handling\",",
          "                count",
          "            ),",
          "            implementation_steps: vec![",
          "                \"Identify function return type\".to_string(),",
          "                \"If Result type, replace .unwrap() with ?\".to_string(),",
          "                \"If not, change return type to Result\".to_string(),",
          "                \"Update function callers\".to_string(),",
          "            ],",
          "            estimated_effort: if count < 10 { \"Low\" } else { \"Medium\" }.to_string(),",
          "            risk_level: \"Low\".to_string(),",
          "        },",
          "        ViolationType::UnderscoreBandaid => FixStrategy {",
          "            violation_type,",
          "            strategy_name: \"Remove underscore prefixes\".to_string(),",
          "            description: format!(\"Fix {} underscore parameter warnings properly\", count),"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 23,
        "message": "Function has 67 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "create_strategy",
        "function_signature": "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
        "return_type": "FixStrategy {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "    ",
          "    for (violation_type, count) in violation_counts {",
          "        strategies.push(create_strategy(violation_type.clone(), count));",
          "    }",
          "    ",
          "    strategies",
          "}",
          "",
          "fn create_strategy(violation_type: ViolationType, count: usize) -> FixStrategy {",
          "    match violation_type {",
          "        ViolationType::UnwrapInProduction => FixStrategy {",
          "            violation_type,",
          "            strategy_name: \"Replace unwrap with proper error handling\".to_string(),",
          "            description: format!(",
          "                \"Replace {} instances of .unwrap() with ? operator or proper error handling\",",
          "                count",
          "            ),",
          "            implementation_steps: vec![",
          "                \"Identify function return type\".to_string(),"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 90,
        "message": "Function has 63 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_ai_instructions",
        "function_signature": "pub fn generate_ai_instructions(",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            description: format!(\"Fix {} violations\", count),",
          "            implementation_steps: vec![\"Analyze violation\".to_string(), \"Apply fix\".to_string()],",
          "            estimated_effort: \"Medium\".to_string(),",
          "            risk_level: \"Low\".to_string(),",
          "        },",
          "    }",
          "}",
          "",
          "/// Generate AI instructions for fixing violations",
          "pub fn generate_ai_instructions(",
          "    analyses: &[ViolationAnalysis],",
          "    _strategies: &[FixStrategy],",
          ") -> AIInstructions {",
          "    let summary = format!(",
          "        \"Analyzed {} violations. {} are AI-fixable with varying complexity.\",",
          "        analyses.len(),",
          "        analyses.iter().filter(|a| a.ai_fixable).count()",
          "    );",
          "    ",
          "    let mut prioritized_fixes = Vec::new();"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 180,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "detect_error_patterns",
        "function_signature": "fn detect_error_patterns(content: &str) -> Vec<ErrorPattern> {",
        "return_type": "Vec<ErrorPattern> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        ArchitecturalStyle::Layered",
          "    } else {",
          "        ArchitecturalStyle::Unknown",
          "    }",
          "}",
          "",
          "fn detect_error_patterns(content: &str) -> Vec<ErrorPattern> {",
          "    let mut patterns = Vec::new();",
          "    ",
          "    if content.contains(\".unwrap()\") {",
          "        patterns.push(ErrorPattern::UnwrapUsage);",
          "    }",
          "    if content.contains(\".expect(\") {",
          "        patterns.push(ErrorPattern::ExpectUsage);",
          "    }",
          "    if content.contains(\"panic!\") {",
          "        patterns.push(ErrorPattern::PanicUsage);",
          "    }",
          "    if content.contains(\"let _ =\") {",
          "        patterns.push(ErrorPattern::IgnoredError);"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 183,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "detect_error_patterns",
        "function_signature": "fn detect_error_patterns(content: &str) -> Vec<ErrorPattern> {",
        "return_type": "Vec<ErrorPattern> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "}",
          "",
          "fn detect_error_patterns(content: &str) -> Vec<ErrorPattern> {",
          "    let mut patterns = Vec::new();",
          "    ",
          "    if content.contains(\".unwrap()\") {",
          "        patterns.push(ErrorPattern::UnwrapUsage);",
          "    }",
          "    if content.contains(\".expect(\") {",
          "        patterns.push(ErrorPattern::ExpectUsage);",
          "    }",
          "    if content.contains(\"panic!\") {",
          "        patterns.push(ErrorPattern::PanicUsage);",
          "    }",
          "    if content.contains(\"let _ =\") {",
          "        patterns.push(ErrorPattern::IgnoredError);",
          "    }",
          "    if content.contains(\"?\") {",
          "        patterns.push(ErrorPattern::PropagatedError);"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs",
        "line": 189,
        "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "detect_error_patterns",
        "function_signature": "fn detect_error_patterns(content: &str) -> Vec<ErrorPattern> {",
        "return_type": "Vec<ErrorPattern> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    if content.contains(\".unwrap()\") {",
          "        patterns.push(ErrorPattern::UnwrapUsage);",
          "    }",
          "    if content.contains(\".expect(\") {",
          "        patterns.push(ErrorPattern::ExpectUsage);",
          "    }",
          "    if content.contains(\"panic!\") {",
          "        patterns.push(ErrorPattern::PanicUsage);",
          "    }",
          "    if content.contains(\"let _ =\") {",
          "        patterns.push(ErrorPattern::IgnoredError);",
          "    }",
          "    if content.contains(\"?\") {",
          "        patterns.push(ErrorPattern::PropagatedError);",
          "    }",
          "    ",
          "    patterns",
          "}",
          "",
          "fn detect_common_patterns(content: &str) -> Vec<Pattern> {"
        ],
        "imports": [
          "use super::types::{",
          "use crate::validation::ViolationType;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [
          "Line 189: Variable '_' used"
        ],
        "control_flow": [
          "Line 24: Control flow statement",
          "Line 38: Control flow statement",
          "Line 48: Control flow statement",
          "Line 108: Control flow statement",
          "Line 120: Control flow statement",
          "Line 166: Control flow statement",
          "Line 168: Control flow statement",
          "Line 170: Control flow statement",
          "Line 180: Control flow statement",
          "Line 183: Control flow statement",
          "Line 186: Control flow statement",
          "Line 189: Control flow statement",
          "Line 192: Control flow statement",
          "Line 203: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{",
          "use crate::validation::ViolationType;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 34: Error handling point",
          "Line 114: Error handling point",
          "Line 180: Error handling point",
          "Line 183: Error handling point",
          "Line 192: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/config.rs",
        "line": 6,
        "message": "Function has 80 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "//! Config command implementation",
          "",
          "use crate::{config::Config, Result};",
          "use console::style;",
          "",
          "/// Execute the config command",
          "pub async fn execute(",
          "    set: Option<String>,",
          "    get: Option<String>,",
          "    list: bool,",
          "    reset: bool,",
          ") -> Result<()> {",
          "    let mut config = Config::load_or_default().await?;",
          "",
          "    if reset {",
          "        config.reset();"
        ],
        "imports": [
          "use crate::{config::Config, Result};",
          "use console::style;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 15: Control flow statement",
          "Line 22: Control flow statement",
          "Line 35: Control flow statement",
          "Line 36: Control flow statement",
          "Line 48: Control flow statement",
          "Line 49: Control flow statement",
          "Line 50: Control flow statement"
        ],
        "dependencies": [
          "use crate::{config::Config, Result};",
          "use console::style;"
        ],
        "error_propagation": [
          "Line 13: Error handling point",
          "Line 17: Error handling point",
          "Line 52: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/edition.rs",
        "line": 333,
        "message": "File has 334 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_analyze",
        "function_signature": "pub async fn handle_analyze(path: &Path, edition_str: &str) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        println!(",
          "            \"{}\",",
          "            style(\"⚠️  Project needs attention before migration\")",
          "                .yellow()",
          "                .bold()",
          "        );",
          "        println!(\"\\nFix the errors listed above before attempting migration.\");",
          "    }",
          "",
          "    Ok(())",
          "}"
        ],
        "imports": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 96: Control flow statement",
          "Line 116: Control flow statement",
          "Line 131: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 187: Control flow statement",
          "Line 195: Control flow statement",
          "Line 203: Control flow statement",
          "Line 210: Control flow statement",
          "Line 258: Control flow statement",
          "Line 266: Control flow statement",
          "Line 274: Control flow statement",
          "Line 277: Control flow statement",
          "Line 285: Control flow statement",
          "Line 287: Control flow statement",
          "Line 297: Control flow statement",
          "Line 305: Control flow statement",
          "Line 314: Control flow statement"
        ],
        "dependencies": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 86: Error handling point",
          "Line 87: Error handling point",
          "Line 94: Error handling point",
          "Line 158: Error handling point",
          "Line 234: Error handling point",
          "Line 250: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/edition.rs",
        "line": 13,
        "message": "Function has 67 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_check",
        "function_signature": "pub async fn handle_check(path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    check_compliance, get_migration_recommendations, migrator::MigrationOptions, Edition,",
          "    EditionAnalyzer, EditionMigrator,",
          "};",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "use std::path::Path;",
          "",
          "/// Handle edition check command",
          "pub async fn handle_check(path: &Path) -> Result<()> {",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()",
          "            .template(\"{spinner:.green} {msg}\")",
          "            .unwrap_or_else(|_| ProgressStyle::default_spinner()),",
          "    );",
          "    spinner.set_message(\"Checking edition compliance...\");",
          "    spinner.enable_steady_tick(std::time::Duration::from_millis(100));",
          "",
          "    let status = check_compliance(path).await?;"
        ],
        "imports": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 96: Control flow statement",
          "Line 116: Control flow statement",
          "Line 131: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 187: Control flow statement",
          "Line 195: Control flow statement",
          "Line 203: Control flow statement",
          "Line 210: Control flow statement",
          "Line 258: Control flow statement",
          "Line 266: Control flow statement",
          "Line 274: Control flow statement",
          "Line 277: Control flow statement",
          "Line 285: Control flow statement",
          "Line 287: Control flow statement",
          "Line 297: Control flow statement",
          "Line 305: Control flow statement",
          "Line 314: Control flow statement"
        ],
        "dependencies": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 86: Error handling point",
          "Line 87: Error handling point",
          "Line 94: Error handling point",
          "Line 158: Error handling point",
          "Line 234: Error handling point",
          "Line 250: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/edition.rs",
        "line": 80,
        "message": "Function has 153 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_migrate",
        "function_signature": "pub async fn handle_migrate(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    println!(\"\\n📋 Recommendations:\");",
          "    for recommendation in get_migration_recommendations(&status) {",
          "        println!(\"  • {}\", recommendation);",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle edition migrate command",
          "pub async fn handle_migrate(",
          "    edition_str: &str,",
          "    no_backup: bool,",
          "    test: bool,",
          "    idioms: bool,",
          ") -> Result<()> {",
          "    let target_edition = Edition::parse_edition(edition_str)?;",
          "    let project_path = std::env::current_dir()?;",
          "",
          "    println!(\"🚀 Edition Migration Assistant\\n\");",
          "    println!(\"  Target:   {}\", style(target_edition.to_string()).cyan());"
        ],
        "imports": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 96: Control flow statement",
          "Line 116: Control flow statement",
          "Line 131: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 187: Control flow statement",
          "Line 195: Control flow statement",
          "Line 203: Control flow statement",
          "Line 210: Control flow statement",
          "Line 258: Control flow statement",
          "Line 266: Control flow statement",
          "Line 274: Control flow statement",
          "Line 277: Control flow statement",
          "Line 285: Control flow statement",
          "Line 287: Control flow statement",
          "Line 297: Control flow statement",
          "Line 305: Control flow statement",
          "Line 314: Control flow statement"
        ],
        "dependencies": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 86: Error handling point",
          "Line 87: Error handling point",
          "Line 94: Error handling point",
          "Line 158: Error handling point",
          "Line 234: Error handling point",
          "Line 250: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/edition.rs",
        "line": 233,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_analyze",
        "function_signature": "pub async fn handle_analyze(path: &Path, edition_str: &str) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        \"  3. Run {} to verify functionality\",",
          "        style(\"cargo test\").cyan()",
          "    );",
          "    println!(\"  4. Commit the changes to version control\");",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle edition analyze command",
          "pub async fn handle_analyze(path: &Path, edition_str: &str) -> Result<()> {",
          "    let target_edition = Edition::parse_edition(edition_str)?;",
          "",
          "    println!(\"🔍 Edition Compatibility Analysis\\n\");",
          "    println!(\"  Project:  {}\", style(path.display()).dim());",
          "    println!(\"  Target:   {}\", style(target_edition.to_string()).cyan());",
          "",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()",
          "            .template(\"{spinner:.green} {msg}\")"
        ],
        "imports": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 96: Control flow statement",
          "Line 116: Control flow statement",
          "Line 131: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 187: Control flow statement",
          "Line 195: Control flow statement",
          "Line 203: Control flow statement",
          "Line 210: Control flow statement",
          "Line 258: Control flow statement",
          "Line 266: Control flow statement",
          "Line 274: Control flow statement",
          "Line 277: Control flow statement",
          "Line 285: Control flow statement",
          "Line 287: Control flow statement",
          "Line 297: Control flow statement",
          "Line 305: Control flow statement",
          "Line 314: Control flow statement"
        ],
        "dependencies": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 86: Error handling point",
          "Line 87: Error handling point",
          "Line 94: Error handling point",
          "Line 158: Error handling point",
          "Line 234: Error handling point",
          "Line 250: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/edition.rs",
        "line": 232,
        "message": "Function has 102 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_migrate",
        "function_signature": "pub async fn handle_migrate(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    println!(",
          "        \"  3. Run {} to verify functionality\",",
          "        style(\"cargo test\").cyan()",
          "    );",
          "    println!(\"  4. Commit the changes to version control\");",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle edition analyze command",
          "pub async fn handle_analyze(path: &Path, edition_str: &str) -> Result<()> {",
          "    let target_edition = Edition::parse_edition(edition_str)?;",
          "",
          "    println!(\"🔍 Edition Compatibility Analysis\\n\");",
          "    println!(\"  Project:  {}\", style(path.display()).dim());",
          "    println!(\"  Target:   {}\", style(target_edition.to_string()).cyan());",
          "",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()"
        ],
        "imports": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 96: Control flow statement",
          "Line 116: Control flow statement",
          "Line 131: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 187: Control flow statement",
          "Line 195: Control flow statement",
          "Line 203: Control flow statement",
          "Line 210: Control flow statement",
          "Line 258: Control flow statement",
          "Line 266: Control flow statement",
          "Line 274: Control flow statement",
          "Line 277: Control flow statement",
          "Line 285: Control flow statement",
          "Line 287: Control flow statement",
          "Line 297: Control flow statement",
          "Line 305: Control flow statement",
          "Line 314: Control flow statement"
        ],
        "dependencies": [
          "use crate::edition::{",
          "use crate::Result;",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 86: Error handling point",
          "Line 87: Error handling point",
          "Line 94: Error handling point",
          "Line 158: Error handling point",
          "Line 234: Error handling point",
          "Line 250: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/context.rs",
        "line": 35,
        "message": "Function has 68 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_function_signature_multiline",
        "function_signature": "pub fn parse_function_signature_multiline(",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    FileContext {",
          "        is_test_file,",
          "        is_bin_file,",
          "        is_example_file,",
          "        function_signatures,",
          "    }",
          "}",
          "",
          "/// Parse a function signature that may span multiple lines",
          "pub fn parse_function_signature_multiline(",
          "    lines: &[&str],",
          "    start_idx: usize,",
          ") -> Option<FunctionSignature> {",
          "    // Find the opening brace",
          "    let mut brace_line = start_idx;",
          "    let mut signature_lines = vec![lines[start_idx].to_string()];",
          "    ",
          "    // Collect lines until we find the opening brace",
          "    while brace_line < lines.len() && !lines[brace_line].contains('{') {",
          "        if brace_line > start_idx {"
        ],
        "imports": [
          "use super::types::{FileContext, FunctionSignature};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 44: Control flow statement",
          "Line 45: Control flow statement",
          "Line 55: Control flow statement",
          "Line 57: Control flow statement",
          "Line 79: Control flow statement",
          "Line 81: Control flow statement",
          "Line 83: Control flow statement",
          "Line 87: Control flow statement",
          "Line 102: Control flow statement",
          "Line 105: Control flow statement",
          "Line 110: Control flow statement",
          "Line 111: Control flow statement",
          "Line 113: Control flow statement",
          "Line 121: Control flow statement",
          "Line 125: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{FileContext, FunctionSignature};"
        ],
        "error_propagation": [
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 109: Error handling point",
          "Line 120: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/context.rs",
        "line": 103,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_can_use_question_mark",
        "function_signature": "pub fn check_can_use_question_mark(_line: &str, context: &FileContext) -> bool {",
        "return_type": "bool {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        name,",
          "        line_start: start_idx + 1, // Convert to 1-indexed",
          "        line_end: line_end + 1,    // Convert to 1-indexed",
          "        returns_result,",
          "        returns_option,",
          "    })",
          "}",
          "",
          "/// Check if the ? operator can be used in this context",
          "pub fn check_can_use_question_mark(_line: &str, context: &FileContext) -> bool {",
          "    // Don't use ? in test functions",
          "    if context.is_test_file {",
          "        return false;",
          "    }",
          "    ",
          "    // Don't use ? in main functions (unless they return Result)",
          "    if context.is_bin_file {",
          "        // Check if main returns Result",
          "        for sig in &context.function_signatures {",
          "            if sig.name == \"main\" && sig.returns_result {"
        ],
        "imports": [
          "use super::types::{FileContext, FunctionSignature};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 44: Control flow statement",
          "Line 45: Control flow statement",
          "Line 55: Control flow statement",
          "Line 57: Control flow statement",
          "Line 79: Control flow statement",
          "Line 81: Control flow statement",
          "Line 83: Control flow statement",
          "Line 87: Control flow statement",
          "Line 102: Control flow statement",
          "Line 105: Control flow statement",
          "Line 110: Control flow statement",
          "Line 111: Control flow statement",
          "Line 113: Control flow statement",
          "Line 121: Control flow statement",
          "Line 125: Control flow statement"
        ],
        "dependencies": [
          "use super::types::{FileContext, FunctionSignature};"
        ],
        "error_propagation": [
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 109: Error handling point",
          "Line 120: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "LineTooLong",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/mod.rs",
        "line": 176,
        "message": "Line has 186 characters, maximum allowed is 100",
        "severity": "Warning"
      },
      "code_context": {
        "function_name": "execute_with_ai",
        "function_signature": "pub async fn execute_with_ai(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "//! This module implements intelligent auto-fixing for common Rust anti-patterns.",
        "surrounding_code": [
          "                    file_path.display(),",
          "                    e",
          "                );",
          "            }",
          "        }",
          "    }",
          "",
          "    // Print summary",
          "    println!();",
          "    println!(\"{}\", style(\"──────────────────────────────────────────────────\").dim());",
          "    ",
          "    if dry_run {",
          "        println!(",
          "            \"{}\",",
          "            style(format!(\"📝 Would fix {} violations safely\", total_fixed)).green()",
          "        );",
          "        if total_skipped > 0 {",
          "            println!(",
          "                \"{}\",",
          "                style(format!(\"⚠️ Would skip {} unsafe fixes\", total_skipped)).yellow()"
        ],
        "imports": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "use std::collections::{HashMap, HashSet};",
          "use std::fs;",
          "use std::path::{Path, PathBuf};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 56: Control flow statement",
          "Line 79: Control flow statement",
          "Line 90: Control flow statement",
          "Line 107: Control flow statement",
          "Line 114: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 143: Control flow statement",
          "Line 152: Control flow statement",
          "Line 178: Control flow statement",
          "Line 183: Control flow statement",
          "Line 190: Control flow statement",
          "Line 207: Control flow statement",
          "Line 240: Control flow statement",
          "Line 247: Control flow statement",
          "Line 249: Control flow statement",
          "Line 261: Control flow statement",
          "Line 262: Control flow statement",
          "Line 264: Control flow statement",
          "Line 265: Control flow statement"
        ],
        "dependencies": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 73: Error handling point",
          "Line 77: Error handling point",
          "Line 231: Error handling point",
          "Line 272: Error handling point"
        ]
      },
      "fix_complexity": "Trivial",
      "ai_fixable": true,
      "fix_recommendation": "Break line at appropriate point (e.g., after comma, operator)",
      "side_effects": [],
      "confidence_score": 1.0
    },
    {
      "violation": {
        "violation_type": "LineTooLong",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/mod.rs",
        "line": 215,
        "message": "Line has 102 characters, maximum allowed is 100",
        "severity": "Warning"
      },
      "code_context": {
        "function_name": "execute_with_ai",
        "function_signature": "pub async fn execute_with_ai(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "//! This module implements intelligent auto-fixing for common Rust anti-patterns.",
        "surrounding_code": [
          "        ",
          "        if total_skipped > 0 {",
          "            println!(",
          "                \"{}\",",
          "                style(format!(\"⚠️ Skipped {} unsafe fixes\", total_skipped)).yellow()",
          "            );",
          "            println!();",
          "            println!(",
          "                \"{}\",",
          "                style(\"💡 Tip: Review skipped fixes manually or use AI analysis for guidance\").dim()",
          "            );",
          "        }",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "",
          "/// Fix violations in a single file",
          "fn fix_file_violations("
        ],
        "imports": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "use std::collections::{HashMap, HashSet};",
          "use std::fs;",
          "use std::path::{Path, PathBuf};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 56: Control flow statement",
          "Line 79: Control flow statement",
          "Line 90: Control flow statement",
          "Line 107: Control flow statement",
          "Line 114: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 143: Control flow statement",
          "Line 152: Control flow statement",
          "Line 178: Control flow statement",
          "Line 183: Control flow statement",
          "Line 190: Control flow statement",
          "Line 207: Control flow statement",
          "Line 240: Control flow statement",
          "Line 247: Control flow statement",
          "Line 249: Control flow statement",
          "Line 261: Control flow statement",
          "Line 262: Control flow statement",
          "Line 264: Control flow statement",
          "Line 265: Control flow statement"
        ],
        "dependencies": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 73: Error handling point",
          "Line 77: Error handling point",
          "Line 231: Error handling point",
          "Line 272: Error handling point"
        ]
      },
      "fix_complexity": "Trivial",
      "ai_fixable": true,
      "fix_recommendation": "Break line at appropriate point (e.g., after comma, operator)",
      "side_effects": [],
      "confidence_score": 1.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/mod.rs",
        "line": 40,
        "message": "Function has 185 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "execute_with_ai",
        "function_signature": "pub async fn execute_with_ai(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "//! This module implements intelligent auto-fixing for common Rust anti-patterns.",
        "surrounding_code": [
          "    only: Option<String>,",
          "    skip: Option<String>,",
          "    dry_run: bool,",
          "    limit: Option<usize>,",
          ") -> Result<()> {",
          "    execute_with_ai(path, only, skip, dry_run, limit, false).await",
          "}",
          "",
          "/// Execute the fix command with optional AI analysis",
          "pub async fn execute_with_ai(",
          "    path: Option<PathBuf>,",
          "    only: Option<String>,",
          "    skip: Option<String>,",
          "    dry_run: bool,",
          "    limit: Option<usize>,",
          "    ai_analysis: bool,",
          ") -> Result<()> {",
          "    let project_path = path.unwrap_or_else(|| std::env::current_dir().unwrap_or_default());",
          "",
          "    println!("
        ],
        "imports": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "use std::collections::{HashMap, HashSet};",
          "use std::fs;",
          "use std::path::{Path, PathBuf};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 56: Control flow statement",
          "Line 79: Control flow statement",
          "Line 90: Control flow statement",
          "Line 107: Control flow statement",
          "Line 114: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 143: Control flow statement",
          "Line 152: Control flow statement",
          "Line 178: Control flow statement",
          "Line 183: Control flow statement",
          "Line 190: Control flow statement",
          "Line 207: Control flow statement",
          "Line 240: Control flow statement",
          "Line 247: Control flow statement",
          "Line 249: Control flow statement",
          "Line 261: Control flow statement",
          "Line 262: Control flow statement",
          "Line 264: Control flow statement",
          "Line 265: Control flow statement"
        ],
        "dependencies": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 73: Error handling point",
          "Line 77: Error handling point",
          "Line 231: Error handling point",
          "Line 272: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/mod.rs",
        "line": 224,
        "message": "Function has 52 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "execute_with_ai",
        "function_signature": "pub async fn execute_with_ai(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "//! This module implements intelligent auto-fixing for common Rust anti-patterns.",
        "surrounding_code": [
          "                style(\"💡 Tip: Review skipped fixes manually or use AI analysis for guidance\").dim()",
          "            );",
          "        }",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "",
          "/// Fix violations in a single file",
          "fn fix_file_violations(",
          "    file_path: &Path,",
          "    violations: &[Violation],",
          "    dry_run: bool,",
          ") -> Result<(usize, usize)> {",
          "    let content = fs::read_to_string(file_path)",
          "        .with_context(|| format!(\"Failed to read file: {}\", file_path.display()))?;",
          "",
          "    let context = analyze_file_context(&content);",
          "    let mut lines: Vec<String> = content.lines().map(|s| s.to_string()).collect();"
        ],
        "imports": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "use std::collections::{HashMap, HashSet};",
          "use std::fs;",
          "use std::path::{Path, PathBuf};"
        ],
        "error_handling_style": "AnyhowResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 56: Control flow statement",
          "Line 79: Control flow statement",
          "Line 90: Control flow statement",
          "Line 107: Control flow statement",
          "Line 114: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 143: Control flow statement",
          "Line 152: Control flow statement",
          "Line 178: Control flow statement",
          "Line 183: Control flow statement",
          "Line 190: Control flow statement",
          "Line 207: Control flow statement",
          "Line 240: Control flow statement",
          "Line 247: Control flow statement",
          "Line 249: Control flow statement",
          "Line 261: Control flow statement",
          "Line 262: Control flow statement",
          "Line 264: Control flow statement",
          "Line 265: Control flow statement"
        ],
        "dependencies": [
          "use context::analyze_file_context;",
          "use strategies::fix_violation_in_line;",
          "use utils::{filter_violations, group_violations_by_file};",
          "use crate::ai_analyzer;",
          "use crate::validation::{RustValidator, Violation};",
          "use crate::Result;",
          "use anyhow::Context as AnyhowContext;",
          "use console::style;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 73: Error handling point",
          "Line 77: Error handling point",
          "Line 231: Error handling point",
          "Line 272: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "LineTooLong",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 8,
        "message": "Line has 101 characters, maximum allowed is 100",
        "severity": "Warning"
      },
      "code_context": {
        "function_name": "fix_violation_in_line",
        "function_signature": "pub fn fix_violation_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "//! Fix strategies for different violation types",
          "",
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;",
          "",
          "/// Fix a violation in a line of code",
          "pub fn fix_violation_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
          "    match violation.violation_type {",
          "        ViolationType::UnwrapInProduction => fix_unwrap_in_line(line, violation, context),",
          "        ViolationType::UnderscoreBandaid => fix_underscore_in_line(line, violation, context),",
          "        _ => FixResult::NotApplicable,",
          "    }",
          "}",
          "",
          "/// Fix unwrap violations in a line",
          "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
          "    // Skip test files"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Trivial",
      "ai_fixable": true,
      "fix_recommendation": "Break line at appropriate point (e.g., after comma, operator)",
      "side_effects": [],
      "confidence_score": 1.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 27,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    // Skip test files",
          "    if context.is_test_file {",
          "        return FixResult::Skipped(format!(",
          "            \"Test file - manual review needed at {}:{}\",",
          "            violation.file.display(),",
          "            violation.line",
          "        ));",
          "    }",
          "",
          "    if line.contains(\".unwrap()\") {",
          "        // Don't fix if it's in a string literal",
          "        if line.contains(r#\"\".unwrap()\"\"#) || line.contains(r#\"'.unwrap()'\"#) {",
          "            return FixResult::Skipped(\"String literal, not actual code\".to_string());",
          "        }",
          "        ",
          "        // Check if we're in a function that can use ?",
          "        let can_use_question_mark = check_can_use_question_mark(line, context);",
          "",
          "        if can_use_question_mark {",
          "            // Safe to replace with ?"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 29,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        return FixResult::Skipped(format!(",
          "            \"Test file - manual review needed at {}:{}\",",
          "            violation.file.display(),",
          "            violation.line",
          "        ));",
          "    }",
          "",
          "    if line.contains(\".unwrap()\") {",
          "        // Don't fix if it's in a string literal",
          "        if line.contains(r#\"\".unwrap()\"\"#) || line.contains(r#\"'.unwrap()'\"#) {",
          "            return FixResult::Skipped(\"String literal, not actual code\".to_string());",
          "        }",
          "        ",
          "        // Check if we're in a function that can use ?",
          "        let can_use_question_mark = check_can_use_question_mark(line, context);",
          "",
          "        if can_use_question_mark {",
          "            // Safe to replace with ?",
          "            return FixResult::Fixed(line.replace(\".unwrap()\", \"?\"));",
          "        } else {"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 38,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        if line.contains(r#\"\".unwrap()\"\"#) || line.contains(r#\"'.unwrap()'\"#) {",
          "            return FixResult::Skipped(\"String literal, not actual code\".to_string());",
          "        }",
          "        ",
          "        // Check if we're in a function that can use ?",
          "        let can_use_question_mark = check_can_use_question_mark(line, context);",
          "",
          "        if can_use_question_mark {",
          "            // Safe to replace with ?",
          "            return FixResult::Fixed(line.replace(\".unwrap()\", \"?\"));",
          "        } else {",
          "            // For main functions or examples, use expect",
          "            if context.is_bin_file || context.is_example_file {",
          "                let fixed = line.replace(",
          "                    \".unwrap()\", ",
          "                    r#\".expect(\"Failed to complete operation\")\"#",
          "                );",
          "                return FixResult::Fixed(fixed);",
          "            }",
          "            return FixResult::Skipped("
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 43,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let can_use_question_mark = check_can_use_question_mark(line, context);",
          "",
          "        if can_use_question_mark {",
          "            // Safe to replace with ?",
          "            return FixResult::Fixed(line.replace(\".unwrap()\", \"?\"));",
          "        } else {",
          "            // For main functions or examples, use expect",
          "            if context.is_bin_file || context.is_example_file {",
          "                let fixed = line.replace(",
          "                    \".unwrap()\", ",
          "                    r#\".expect(\"Failed to complete operation\")\"#",
          "                );",
          "                return FixResult::Fixed(fixed);",
          "            }",
          "            return FixResult::Skipped(",
          "                \"Cannot use ? operator - function doesn't return Result/Option\".to_string()",
          "            );",
          "        }",
          "    } else if line.contains(\".expect(\") {",
          "        // For expect, we can potentially replace with ? if the context allows"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 44,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        if can_use_question_mark {",
          "            // Safe to replace with ?",
          "            return FixResult::Fixed(line.replace(\".unwrap()\", \"?\"));",
          "        } else {",
          "            // For main functions or examples, use expect",
          "            if context.is_bin_file || context.is_example_file {",
          "                let fixed = line.replace(",
          "                    \".unwrap()\", ",
          "                    r#\".expect(\"Failed to complete operation\")\"#",
          "                );",
          "                return FixResult::Fixed(fixed);",
          "            }",
          "            return FixResult::Skipped(",
          "                \"Cannot use ? operator - function doesn't return Result/Option\".to_string()",
          "            );",
          "        }",
          "    } else if line.contains(\".expect(\") {",
          "        // For expect, we can potentially replace with ? if the context allows",
          "        if check_can_use_question_mark(line, context) {"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 52,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                    \".unwrap()\", ",
          "                    r#\".expect(\"Failed to complete operation\")\"#",
          "                );",
          "                return FixResult::Fixed(fixed);",
          "            }",
          "            return FixResult::Skipped(",
          "                \"Cannot use ? operator - function doesn't return Result/Option\".to_string()",
          "            );",
          "        }",
          "    } else if line.contains(\".expect(\") {",
          "        // For expect, we can potentially replace with ? if the context allows",
          "        if check_can_use_question_mark(line, context) {",
          "            // Find the expect call and replace it",
          "            if let Some(start) = line.find(\".expect(\") {",
          "                let before = &line[..start];",
          "                ",
          "                // Find the matching closing parenthesis",
          "                let after_expect = &line[start + 8..];",
          "                let mut paren_count = 1;",
          "                let mut end_idx = 0;"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 56,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            }",
          "            return FixResult::Skipped(",
          "                \"Cannot use ? operator - function doesn't return Result/Option\".to_string()",
          "            );",
          "        }",
          "    } else if line.contains(\".expect(\") {",
          "        // For expect, we can potentially replace with ? if the context allows",
          "        if check_can_use_question_mark(line, context) {",
          "            // Find the expect call and replace it",
          "            if let Some(start) = line.find(\".expect(\") {",
          "                let before = &line[..start];",
          "                ",
          "                // Find the matching closing parenthesis",
          "                let after_expect = &line[start + 8..];",
          "                let mut paren_count = 1;",
          "                let mut end_idx = 0;",
          "                let mut in_string = false;",
          "                let mut escape_next = false;",
          "                ",
          "                for (i, ch) in after_expect.chars().enumerate() {"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 56: Variable 'Some(start)' used"
        ],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/fix/strategies.rs",
        "line": 17,
        "message": "Function has 95 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fix_unwrap_in_line",
        "function_signature": "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
        "return_type": "FixResult {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "pub fn fix_violation_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
          "    match violation.violation_type {",
          "        ViolationType::UnwrapInProduction => fix_unwrap_in_line(line, violation, context),",
          "        ViolationType::UnderscoreBandaid => fix_underscore_in_line(line, violation, context),",
          "        _ => FixResult::NotApplicable,",
          "    }",
          "}",
          "",
          "/// Fix unwrap violations in a line",
          "fn fix_unwrap_in_line(line: &str, violation: &Violation, context: &FileContext) -> FixResult {",
          "    // Skip test files",
          "    if context.is_test_file {",
          "        return FixResult::Skipped(format!(",
          "            \"Test file - manual review needed at {}:{}\",",
          "            violation.file.display(),",
          "            violation.line",
          "        ));",
          "    }",
          "",
          "    if line.contains(\".unwrap()\") {"
        ],
        "imports": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_handling_style": "Panic"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 19: Control flow statement",
          "Line 27: Control flow statement",
          "Line 28: Control flow statement",
          "Line 29: Control flow statement",
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 41: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 56: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 82: Control flow statement",
          "Line 84: Control flow statement",
          "Line 86: Control flow statement",
          "Line 94: Control flow statement",
          "Line 114: Control flow statement",
          "Line 122: Control flow statement",
          "Line 123: Control flow statement",
          "Line 124: Control flow statement",
          "Line 125: Control flow statement",
          "Line 127: Control flow statement",
          "Line 128: Control flow statement",
          "Line 143: Control flow statement"
        ],
        "dependencies": [
          "use crate::validation::{Violation, ViolationType};",
          "use super::types::{FileContext, FixResult};",
          "use super::context::check_can_use_question_mark;"
        ],
        "error_propagation": [
          "Line 27: Error handling point",
          "Line 29: Error handling point",
          "Line 33: Error handling point",
          "Line 37: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 44: Error handling point",
          "Line 49: Error handling point",
          "Line 52: Error handling point",
          "Line 53: Error handling point",
          "Line 56: Error handling point",
          "Line 96: Error handling point",
          "Line 103: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/init.rs",
        "line": 7,
        "message": "Function has 53 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "execute",
        "function_signature": "pub async fn execute(force: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Initialize command implementation",
          "",
          "use crate::{config::Config, Result};",
          "use console::style;",
          "",
          "/// Execute the init command",
          "pub async fn execute(force: bool) -> Result<()> {",
          "    println!(",
          "        \"{}\",",
          "        style(\"🔨 Initializing Ferrous Forge...\").bold().cyan()",
          "    );",
          "",
          "    // Check if already initialized",
          "    let config = Config::load_or_default().await?;",
          "    if config.is_initialized() && !force {",
          "        println!(",
          "            \"{}\","
        ],
        "imports": [
          "use crate::{config::Config, Result};",
          "use console::style;",
          "        use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 13: Control flow statement",
          "Line 15: Control flow statement",
          "Line 117: Control flow statement",
          "Line 119: Control flow statement"
        ],
        "dependencies": [
          "use crate::{config::Config, Result};",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 14: Error handling point",
          "Line 26: Error handling point",
          "Line 30: Error handling point",
          "Line 34: Error handling point",
          "Line 38: Error handling point",
          "Line 43: Error handling point",
          "Line 65: Error handling point",
          "Line 68: Error handling point",
          "Line 73: Error handling point",
          "Line 79: Error handling point",
          "Line 81: Error handling point",
          "Line 90: Error handling point",
          "Line 94: Error handling point",
          "Line 102: Error handling point",
          "Line 118: Error handling point",
          "Line 121: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/rust.rs",
        "line": 9,
        "message": "Function has 135 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_check",
        "function_signature": "pub async fn handle_check(verbose: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Rust version management commands",
          "",
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "",
          "/// Handle rust version check command",
          "pub async fn handle_check(verbose: bool) -> Result<()> {",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()",
          "            .template(\"{spinner:.green} {msg}\")",
          "            .unwrap_or_else(|_| ProgressStyle::default_spinner()),",
          "    );",
          "    spinner.set_message(\"Checking Rust version...\");",
          "    spinner.enable_steady_tick(std::time::Duration::from_millis(100));",
          "",
          "    let manager = VersionManager::new()?;"
        ],
        "imports": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 45: Control flow statement",
          "Line 66: Control flow statement",
          "Line 83: Control flow statement",
          "Line 124: Control flow statement",
          "Line 166: Control flow statement",
          "Line 176: Control flow statement",
          "Line 249: Control flow statement",
          "Line 255: Control flow statement",
          "Line 271: Control flow statement",
          "Line 276: Control flow statement",
          "Line 277: Control flow statement"
        ],
        "dependencies": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 19: Error handling point",
          "Line 22: Error handling point",
          "Line 80: Error handling point",
          "Line 154: Error handling point",
          "Line 155: Error handling point",
          "Line 156: Error handling point",
          "Line 242: Error handling point",
          "Line 243: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/rust.rs",
        "line": 144,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_recommend",
        "function_signature": "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                style(\"rustup update stable\").cyan()",
          "            );",
          "        }",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle rust version recommend command",
          "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()",
          "            .template(\"{spinner:.green} {msg}\")",
          "            .unwrap_or_else(|_| ProgressStyle::default_spinner()),",
          "    );",
          "    spinner.set_message(\"Analyzing Rust versions...\");",
          "    spinner.enable_steady_tick(std::time::Duration::from_millis(100));",
          "",
          "    let manager = VersionManager::new()?;"
        ],
        "imports": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 45: Control flow statement",
          "Line 66: Control flow statement",
          "Line 83: Control flow statement",
          "Line 124: Control flow statement",
          "Line 166: Control flow statement",
          "Line 176: Control flow statement",
          "Line 249: Control flow statement",
          "Line 255: Control flow statement",
          "Line 271: Control flow statement",
          "Line 276: Control flow statement",
          "Line 277: Control flow statement"
        ],
        "dependencies": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 19: Error handling point",
          "Line 22: Error handling point",
          "Line 80: Error handling point",
          "Line 154: Error handling point",
          "Line 155: Error handling point",
          "Line 156: Error handling point",
          "Line 242: Error handling point",
          "Line 243: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/rust.rs",
        "line": 144,
        "message": "Function has 88 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_recommend",
        "function_signature": "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                style(\"rustup update stable\").cyan()",
          "            );",
          "        }",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle rust version recommend command",
          "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()",
          "            .template(\"{spinner:.green} {msg}\")",
          "            .unwrap_or_else(|_| ProgressStyle::default_spinner()),",
          "    );",
          "    spinner.set_message(\"Analyzing Rust versions...\");",
          "    spinner.enable_steady_tick(std::time::Duration::from_millis(100));",
          "",
          "    let manager = VersionManager::new()?;"
        ],
        "imports": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 45: Control flow statement",
          "Line 66: Control flow statement",
          "Line 83: Control flow statement",
          "Line 124: Control flow statement",
          "Line 166: Control flow statement",
          "Line 176: Control flow statement",
          "Line 249: Control flow statement",
          "Line 255: Control flow statement",
          "Line 271: Control flow statement",
          "Line 276: Control flow statement",
          "Line 277: Control flow statement"
        ],
        "dependencies": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 19: Error handling point",
          "Line 22: Error handling point",
          "Line 80: Error handling point",
          "Line 154: Error handling point",
          "Line 155: Error handling point",
          "Line 156: Error handling point",
          "Line 242: Error handling point",
          "Line 243: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/rust.rs",
        "line": 231,
        "message": "Function has 59 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_recommend",
        "function_signature": "pub async fn handle_recommend(stable_only: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    println!(\"  • Test your projects after updating\");",
          "    println!(",
          "        \"  • Use {} for production code\",",
          "        style(\"stable channel\").green()",
          "    );",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle rust version list command",
          "pub async fn handle_list(count: usize) -> Result<()> {",
          "    let spinner = ProgressBar::new_spinner();",
          "    spinner.set_style(",
          "        ProgressStyle::default_spinner()",
          "            .template(\"{spinner:.green} {msg}\")",
          "            .unwrap_or_else(|_| ProgressStyle::default_spinner()),",
          "    );",
          "    spinner.set_message(\"Fetching Rust releases...\");",
          "    spinner.enable_steady_tick(std::time::Duration::from_millis(100));",
          ""
        ],
        "imports": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 45: Control flow statement",
          "Line 66: Control flow statement",
          "Line 83: Control flow statement",
          "Line 124: Control flow statement",
          "Line 166: Control flow statement",
          "Line 176: Control flow statement",
          "Line 249: Control flow statement",
          "Line 255: Control flow statement",
          "Line 271: Control flow statement",
          "Line 276: Control flow statement",
          "Line 277: Control flow statement"
        ],
        "dependencies": [
          "use crate::rust_version::{UpdateRecommendation, VersionManager};",
          "use crate::{Error, Result};",
          "use console::style;",
          "use indicatif::{ProgressBar, ProgressStyle};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 19: Error handling point",
          "Line 22: Error handling point",
          "Line 80: Error handling point",
          "Line 154: Error handling point",
          "Line 155: Error handling point",
          "Line 156: Error handling point",
          "Line 242: Error handling point",
          "Line 243: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/safety.rs",
        "line": 10,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_install",
        "function_signature": "pub async fn handle_install(force: bool, project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Safety pipeline CLI commands",
          "",
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "",
          "/// Handle safety install command",
          "pub async fn handle_install(force: bool, project_path: &Path) -> Result<()> {",
          "    println!(\"🔧 Installing Ferrous Forge Safety Pipeline Git Hooks\");",
          "    println!(\"{}\", \"=\".repeat(50));",
          "",
          "    // Check if it's a git repository",
          "    let git_dir = project_path.join(\".git\");",
          "    if !git_dir.exists() {",
          "        return Err(crate::error::Error::Config(",
          "            \"Not a git repository. Run 'git init' first.\".to_string(),",
          "        ));",
          "    }"
        ],
        "imports": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "            use std::os::unix::fs::PermissionsExt;",
          "            use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 14: Control flow statement",
          "Line 16: Control flow statement",
          "Line 29: Control flow statement",
          "Line 38: Control flow statement",
          "Line 61: Control flow statement",
          "Line 70: Control flow statement",
          "Line 109: Control flow statement",
          "Line 115: Control flow statement",
          "Line 140: Control flow statement",
          "Line 141: Control flow statement",
          "Line 144: Control flow statement",
          "Line 147: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 171: Control flow statement",
          "Line 182: Control flow statement",
          "Line 184: Control flow statement",
          "Line 195: Control flow statement",
          "Line 197: Control flow statement",
          "Line 205: Control flow statement",
          "Line 213: Control flow statement"
        ],
        "dependencies": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 38: Error handling point",
          "Line 46: Error handling point",
          "Line 50: Error handling point",
          "Line 52: Error handling point",
          "Line 70: Error handling point",
          "Line 78: Error handling point",
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 101: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/safety.rs",
        "line": 10,
        "message": "Function has 90 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_install",
        "function_signature": "pub async fn handle_install(force: bool, project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Safety pipeline CLI commands",
          "",
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "",
          "/// Handle safety install command",
          "pub async fn handle_install(force: bool, project_path: &Path) -> Result<()> {",
          "    println!(\"🔧 Installing Ferrous Forge Safety Pipeline Git Hooks\");",
          "    println!(\"{}\", \"=\".repeat(50));",
          "",
          "    // Check if it's a git repository",
          "    let git_dir = project_path.join(\".git\");",
          "    if !git_dir.exists() {",
          "        return Err(crate::error::Error::Config(",
          "            \"Not a git repository. Run 'git init' first.\".to_string(),",
          "        ));",
          "    }"
        ],
        "imports": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "            use std::os::unix::fs::PermissionsExt;",
          "            use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 14: Control flow statement",
          "Line 16: Control flow statement",
          "Line 29: Control flow statement",
          "Line 38: Control flow statement",
          "Line 61: Control flow statement",
          "Line 70: Control flow statement",
          "Line 109: Control flow statement",
          "Line 115: Control flow statement",
          "Line 140: Control flow statement",
          "Line 141: Control flow statement",
          "Line 144: Control flow statement",
          "Line 147: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 171: Control flow statement",
          "Line 182: Control flow statement",
          "Line 184: Control flow statement",
          "Line 195: Control flow statement",
          "Line 197: Control flow statement",
          "Line 205: Control flow statement",
          "Line 213: Control flow statement"
        ],
        "dependencies": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 38: Error handling point",
          "Line 46: Error handling point",
          "Line 50: Error handling point",
          "Line 52: Error handling point",
          "Line 70: Error handling point",
          "Line 78: Error handling point",
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 101: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/safety.rs",
        "line": 100,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_check",
        "function_signature": "pub async fn handle_check(stage_str: &str, project_path: &Path, verbose: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    println!(\"   1. The pre-commit hook will run before each commit\");",
          "    println!(\"   2. The pre-push hook will run before each push\");",
          "    println!(\"   3. To bypass temporarily: git commit --no-verify\");",
          "    println!(\"   4. To uninstall: Remove .git/hooks/pre-commit and pre-push\");",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle safety check command",
          "pub async fn handle_check(stage_str: &str, project_path: &Path, verbose: bool) -> Result<()> {",
          "    let stage = stage_str.parse::<PipelineStage>()?;",
          "",
          "    println!(\"🧪 Testing Safety Pipeline - {}\", stage.display_name());",
          "    println!(\"{}\", \"=\".repeat(50));",
          "",
          "    let pipeline = SafetyPipeline::new(project_path).await?;",
          "    let report = pipeline.run_checks(stage).await?;",
          "",
          "    if verbose {",
          "        report.print_detailed();"
        ],
        "imports": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "            use std::os::unix::fs::PermissionsExt;",
          "            use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 14: Control flow statement",
          "Line 16: Control flow statement",
          "Line 29: Control flow statement",
          "Line 38: Control flow statement",
          "Line 61: Control flow statement",
          "Line 70: Control flow statement",
          "Line 109: Control flow statement",
          "Line 115: Control flow statement",
          "Line 140: Control flow statement",
          "Line 141: Control flow statement",
          "Line 144: Control flow statement",
          "Line 147: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 171: Control flow statement",
          "Line 182: Control flow statement",
          "Line 184: Control flow statement",
          "Line 195: Control flow statement",
          "Line 197: Control flow statement",
          "Line 205: Control flow statement",
          "Line 213: Control flow statement"
        ],
        "dependencies": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 38: Error handling point",
          "Line 46: Error handling point",
          "Line 50: Error handling point",
          "Line 52: Error handling point",
          "Line 70: Error handling point",
          "Line 78: Error handling point",
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 101: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/safety.rs",
        "line": 136,
        "message": "Function has 91 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "handle_status",
        "function_signature": "pub async fn handle_status() -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                .green()",
          "                .bold()",
          "        );",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Handle safety status command",
          "pub async fn handle_status() -> Result<()> {",
          "    println!(\"🛡️  Ferrous Forge Safety Pipeline Status\");",
          "    println!(\"{}\", \"=\".repeat(40));",
          "",
          "    // Check if safety is configured",
          "    match crate::safety::SafetyConfig::load().await {",
          "        Ok(config) => {",
          "            println!(\"✅ Safety configuration: Found\");",
          "            println!(\"   Enabled: {}\", if config.enabled { \"Yes\" } else { \"No\" });",
          "            println!(",
          "                \"   Strict mode: {}\","
        ],
        "imports": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "            use std::os::unix::fs::PermissionsExt;",
          "            use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 14: Control flow statement",
          "Line 16: Control flow statement",
          "Line 29: Control flow statement",
          "Line 38: Control flow statement",
          "Line 61: Control flow statement",
          "Line 70: Control flow statement",
          "Line 109: Control flow statement",
          "Line 115: Control flow statement",
          "Line 140: Control flow statement",
          "Line 141: Control flow statement",
          "Line 144: Control flow statement",
          "Line 147: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 171: Control flow statement",
          "Line 182: Control flow statement",
          "Line 184: Control flow statement",
          "Line 195: Control flow statement",
          "Line 197: Control flow statement",
          "Line 205: Control flow statement",
          "Line 213: Control flow statement"
        ],
        "dependencies": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 38: Error handling point",
          "Line 46: Error handling point",
          "Line 50: Error handling point",
          "Line 52: Error handling point",
          "Line 70: Error handling point",
          "Line 78: Error handling point",
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 101: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/safety.rs",
        "line": 227,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_individual_checks",
        "function_signature": "pub async fn test_individual_checks(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        );",
          "    } else {",
          "        println!(\"\\n🪝 Git Hooks: Not a git repository\");",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Test individual safety checks",
          "pub async fn test_individual_checks(project_path: &Path) -> Result<()> {",
          "    crate::safety::checks::test_runner::test_safety_checks(project_path).await",
          "}"
        ],
        "imports": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "use std::fs;",
          "use std::path::Path;",
          "            use std::os::unix::fs::PermissionsExt;",
          "            use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 14: Control flow statement",
          "Line 16: Control flow statement",
          "Line 29: Control flow statement",
          "Line 38: Control flow statement",
          "Line 61: Control flow statement",
          "Line 70: Control flow statement",
          "Line 109: Control flow statement",
          "Line 115: Control flow statement",
          "Line 140: Control flow statement",
          "Line 141: Control flow statement",
          "Line 144: Control flow statement",
          "Line 147: Control flow statement",
          "Line 153: Control flow statement",
          "Line 162: Control flow statement",
          "Line 171: Control flow statement",
          "Line 182: Control flow statement",
          "Line 184: Control flow statement",
          "Line 195: Control flow statement",
          "Line 197: Control flow statement",
          "Line 205: Control flow statement",
          "Line 213: Control flow statement"
        ],
        "dependencies": [
          "use crate::safety::{PipelineStage, SafetyPipeline};",
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 23: Error handling point",
          "Line 38: Error handling point",
          "Line 46: Error handling point",
          "Line 50: Error handling point",
          "Line 52: Error handling point",
          "Line 70: Error handling point",
          "Line 78: Error handling point",
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 101: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/uninstall.rs",
        "line": 8,
        "message": "Function has 54 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "execute",
        "function_signature": "pub async fn execute(confirm: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Uninstall command implementation",
          "",
          "use crate::{Error, Result};",
          "use console::style;",
          "use std::io::{self, Write};",
          "",
          "/// Execute the uninstall command",
          "pub async fn execute(confirm: bool) -> Result<()> {",
          "    if !confirm {",
          "        print!(",
          "            \"Are you sure you want to uninstall Ferrous Forge? \\",
          "            This will remove all system integration. [y/N]: \"",
          "        );",
          "        io::stdout()",
          "            .flush()",
          "            .map_err(|e| Error::process(format!(\"Failed to flush stdout: {}\", e)))?;",
          "",
          "        let mut input = String::new();"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use console::style;",
          "use std::io::{self, Write};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 9: Control flow statement",
          "Line 23: Control flow statement",
          "Line 67: Control flow statement",
          "Line 80: Control flow statement",
          "Line 94: Control flow statement",
          "Line 95: Control flow statement",
          "Line 96: Control flow statement",
          "Line 111: Control flow statement",
          "Line 125: Control flow statement",
          "Line 130: Control flow statement",
          "Line 136: Control flow statement",
          "Line 144: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 11: Error handling point",
          "Line 16: Error handling point",
          "Line 21: Error handling point",
          "Line 35: Error handling point",
          "Line 38: Error handling point",
          "Line 41: Error handling point",
          "Line 44: Error handling point",
          "Line 64: Error handling point",
          "Line 68: Error handling point",
          "Line 77: Error handling point",
          "Line 81: Error handling point",
          "Line 90: Error handling point",
          "Line 99: Error handling point",
          "Line 110: Error handling point",
          "Line 112: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/update.rs",
        "line": 7,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "execute",
        "function_signature": "pub async fn execute(channel: String, rules_only: bool, dry_run: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Update command implementation",
          "",
          "use crate::Result;",
          "use console::style;",
          "",
          "/// Execute the update command",
          "pub async fn execute(channel: String, rules_only: bool, dry_run: bool) -> Result<()> {",
          "    if dry_run {",
          "        println!(",
          "            \"{}\",",
          "            style(\"🔍 Dry run mode - showing what would be updated\")",
          "                .bold()",
          "                .yellow()",
          "        );",
          "    } else {",
          "        println!(\"{}\", style(\"🔄 Updating Ferrous Forge...\").bold().cyan());",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use console::style;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 8: Control flow statement",
          "Line 19: Control flow statement",
          "Line 26: Control flow statement",
          "Line 36: Control flow statement",
          "Line 52: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 20: Error handling point",
          "Line 22: Error handling point",
          "Line 23: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/update.rs",
        "line": 33,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "update_binary",
        "function_signature": "async fn update_binary(channel: &str, dry_run: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "",
          "    if !dry_run {",
          "        println!(\"{}\", style(\"✅ Update complete!\").bold().green());",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "async fn update_binary(channel: &str, dry_run: bool) -> Result<()> {",
          "    println!(\"📦 Checking for binary updates on {} channel...\", channel);",
          "",
          "    if dry_run {",
          "        println!(\"  Would check GitHub releases for newer version\");",
          "        println!(\"  Would download and install new binary\");",
          "        return Ok(());",
          "    }",
          "",
          "    // TODO: Implement actual update logic using self_update crate",
          "    println!(\"  ⚠️  Binary updates not yet implemented\");"
        ],
        "imports": [
          "use crate::Result;",
          "use console::style;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 8: Control flow statement",
          "Line 19: Control flow statement",
          "Line 26: Control flow statement",
          "Line 36: Control flow statement",
          "Line 52: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 20: Error handling point",
          "Line 22: Error handling point",
          "Line 23: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/update.rs",
        "line": 49,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "update_rules",
        "function_signature": "async fn update_rules(channel: &str, dry_run: bool) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "",
          "    // TODO: Implement actual update logic using self_update crate",
          "    println!(\"  ⚠️  Binary updates not yet implemented\");",
          "    println!(\"  Please update manually: cargo install ferrous-forge\");",
          "",
          "    Ok(())",
          "}",
          "",
          "async fn update_rules(channel: &str, dry_run: bool) -> Result<()> {",
          "    println!(\"📋 Checking for rules updates on {} channel...\", channel);",
          "",
          "    if dry_run {",
          "        println!(\"  Would fetch latest clippy rules from repository\");",
          "        println!(\"  Would update ~/.clippy.toml with new rules\");",
          "        return Ok(());",
          "    }",
          "",
          "    // TODO: Implement rules update from remote repository",
          "    println!(\"  ⚠️  Rules updates not yet implemented\");"
        ],
        "imports": [
          "use crate::Result;",
          "use console::style;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 8: Control flow statement",
          "Line 19: Control flow statement",
          "Line 26: Control flow statement",
          "Line 36: Control flow statement",
          "Line 52: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use console::style;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 20: Error handling point",
          "Line 22: Error handling point",
          "Line 23: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 446,
        "message": "File has 447 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_markdown_report",
        "function_signature": "fn generate_markdown_report(report: &AIReport) -> String {",
        "return_type": "String {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "// Simple count for now - would need recursive implementation for full accuracy",
        "surrounding_code": [
          "            instruction.violation_type, instruction.count",
          "        ));",
          "        md.push_str(&format!(\"**Strategy**: {}\\n\\n\", instruction.fix_strategy));",
          "        md.push_str(&format!(",
          "            \"**Example**: \\n```rust\\n{}\\n```\\n\\n\",",
          "            instruction.example_fix",
          "        ));",
          "    }",
          "",
          "    md",
          "}"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 62,
        "message": "Function has 121 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "execute",
        "function_signature": "pub async fn execute(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "struct FixInstruction {",
          "    violation_type: String,",
          "    count: usize,",
          "    fix_strategy: String,",
          "    example_fix: String,",
          "    effort_level: String,",
          "}",
          "",
          "/// Execute the validate command",
          "pub async fn execute(",
          "    path: Option<PathBuf>,",
          "    ai_report: bool,",
          "    _compare_previous: bool,",
          ") -> Result<()> {",
          "    let project_path = path.unwrap_or_else(|| std::env::current_dir().unwrap_or_default());",
          "",
          "    println!(",
          "        \"{}\",",
          "        style(\"🦀 Running Ferrous Forge validation...\")",
          "            .bold()"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 183,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_ai_report",
        "function_signature": "async fn generate_ai_report(project_path: &PathBuf, violations: &[Violation]) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                .bold()",
          "                .green()",
          "        );",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Generate AI-friendly compliance report",
          "async fn generate_ai_report(project_path: &PathBuf, violations: &[Violation]) -> Result<()> {",
          "    use chrono::Utc;",
          "",
          "    // Create reports directory",
          "    let reports_dir = project_path.join(\".ferrous-forge\").join(\"reports\");",
          "    fs::create_dir_all(&reports_dir).await?;",
          "",
          "    // Generate timestamp",
          "    let timestamp = Utc::now();",
          "    let timestamp_str = timestamp.format(\"%Y%m%d_%H%M%S\").to_string();",
          ""
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 220,
        "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_ai_report",
        "function_signature": "async fn generate_ai_report(project_path: &PathBuf, violations: &[Violation]) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            crate::validation::ViolationType::UnderscoreBandaid => {",
          "                if violation.message.contains(\"parameter\") {",
          "                    (",
          "                        \"Remove unused parameter or implement missing functionality\".to_string(),",
          "                        false,",
          "                        2,",
          "                    )",
          "                } else {",
          "                    (",
          "                        \"Replace `let _ =` with proper error handling using `?`\".to_string(),",
          "                        true,",
          "                        1,",
          "                    )",
          "                }",
          "            }",
          "            crate::validation::ViolationType::UnwrapInProduction => (",
          "                \"Replace `.unwrap()` with `?` or proper error handling\".to_string(),",
          "                true,",
          "                1,",
          "            ),"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [
          "Line 220: Variable '_' used"
        ],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 227,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_ai_report",
        "function_signature": "async fn generate_ai_report(project_path: &PathBuf, violations: &[Violation]) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                } else {",
          "                    (",
          "                        \"Replace `let _ =` with proper error handling using `?`\".to_string(),",
          "                        true,",
          "                        1,",
          "                    )",
          "                }",
          "            }",
          "            crate::validation::ViolationType::UnwrapInProduction => (",
          "                \"Replace `.unwrap()` with `?` or proper error handling\".to_string(),",
          "                true,",
          "                1,",
          "            ),",
          "            crate::validation::ViolationType::FileTooLarge => (",
          "                \"Split file into smaller modules following single responsibility principle\"",
          "                    .to_string(),",
          "                false,",
          "                4,",
          "            ),",
          "            crate::validation::ViolationType::FunctionTooLarge => ("
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Replace ? with ? operator",
      "side_effects": [],
      "confidence_score": 0.65
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 270,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "process",
        "function_signature": "\"// Before: fn process(_unused: String, data: Data)\\n\\",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    // Generate fix instructions",
          "    let mut fix_instructions = Vec::new();",
          "    for (vtype, count) in violation_counts {",
          "        let (strategy, example, effort) = match vtype.as_str() {",
          "            \"UnderscoreBandaid\" => (",
          "                \"1. Identify what functionality the parameter should provide\\n\\",
          "                2. Either implement the functionality or remove the parameter\\n\\",
          "                3. Update function signature and callers\"",
          "                    .to_string(),",
          "                \"// Before: fn process(_unused: String, data: Data)\\n\\",
          "                // After: fn process(data: Data) or implement the unused parameter\"",
          "                    .to_string(),",
          "                \"Moderate\".to_string(),",
          "            ),",
          "            \"UnwrapInProduction\" => (",
          "                \"1. Change function to return Result<T, Error>\\n\\",
          "                2. Replace ? with ?\\n3. Handle errors at call sites\"",
          "                    .to_string(),",
          "                \"// Before: value.unwrap()\\n// After: value?\".to_string(),",
          "                \"Easy\".to_string(),"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 279,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "process",
        "function_signature": "\"// Before: fn process(_unused: String, data: Data)\\n\\",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                \"// Before: fn process(_unused: String, data: Data)\\n\\",
          "                // After: fn process(data: Data) or implement the unused parameter\"",
          "                    .to_string(),",
          "                \"Moderate\".to_string(),",
          "            ),",
          "            \"UnwrapInProduction\" => (",
          "                \"1. Change function to return Result<T, Error>\\n\\",
          "                2. Replace ? with ?\\n3. Handle errors at call sites\"",
          "                    .to_string(),",
          "                \"// Before: value.unwrap()\\n// After: value?\".to_string(),",
          "                \"Easy\".to_string(),",
          "            ),",
          "            \"FileTooLarge\" => (",
          "                \"1. Identify logical boundaries in the file\\n\\",
          "                2. Create new module directory\\n3. Split into focused modules\\n\\",
          "                4. Update imports\"",
          "                    .to_string(),",
          "                \"// Split validation.rs into validation/mod.rs, \\",
          "                validation/core.rs, validation/types.rs\"",
          "                    .to_string(),"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 183,
        "message": "Function has 188 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_ai_report",
        "function_signature": "async fn generate_ai_report(project_path: &PathBuf, violations: &[Violation]) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                .bold()",
          "                .green()",
          "        );",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Generate AI-friendly compliance report",
          "async fn generate_ai_report(project_path: &PathBuf, violations: &[Violation]) -> Result<()> {",
          "    use chrono::Utc;",
          "",
          "    // Create reports directory",
          "    let reports_dir = project_path.join(\".ferrous-forge\").join(\"reports\");",
          "    fs::create_dir_all(&reports_dir).await?;",
          "",
          "    // Generate timestamp",
          "    let timestamp = Utc::now();",
          "    let timestamp_str = timestamp.format(\"%Y%m%d_%H%M%S\").to_string();",
          ""
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 371,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "get_code_snippet",
        "function_signature": "async fn get_code_snippet(file_path: &PathBuf, line: usize) -> Result<String> {",
        "return_type": "Result<String> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    println!(\"  🔗 Latest JSON: {}\", latest_json.display());",
          "    println!(\"  🔗 Latest MD: {}\", latest_md.display());",
          "    println!(\"\\n🤖 This report is optimized for AI assistant consumption\");",
          "    println!(\"   Use the JSON file for automated processing and fix suggestions\");",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Get code snippet around a violation",
          "async fn get_code_snippet(file_path: &PathBuf, line: usize) -> Result<String> {",
          "    if !file_path.exists() {",
          "        return Ok(\"File not found\".to_string());",
          "    }",
          "",
          "    let contents = fs::read_to_string(file_path).await?;",
          "    let lines: Vec<&str> = contents.lines().collect();",
          "",
          "    if line < lines.len() {",
          "        Ok(lines[line].to_string())",
          "    } else {"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/commands/validate.rs",
        "line": 387,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "count_rust_files",
        "function_signature": "async fn count_rust_files(project_path: &PathBuf) -> Result<usize> {",
        "return_type": "Result<usize> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    if line < lines.len() {",
          "        Ok(lines[line].to_string())",
          "    } else {",
          "        Ok(\"Line not found\".to_string())",
          "    }",
          "}",
          "",
          "/// Count Rust files in project",
          "async fn count_rust_files(project_path: &PathBuf) -> Result<usize> {",
          "    let mut count = 0;",
          "",
          "    // Simple count for now - would need recursive implementation for full accuracy",
          "    let mut entries = fs::read_dir(project_path).await?;",
          "    while let Some(entry) = entries.next_entry().await? {",
          "        if let Some(ext) = entry.path().extension() {",
          "            if ext == \"rs\" {",
          "                count += 1;",
          "            }",
          "        }"
        ],
        "imports": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use chrono::Utc;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 103: Control flow statement",
          "Line 118: Control flow statement",
          "Line 121: Control flow statement",
          "Line 139: Control flow statement",
          "Line 154: Control flow statement",
          "Line 166: Control flow statement",
          "Line 167: Control flow statement",
          "Line 210: Control flow statement",
          "Line 212: Control flow statement",
          "Line 264: Control flow statement",
          "Line 312: Control flow statement",
          "Line 372: Control flow statement",
          "Line 379: Control flow statement",
          "Line 392: Control flow statement",
          "Line 393: Control flow statement",
          "Line 394: Control flow statement"
        ],
        "dependencies": [
          "use crate::{",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use chrono::Utc;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 79: Error handling point",
          "Line 82: Error handling point",
          "Line 91: Error handling point",
          "Line 101: Error handling point",
          "Line 188: Error handling point",
          "Line 198: Error handling point",
          "Line 220: Error handling point",
          "Line 227: Error handling point",
          "Line 250: Error handling point",
          "Line 277: Error handling point",
          "Line 279: Error handling point",
          "Line 305: Error handling point",
          "Line 345: Error handling point",
          "Line 346: Error handling point",
          "Line 351: Error handling point",
          "Line 356: Error handling point",
          "Line 357: Error handling point",
          "Line 376: Error handling point",
          "Line 391: Error handling point",
          "Line 392: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/config.rs",
        "line": 462,
        "message": "File has 463 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_config_get_set_roundtrip",
        "function_signature": "fn test_config_get_set_roundtrip(",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for Config {",
        "surrounding_code": [
          "                prop_assert!(config.set(\"max_file_lines\", &max_file_lines.to_string()).is_ok());",
          "                prop_assert_eq!(config.get(\"max_file_lines\"), Some(max_file_lines.to_string()));",
          "",
          "                prop_assert!(config.set(\"max_function_lines\", ",
          "                    &max_function_lines.to_string()).is_ok());",
          "                prop_assert_eq!(config.get(\"max_function_lines\"), ",
          "                    Some(max_function_lines.to_string()));",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "    use super::*;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 40: Control flow statement",
          "Line 74: Control flow statement",
          "Line 76: Control flow statement",
          "Line 100: Control flow statement",
          "Line 143: Control flow statement",
          "Line 155: Control flow statement",
          "Line 169: Control flow statement",
          "Line 171: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 84: Error handling point",
          "Line 87: Error handling point",
          "Line 90: Error handling point",
          "Line 97: Error handling point",
          "Line 101: Error handling point",
          "Line 105: Error handling point",
          "Line 109: Error handling point",
          "Line 117: Error handling point",
          "Line 125: Error handling point",
          "Line 132: Error handling point",
          "Line 133: Error handling point",
          "Line 136: Error handling point",
          "Line 137: Error handling point",
          "Line 138: Error handling point",
          "Line 181: Error handling point",
          "Line 186: Error handling point",
          "Line 191: Error handling point",
          "Line 196: Error handling point",
          "Line 201: Error handling point",
          "Line 206: Error handling point",
          "Line 418: Error handling point",
          "Line 427: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/doc_coverage.rs",
        "line": 27,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "meets_threshold",
        "function_signature": "pub fn meets_threshold(&self, min_coverage: f32) -> bool {",
        "return_type": "bool {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    pub documented_items: usize,",
          "    /// Coverage percentage",
          "    pub coverage_percent: f32,",
          "    /// List of items missing documentation",
          "    pub missing: Vec<String>,",
          "}",
          "",
          "impl DocCoverage {",
          "    /// Check if coverage meets minimum threshold",
          "    pub fn meets_threshold(&self, min_coverage: f32) -> bool {",
          "        self.coverage_percent >= min_coverage",
          "    }",
          "",
          "    /// Generate a human-readable report",
          "    pub fn report(&self) -> String {",
          "        let mut report = String::new();",
          "",
          "        if self.coverage_percent >= 100.0 {",
          "            report.push_str(\"✅ Documentation coverage: 100% - All items documented!\\n\");",
          "        } else if self.coverage_percent >= 80.0 {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 49: Control flow statement",
          "Line 54: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 91: Control flow statement",
          "Line 110: Control flow statement",
          "Line 158: Control flow statement",
          "Line 161: Control flow statement",
          "Line 162: Control flow statement",
          "Line 179: Control flow statement",
          "Line 180: Control flow statement",
          "Line 186: Control flow statement",
          "Line 195: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 78: Error handling point",
          "Line 101: Error handling point",
          "Line 108: Error handling point",
          "Line 139: Error handling point",
          "Line 140: Error handling point",
          "Line 155: Error handling point",
          "Line 253: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/doc_coverage.rs",
        "line": 67,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_documentation_coverage",
        "function_signature": "pub async fn check_documentation_coverage(project_path: &Path) -> Result<DocCoverage> {",
        "return_type": "Result<DocCoverage> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                ));",
          "            }",
          "        }",
          "",
          "        report",
          "    }",
          "}",
          "",
          "/// Check documentation coverage for a Rust project",
          "pub async fn check_documentation_coverage(project_path: &Path) -> Result<DocCoverage> {",
          "    // Run cargo doc with JSON output to get warnings",
          "    let output = Command::new(\"cargo\")",
          "        .args(&[",
          "            \"doc\",",
          "            \"--no-deps\",",
          "            \"--document-private-items\",",
          "            \"--message-format=json\",",
          "        ])",
          "        .current_dir(project_path)",
          "        .output()"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 49: Control flow statement",
          "Line 54: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 91: Control flow statement",
          "Line 110: Control flow statement",
          "Line 158: Control flow statement",
          "Line 161: Control flow statement",
          "Line 162: Control flow statement",
          "Line 179: Control flow statement",
          "Line 180: Control flow statement",
          "Line 186: Control flow statement",
          "Line 195: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 78: Error handling point",
          "Line 101: Error handling point",
          "Line 108: Error handling point",
          "Line 139: Error handling point",
          "Line 140: Error handling point",
          "Line 155: Error handling point",
          "Line 253: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/doc_coverage.rs",
        "line": 67,
        "message": "Function has 58 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_documentation_coverage",
        "function_signature": "pub async fn check_documentation_coverage(project_path: &Path) -> Result<DocCoverage> {",
        "return_type": "Result<DocCoverage> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                ));",
          "            }",
          "        }",
          "",
          "        report",
          "    }",
          "}",
          "",
          "/// Check documentation coverage for a Rust project",
          "pub async fn check_documentation_coverage(project_path: &Path) -> Result<DocCoverage> {",
          "    // Run cargo doc with JSON output to get warnings",
          "    let output = Command::new(\"cargo\")",
          "        .args(&[",
          "            \"doc\",",
          "            \"--no-deps\",",
          "            \"--document-private-items\",",
          "            \"--message-format=json\",",
          "        ])",
          "        .current_dir(project_path)",
          "        .output()"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 49: Control flow statement",
          "Line 54: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 91: Control flow statement",
          "Line 110: Control flow statement",
          "Line 158: Control flow statement",
          "Line 161: Control flow statement",
          "Line 162: Control flow statement",
          "Line 179: Control flow statement",
          "Line 180: Control flow statement",
          "Line 186: Control flow statement",
          "Line 195: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 78: Error handling point",
          "Line 101: Error handling point",
          "Line 108: Error handling point",
          "Line 139: Error handling point",
          "Line 140: Error handling point",
          "Line 155: Error handling point",
          "Line 253: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/doc_coverage.rs",
        "line": 125,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "count_documentation_items",
        "function_signature": "async fn count_documentation_items(project_path: &Path) -> Result<(usize, usize)> {",
        "return_type": "Result<(usize, usize)> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    Ok(DocCoverage {",
          "        total_items: total,",
          "        documented_items: documented,",
          "        coverage_percent,",
          "        missing,",
          "    })",
          "}",
          "",
          "/// Count documentation items in the project",
          "async fn count_documentation_items(project_path: &Path) -> Result<(usize, usize)> {",
          "    let mut total = 0;",
          "    let mut documented = 0;",
          "",
          "    // Walk through all Rust files",
          "    let walker = walkdir::WalkDir::new(project_path)",
          "        .into_iter()",
          "        .filter_map(|e| e.ok())",
          "        .filter(|e| {",
          "            e.path().extension().is_some_and(|ext| ext == \"rs\")",
          "                && !e.path().to_string_lossy().contains(\"target\")"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 49: Control flow statement",
          "Line 54: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 91: Control flow statement",
          "Line 110: Control flow statement",
          "Line 158: Control flow statement",
          "Line 161: Control flow statement",
          "Line 162: Control flow statement",
          "Line 179: Control flow statement",
          "Line 180: Control flow statement",
          "Line 186: Control flow statement",
          "Line 195: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 78: Error handling point",
          "Line 101: Error handling point",
          "Line 108: Error handling point",
          "Line 139: Error handling point",
          "Line 140: Error handling point",
          "Line 155: Error handling point",
          "Line 253: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/doc_coverage.rs",
        "line": 194,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "suggest_documentation",
        "function_signature": "pub fn suggest_documentation(item_type: &str, item_name: &str) -> String {",
        "return_type": "String {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    // Fallback: extract type after \"for\"",
          "    if let Some(pos) = message.find(\"for \") {",
          "        Some(message[pos + 4..].trim().to_string())",
          "    } else {",
          "        None",
          "    }",
          "}",
          "",
          "/// Suggest documentation for missing items",
          "pub fn suggest_documentation(item_type: &str, item_name: &str) -> String {",
          "    match item_type {",
          "        \"fn\" | \"function\" => format!(",
          "            \"/// TODO: Document function `{}`.\\n\\",
          "             ///\\n\\",
          "             /// # Arguments\\n\\",
          "             ///\\n\\",
          "             /// # Returns\\n\\",
          "             ///\\n\\",
          "             /// # Examples\\n\\",
          "             /// ```\\n\\"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 49: Control flow statement",
          "Line 54: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 89: Control flow statement",
          "Line 91: Control flow statement",
          "Line 110: Control flow statement",
          "Line 158: Control flow statement",
          "Line 161: Control flow statement",
          "Line 162: Control flow statement",
          "Line 179: Control flow statement",
          "Line 180: Control flow statement",
          "Line 186: Control flow statement",
          "Line 195: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 78: Error handling point",
          "Line 101: Error handling point",
          "Line 108: Error handling point",
          "Line 139: Error handling point",
          "Line 140: Error handling point",
          "Line 155: Error handling point",
          "Line 253: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/analyzer.rs",
        "line": 17,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(project_path: impl AsRef<Path>) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "use super::Edition;",
          "",
          "/// Edition analyzer for checking compatibility",
          "pub struct EditionAnalyzer {",
          "    project_path: std::path::PathBuf,",
          "}",
          "",
          "impl EditionAnalyzer {",
          "    /// Create a new edition analyzer",
          "    pub fn new(project_path: impl AsRef<Path>) -> Self {",
          "        Self {",
          "            project_path: project_path.as_ref().to_path_buf(),",
          "        }",
          "    }",
          "",
          "    /// Analyze the project for edition compatibility issues",
          "    pub async fn analyze(&self, target_edition: Edition) -> Result<AnalysisReport> {",
          "        let mut report = AnalysisReport {",
          "            target_edition,",
          "            total_files: 0,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use std::process::Command;",
          "use walkdir::WalkDir;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 70: Control flow statement",
          "Line 85: Control flow statement",
          "Line 90: Control flow statement",
          "Line 109: Control flow statement",
          "Line 153: Control flow statement",
          "Line 187: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use walkdir::WalkDir;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 49: Error handling point",
          "Line 64: Error handling point",
          "Line 67: Error handling point",
          "Line 79: Error handling point",
          "Line 235: Error handling point",
          "Line 248: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/analyzer.rs",
        "line": 24,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "analyze",
        "function_signature": "pub async fn analyze(&self, target_edition: Edition) -> Result<AnalysisReport> {",
        "return_type": "Result<AnalysisReport> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "impl EditionAnalyzer {",
          "    /// Create a new edition analyzer",
          "    pub fn new(project_path: impl AsRef<Path>) -> Self {",
          "        Self {",
          "            project_path: project_path.as_ref().to_path_buf(),",
          "        }",
          "    }",
          "",
          "    /// Analyze the project for edition compatibility issues",
          "    pub async fn analyze(&self, target_edition: Edition) -> Result<AnalysisReport> {",
          "        let mut report = AnalysisReport {",
          "            target_edition,",
          "            total_files: 0,",
          "            issues: Vec::new(),",
          "            warnings: Vec::new(),",
          "            suggestions: Vec::new(),",
          "        };",
          "",
          "        // Count Rust source files",
          "        for entry in WalkDir::new(&self.project_path)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use std::process::Command;",
          "use walkdir::WalkDir;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 70: Control flow statement",
          "Line 85: Control flow statement",
          "Line 90: Control flow statement",
          "Line 109: Control flow statement",
          "Line 153: Control flow statement",
          "Line 187: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use walkdir::WalkDir;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 49: Error handling point",
          "Line 64: Error handling point",
          "Line 67: Error handling point",
          "Line 79: Error handling point",
          "Line 235: Error handling point",
          "Line 248: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/analyzer.rs",
        "line": 139,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "add_suggestions",
        "function_signature": "fn add_suggestions(&self, target_edition: Edition, report: &mut AnalysisReport) {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                );",
          "            }",
          "            _ => {}",
          "        }",
          "",
          "        Ok(())",
          "    }",
          "",
          "    /// Add migration suggestions",
          "    fn add_suggestions(&self, target_edition: Edition, report: &mut AnalysisReport) {",
          "        report.suggestions.push(format!(",
          "            \"Run `cargo fix --edition` to automatically fix most edition issues\"",
          "        ));",
          "",
          "        report.suggestions.push(format!(",
          "            \"After migration, update Cargo.toml to edition = \\\"{}\\\"\",",
          "            target_edition.as_str()",
          "        ));",
          "",
          "        report"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use std::process::Command;",
          "use walkdir::WalkDir;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 70: Control flow statement",
          "Line 85: Control flow statement",
          "Line 90: Control flow statement",
          "Line 109: Control flow statement",
          "Line 153: Control flow statement",
          "Line 187: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use walkdir::WalkDir;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 49: Error handling point",
          "Line 64: Error handling point",
          "Line 67: Error handling point",
          "Line 79: Error handling point",
          "Line 235: Error handling point",
          "Line 248: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/edition/migrator.rs",
        "line": 337,
        "message": "File has 338 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_migrator_creation",
        "function_signature": "async fn test_migrator_creation() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for MigrationStatus {",
        "surrounding_code": [
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_migrator_creation() {",
          "        let temp_dir = TempDir::new().unwrap();",
          "        let migrator =",
          "            EditionMigrator::new(temp_dir.path()).with_backup(temp_dir.path().join(\"backup\"));",
          "",
          "        assert_eq!(migrator.project_path, temp_dir.path());",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 43: Control flow statement",
          "Line 48: Control flow statement",
          "Line 49: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 69: Control flow statement",
          "Line 70: Control flow statement",
          "Line 125: Control flow statement",
          "Line 129: Control flow statement",
          "Line 133: Control flow statement",
          "Line 137: Control flow statement",
          "Line 146: Control flow statement",
          "Line 151: Control flow statement",
          "Line 178: Control flow statement",
          "Line 179: Control flow statement",
          "Line 206: Control flow statement",
          "Line 222: Control flow statement",
          "Line 227: Control flow statement",
          "Line 284: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 41: Error handling point",
          "Line 50: Error handling point",
          "Line 54: Error handling point",
          "Line 62: Error handling point",
          "Line 66: Error handling point",
          "Line 71: Error handling point",
          "Line 88: Error handling point",
          "Line 93: Error handling point",
          "Line 108: Error handling point",
          "Line 121: Error handling point",
          "Line 144: Error handling point",
          "Line 173: Error handling point",
          "Line 175: Error handling point",
          "Line 188: Error handling point",
          "Line 189: Error handling point",
          "Line 204: Error handling point",
          "Line 228: Error handling point",
          "Line 332: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/migrator.rs",
        "line": 18,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(project_path: impl AsRef<Path>) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "/// Edition migrator for upgrading projects",
          "pub struct EditionMigrator {",
          "    project_path: PathBuf,",
          "    backup_dir: Option<PathBuf>,",
          "}",
          "",
          "impl EditionMigrator {",
          "    /// Create a new edition migrator",
          "    pub fn new(project_path: impl AsRef<Path>) -> Self {",
          "        Self {",
          "            project_path: project_path.as_ref().to_path_buf(),",
          "            backup_dir: None,",
          "        }",
          "    }",
          "",
          "    /// Set backup directory",
          "    pub fn with_backup(mut self, backup_dir: impl AsRef<Path>) -> Self {",
          "        self.backup_dir = Some(backup_dir.as_ref().to_path_buf());",
          "        self"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 43: Control flow statement",
          "Line 48: Control flow statement",
          "Line 49: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 69: Control flow statement",
          "Line 70: Control flow statement",
          "Line 125: Control flow statement",
          "Line 129: Control flow statement",
          "Line 133: Control flow statement",
          "Line 137: Control flow statement",
          "Line 146: Control flow statement",
          "Line 151: Control flow statement",
          "Line 178: Control flow statement",
          "Line 179: Control flow statement",
          "Line 206: Control flow statement",
          "Line 222: Control flow statement",
          "Line 227: Control flow statement",
          "Line 284: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 41: Error handling point",
          "Line 50: Error handling point",
          "Line 54: Error handling point",
          "Line 62: Error handling point",
          "Line 66: Error handling point",
          "Line 71: Error handling point",
          "Line 88: Error handling point",
          "Line 93: Error handling point",
          "Line 108: Error handling point",
          "Line 121: Error handling point",
          "Line 144: Error handling point",
          "Line 173: Error handling point",
          "Line 175: Error handling point",
          "Line 188: Error handling point",
          "Line 189: Error handling point",
          "Line 204: Error handling point",
          "Line 228: Error handling point",
          "Line 332: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/migrator.rs",
        "line": 26,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "with_backup",
        "function_signature": "pub fn with_backup(mut self, backup_dir: impl AsRef<Path>) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    /// Create a new edition migrator",
          "    pub fn new(project_path: impl AsRef<Path>) -> Self {",
          "        Self {",
          "            project_path: project_path.as_ref().to_path_buf(),",
          "            backup_dir: None,",
          "        }",
          "    }",
          "",
          "    /// Set backup directory",
          "    pub fn with_backup(mut self, backup_dir: impl AsRef<Path>) -> Self {",
          "        self.backup_dir = Some(backup_dir.as_ref().to_path_buf());",
          "        self",
          "    }",
          "",
          "    /// Migrate project to target edition",
          "    pub async fn migrate(",
          "        &self,",
          "        target_edition: Edition,",
          "        options: MigrationOptions,",
          "    ) -> Result<MigrationResult> {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 43: Control flow statement",
          "Line 48: Control flow statement",
          "Line 49: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 69: Control flow statement",
          "Line 70: Control flow statement",
          "Line 125: Control flow statement",
          "Line 129: Control flow statement",
          "Line 133: Control flow statement",
          "Line 137: Control flow statement",
          "Line 146: Control flow statement",
          "Line 151: Control flow statement",
          "Line 178: Control flow statement",
          "Line 179: Control flow statement",
          "Line 206: Control flow statement",
          "Line 222: Control flow statement",
          "Line 227: Control flow statement",
          "Line 284: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 41: Error handling point",
          "Line 50: Error handling point",
          "Line 54: Error handling point",
          "Line 62: Error handling point",
          "Line 66: Error handling point",
          "Line 71: Error handling point",
          "Line 88: Error handling point",
          "Line 93: Error handling point",
          "Line 108: Error handling point",
          "Line 121: Error handling point",
          "Line 144: Error handling point",
          "Line 173: Error handling point",
          "Line 175: Error handling point",
          "Line 188: Error handling point",
          "Line 189: Error handling point",
          "Line 204: Error handling point",
          "Line 228: Error handling point",
          "Line 332: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/edition/migrator.rs",
        "line": 114,
        "message": "Function has 53 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run_cargo_fix",
        "function_signature": "async fn run_cargo_fix(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let output = Command::new(\"git\")",
          "            .current_dir(&self.project_path)",
          "            .args(&[\"status\", \"--porcelain\"])",
          "            .output()?;",
          "",
          "        Ok(!output.stdout.is_empty())",
          "    }",
          "",
          "    /// Run cargo fix --edition",
          "    async fn run_cargo_fix(",
          "        &self,",
          "        _target_edition: Edition,",
          "        options: &MigrationOptions,",
          "        result: &mut MigrationResult,",
          "    ) -> Result<()> {",
          "        let cargo_path =",
          "            which::which(\"cargo\").map_err(|_| Error::rust_not_found(\"cargo not found\"))?;",
          "",
          "        let mut args = vec![\"fix\", \"--edition\"];",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 43: Control flow statement",
          "Line 48: Control flow statement",
          "Line 49: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 69: Control flow statement",
          "Line 70: Control flow statement",
          "Line 125: Control flow statement",
          "Line 129: Control flow statement",
          "Line 133: Control flow statement",
          "Line 137: Control flow statement",
          "Line 146: Control flow statement",
          "Line 151: Control flow statement",
          "Line 178: Control flow statement",
          "Line 179: Control flow statement",
          "Line 206: Control flow statement",
          "Line 222: Control flow statement",
          "Line 227: Control flow statement",
          "Line 284: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context"
        ],
        "error_propagation": [
          "Line 41: Error handling point",
          "Line 50: Error handling point",
          "Line 54: Error handling point",
          "Line 62: Error handling point",
          "Line 66: Error handling point",
          "Line 71: Error handling point",
          "Line 88: Error handling point",
          "Line 93: Error handling point",
          "Line 108: Error handling point",
          "Line 121: Error handling point",
          "Line 144: Error handling point",
          "Line 173: Error handling point",
          "Line 175: Error handling point",
          "Line 188: Error handling point",
          "Line 189: Error handling point",
          "Line 204: Error handling point",
          "Line 228: Error handling point",
          "Line 332: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/edition/migrator.rs",
        "line": 332,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_migrator_creation",
        "function_signature": "async fn test_migrator_creation() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for MigrationStatus {",
        "surrounding_code": [
          "        let options = MigrationOptions::default();",
          "        assert!(options.create_backup);",
          "        assert!(options.check_git);",
          "        assert!(options.update_manifest);",
          "        assert!(!options.run_tests);",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_migrator_creation() {",
          "        let temp_dir = TempDir::new().unwrap();",
          "        let migrator =",
          "            EditionMigrator::new(temp_dir.path()).with_backup(temp_dir.path().join(\"backup\"));",
          "",
          "        assert_eq!(migrator.project_path, temp_dir.path());",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 332: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 43: Control flow statement",
          "Line 48: Control flow statement",
          "Line 49: Control flow statement",
          "Line 53: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 69: Control flow statement",
          "Line 70: Control flow statement",
          "Line 125: Control flow statement",
          "Line 129: Control flow statement",
          "Line 133: Control flow statement",
          "Line 137: Control flow statement",
          "Line 146: Control flow statement",
          "Line 151: Control flow statement",
          "Line 178: Control flow statement",
          "Line 179: Control flow statement",
          "Line 206: Control flow statement",
          "Line 222: Control flow statement",
          "Line 227: Control flow statement",
          "Line 284: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "use super::Edition;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 41: Error handling point",
          "Line 50: Error handling point",
          "Line 54: Error handling point",
          "Line 62: Error handling point",
          "Line 66: Error handling point",
          "Line 71: Error handling point",
          "Line 88: Error handling point",
          "Line 93: Error handling point",
          "Line 108: Error handling point",
          "Line 121: Error handling point",
          "Line 144: Error handling point",
          "Line 173: Error handling point",
          "Line 175: Error handling point",
          "Line 188: Error handling point",
          "Line 189: Error handling point",
          "Line 204: Error handling point",
          "Line 228: Error handling point",
          "Line 332: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/mod.rs",
        "line": 106,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(current: Edition, manifest_path: PathBuf) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl std::fmt::Display for Edition {",
        "surrounding_code": [
          "    pub is_latest: bool,",
          "    /// Path to Cargo.toml",
          "    pub manifest_path: PathBuf,",
          "    /// Recommended migration path",
          "    pub migration_path: Vec<Edition>,",
          "}",
          "",
          "impl EditionStatus {",
          "    /// Create a new edition status",
          "    pub fn new(current: Edition, manifest_path: PathBuf) -> Self {",
          "        let latest = Edition::latest();",
          "        let is_latest = current == latest;",
          "",
          "        // Build migration path",
          "        let mut migration_path = Vec::new();",
          "        let mut current_edition = current;",
          "",
          "        while let Some(next) = current_edition.next() {",
          "            if next <= latest {",
          "                migration_path.push(next);"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 44: Control flow statement",
          "Line 57: Control flow statement",
          "Line 64: Control flow statement",
          "Line 74: Control flow statement",
          "Line 114: Control flow statement",
          "Line 115: Control flow statement",
          "Line 135: Control flow statement",
          "Line 151: Control flow statement",
          "Line 168: Control flow statement",
          "Line 174: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 96: Error handling point",
          "Line 142: Error handling point",
          "Line 144: Error handling point",
          "Line 159: Error handling point",
          "Line 207: Error handling point",
          "Line 211: Error handling point",
          "Line 215: Error handling point",
          "Line 219: Error handling point",
          "Line 251: Error handling point",
          "Line 261: Error handling point",
          "Line 263: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/mod.rs",
        "line": 134,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "detect_edition",
        "function_signature": "pub async fn detect_edition(manifest_path: &Path) -> Result<Edition> {",
        "return_type": "Result<Edition> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for Edition {",
        "surrounding_code": [
          "            latest,",
          "            is_latest,",
          "            manifest_path,",
          "            migration_path,",
          "        }",
          "    }",
          "}",
          "",
          "/// Detect edition from Cargo.toml",
          "pub async fn detect_edition(manifest_path: &Path) -> Result<Edition> {",
          "    if !manifest_path.exists() {",
          "        return Err(Error::file_not_found(format!(",
          "            \"Cargo.toml not found at {}\",",
          "            manifest_path.display()",
          "        )));",
          "    }",
          "",
          "    let contents = fs::read_to_string(manifest_path).await?;",
          "    let manifest: toml::Value = toml::from_str(&contents)",
          "        .map_err(|e| Error::parse(format!(\"Failed to parse Cargo.toml: {}\", e)))?;"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 44: Control flow statement",
          "Line 57: Control flow statement",
          "Line 64: Control flow statement",
          "Line 74: Control flow statement",
          "Line 114: Control flow statement",
          "Line 115: Control flow statement",
          "Line 135: Control flow statement",
          "Line 151: Control flow statement",
          "Line 168: Control flow statement",
          "Line 174: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 96: Error handling point",
          "Line 142: Error handling point",
          "Line 144: Error handling point",
          "Line 159: Error handling point",
          "Line 207: Error handling point",
          "Line 211: Error handling point",
          "Line 215: Error handling point",
          "Line 219: Error handling point",
          "Line 251: Error handling point",
          "Line 261: Error handling point",
          "Line 263: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/edition/mod.rs",
        "line": 157,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_compliance",
        "function_signature": "pub async fn check_compliance(project_path: &Path) -> Result<EditionStatus> {",
        "return_type": "Result<EditionStatus> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for Edition {",
        "surrounding_code": [
          "        .get(\"package\")",
          "        .and_then(|p| p.get(\"edition\"))",
          "        .and_then(|e| e.as_str())",
          "        .unwrap_or(\"2015\"); // Default to 2015 if not specified",
          "",
          "    Edition::parse_edition(edition_str)",
          "}",
          "",
          "/// Check edition compliance for a project",
          "pub async fn check_compliance(project_path: &Path) -> Result<EditionStatus> {",
          "    let manifest_path = project_path.join(\"Cargo.toml\");",
          "    let edition = detect_edition(&manifest_path).await?;",
          "",
          "    Ok(EditionStatus::new(edition, manifest_path))",
          "}",
          "",
          "/// Get edition migration recommendations",
          "pub fn get_migration_recommendations(status: &EditionStatus) -> Vec<String> {",
          "    let mut recommendations = Vec::new();",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 44: Control flow statement",
          "Line 57: Control flow statement",
          "Line 64: Control flow statement",
          "Line 74: Control flow statement",
          "Line 114: Control flow statement",
          "Line 115: Control flow statement",
          "Line 135: Control flow statement",
          "Line 151: Control flow statement",
          "Line 168: Control flow statement",
          "Line 174: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 96: Error handling point",
          "Line 142: Error handling point",
          "Line 144: Error handling point",
          "Line 159: Error handling point",
          "Line 207: Error handling point",
          "Line 211: Error handling point",
          "Line 215: Error handling point",
          "Line 219: Error handling point",
          "Line 251: Error handling point",
          "Line 261: Error handling point",
          "Line 263: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/edition/mod.rs",
        "line": 251,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_detect_edition",
        "function_signature": "async fn test_detect_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl std::fmt::Display for Edition {",
        "surrounding_code": [
          "        let status = EditionStatus::new(Edition::Edition2015, PathBuf::from(\"Cargo.toml\"));",
          "        assert_eq!(status.migration_path.len(), 3);",
          "        assert_eq!(status.migration_path[0], Edition::Edition2018);",
          "        assert_eq!(status.migration_path[1], Edition::Edition2021);",
          "        assert_eq!(status.migration_path[2], Edition::Edition2024);",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_detect_edition() {",
          "        let temp_dir = TempDir::new().unwrap();",
          "        let manifest_path = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        let manifest_content = r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#;",
          "",
          "        fs::write(&manifest_path, manifest_content).await.unwrap();"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 251: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 44: Control flow statement",
          "Line 57: Control flow statement",
          "Line 64: Control flow statement",
          "Line 74: Control flow statement",
          "Line 114: Control flow statement",
          "Line 115: Control flow statement",
          "Line 135: Control flow statement",
          "Line 151: Control flow statement",
          "Line 168: Control flow statement",
          "Line 174: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 96: Error handling point",
          "Line 142: Error handling point",
          "Line 144: Error handling point",
          "Line 159: Error handling point",
          "Line 207: Error handling point",
          "Line 211: Error handling point",
          "Line 215: Error handling point",
          "Line 219: Error handling point",
          "Line 251: Error handling point",
          "Line 261: Error handling point",
          "Line 263: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/edition/mod.rs",
        "line": 261,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_detect_edition",
        "function_signature": "async fn test_detect_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl std::fmt::Display for Edition {",
        "surrounding_code": [
          "        let manifest_path = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        let manifest_content = r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#;",
          "",
          "        fs::write(&manifest_path, manifest_content).await.unwrap();",
          "",
          "        let edition = detect_edition(&manifest_path).await.unwrap();",
          "        assert_eq!(edition, Edition::Edition2021);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 44: Control flow statement",
          "Line 57: Control flow statement",
          "Line 64: Control flow statement",
          "Line 74: Control flow statement",
          "Line 114: Control flow statement",
          "Line 115: Control flow statement",
          "Line 135: Control flow statement",
          "Line 151: Control flow statement",
          "Line 168: Control flow statement",
          "Line 174: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 96: Error handling point",
          "Line 142: Error handling point",
          "Line 144: Error handling point",
          "Line 159: Error handling point",
          "Line 207: Error handling point",
          "Line 211: Error handling point",
          "Line 215: Error handling point",
          "Line 219: Error handling point",
          "Line 251: Error handling point",
          "Line 261: Error handling point",
          "Line 263: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/edition/mod.rs",
        "line": 263,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_detect_edition",
        "function_signature": "async fn test_detect_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl std::fmt::Display for Edition {",
        "surrounding_code": [
          "        let manifest_content = r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#;",
          "",
          "        fs::write(&manifest_path, manifest_content).await.unwrap();",
          "",
          "        let edition = detect_edition(&manifest_path).await.unwrap();",
          "        assert_eq!(edition, Edition::Edition2021);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 159: Variable 'edition' used",
          "Line 263: Variable 'edition' used"
        ],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 44: Control flow statement",
          "Line 57: Control flow statement",
          "Line 64: Control flow statement",
          "Line 74: Control flow statement",
          "Line 114: Control flow statement",
          "Line 115: Control flow statement",
          "Line 135: Control flow statement",
          "Line 151: Control flow statement",
          "Line 168: Control flow statement",
          "Line 174: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 96: Error handling point",
          "Line 142: Error handling point",
          "Line 144: Error handling point",
          "Line 159: Error handling point",
          "Line 207: Error handling point",
          "Line 211: Error handling point",
          "Line 215: Error handling point",
          "Line 219: Error handling point",
          "Line 251: Error handling point",
          "Line 261: Error handling point",
          "Line 263: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/error.rs",
        "line": 157,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "rate_limited",
        "function_signature": "pub fn rate_limited(retry_after: u64) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        Self::Command(msg.into())",
          "    }",
          "",
          "    /// Create a new file not found error",
          "    pub fn file_not_found(msg: impl Into<String>) -> Self {",
          "        Self::FileNotFound(msg.into())",
          "    }",
          "",
          "    /// Create a new rate limited error",
          "    pub fn rate_limited(retry_after: u64) -> Self {",
          "        Self::RateLimited(retry_after)",
          "    }",
          "",
          "    /// Create a new migration error",
          "    pub fn migration(msg: impl Into<String>) -> Self {",
          "        Self::Migration(msg.into())",
          "    }",
          "",
          "    /// Create a new network error",
          "    pub fn network(msg: impl Into<String>) -> Self {"
        ],
        "imports": [],
        "error_handling_style": "StdResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [],
        "dependencies": [],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 339,
        "message": "File has 340 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_format_result_unformatted",
        "function_signature": "fn test_format_result_unformatted() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                file: \"src/main.rs\".to_string(),",
          "                line: 10,",
          "                description: \"Formatting required\".to_string(),",
          "            }],",
          "        };",
          "",
          "        assert!(!result.formatted);",
          "        assert_eq!(result.unformatted_files.len(), 1);",
          "        assert_eq!(result.suggestions.len(), 1);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 78,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_formatting",
        "function_signature": "pub async fn check_formatting(project_path: &Path) -> Result<FormatResult> {",
        "return_type": "Result<FormatResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                \"\\n💡 Run 'ferrous-forge fix --format' to automatically fix these issues\\n\",",
          "            );",
          "        }",
          "",
          "        report",
          "    }",
          "}",
          "",
          "/// Check code formatting",
          "pub async fn check_formatting(project_path: &Path) -> Result<FormatResult> {",
          "    // Ensure rustfmt is installed",
          "    ensure_rustfmt_installed().await?;",
          "",
          "    // Run cargo fmt with check mode",
          "    let output = Command::new(\"cargo\")",
          "        .args(&[\"fmt\", \"--\", \"--check\", \"--verbose\"])",
          "        .current_dir(project_path)",
          "        .output()",
          "        .map_err(|e| Error::process(format!(\"Failed to run cargo fmt: {}\", e)))?;",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 94,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "auto_format",
        "function_signature": "pub async fn auto_format(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        .current_dir(project_path)",
          "        .output()",
          "        .map_err(|e| Error::process(format!(\"Failed to run cargo fmt: {}\", e)))?;",
          "",
          "    // Parse the output",
          "    parse_format_output(&output.stdout, &output.stderr, output.status.success())",
          "}",
          "",
          "/// Auto-format code",
          "pub async fn auto_format(project_path: &Path) -> Result<()> {",
          "    // Ensure rustfmt is installed",
          "    ensure_rustfmt_installed().await?;",
          "",
          "    println!(\"🔧 Auto-formatting code...\");",
          "",
          "    // Run cargo fmt",
          "    let output = Command::new(\"cargo\")",
          "        .arg(\"fmt\")",
          "        .current_dir(project_path)",
          "        .output()"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 117,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_file_formatting",
        "function_signature": "pub async fn check_file_formatting(file_path: &Path) -> Result<bool> {",
        "return_type": "Result<bool> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        println!(\"✨ Code formatted successfully!\");",
          "        Ok(())",
          "    } else {",
          "        let stderr = String::from_utf8_lossy(&output.stderr);",
          "        Err(Error::process(format!(\"Formatting failed: {}\", stderr)))",
          "    }",
          "}",
          "",
          "/// Check formatting for a specific file",
          "pub async fn check_file_formatting(file_path: &Path) -> Result<bool> {",
          "    // Ensure rustfmt is installed",
          "    ensure_rustfmt_installed().await?;",
          "",
          "    // Run rustfmt with check mode on single file",
          "    let output = Command::new(\"rustfmt\")",
          "        .args(&[",
          "            \"--check\",",
          "            file_path",
          "                .to_str()",
          "                .ok_or_else(|| Error::process(\"Invalid file path\"))?,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 136,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "format_file",
        "function_signature": "pub async fn format_file(file_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                .ok_or_else(|| Error::process(\"Invalid file path\"))?,",
          "        ])",
          "        .output()",
          "        .map_err(|e| Error::process(format!(\"Failed to run rustfmt: {}\", e)))?;",
          "",
          "    Ok(output.status.success())",
          "}",
          "",
          "/// Format a specific file",
          "pub async fn format_file(file_path: &Path) -> Result<()> {",
          "    // Ensure rustfmt is installed",
          "    ensure_rustfmt_installed().await?;",
          "",
          "    // Run rustfmt on single file",
          "    let output = Command::new(\"rustfmt\")",
          "        .arg(",
          "            file_path",
          "                .to_str()",
          "                .ok_or_else(|| Error::process(\"Invalid file path\"))?,",
          "        )"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 163,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "get_format_diff",
        "function_signature": "pub async fn get_format_diff(project_path: &Path) -> Result<String> {",
        "return_type": "Result<String> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        Err(Error::process(format!(",
          "            \"Failed to format {}: {}\",",
          "            file_path.display(),",
          "            stderr",
          "        )))",
          "    }",
          "}",
          "",
          "/// Get formatting diff without applying changes",
          "pub async fn get_format_diff(project_path: &Path) -> Result<String> {",
          "    // Ensure rustfmt is installed",
          "    ensure_rustfmt_installed().await?;",
          "",
          "    // Run cargo fmt with diff output",
          "    let output = Command::new(\"cargo\")",
          "        .args(&[\"fmt\", \"--\", \"--check\", \"--emit=stdout\"])",
          "        .current_dir(project_path)",
          "        .output()",
          "        .map_err(|e| Error::process(format!(\"Failed to run cargo fmt: {}\", e)))?;",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 203,
        "message": "Function has 58 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_format_output",
        "function_signature": "fn parse_format_output(stdout: &[u8], stderr: &[u8], success: bool) -> Result<FormatResult> {",
        "return_type": "Result<FormatResult> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        }",
          "",
          "        println!(\"✅ rustfmt installed successfully\");",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Parse formatting check output",
          "fn parse_format_output(stdout: &[u8], stderr: &[u8], success: bool) -> Result<FormatResult> {",
          "    if success {",
          "        return Ok(FormatResult {",
          "            formatted: true,",
          "            unformatted_files: vec![],",
          "            suggestions: vec![],",
          "        });",
          "    }",
          "",
          "    let stderr_str = String::from_utf8_lossy(stderr);",
          "    let stdout_str = String::from_utf8_lossy(stdout);"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 261,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "apply_rustfmt_config",
        "function_signature": "pub async fn apply_rustfmt_config(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    Ok(FormatResult {",
          "        formatted: false,",
          "        unformatted_files,",
          "        suggestions,",
          "    })",
          "}",
          "",
          "/// Apply formatting configuration",
          "pub async fn apply_rustfmt_config(project_path: &Path) -> Result<()> {",
          "    let rustfmt_toml = project_path.join(\"rustfmt.toml\");",
          "",
          "    if !rustfmt_toml.exists() {",
          "        // Create default rustfmt.toml",
          "        let config = r#\"# Ferrous Forge rustfmt configuration",
          "edition = \"2021\"",
          "max_width = 100",
          "hard_tabs = false",
          "tab_spaces = 4",
          "newline_style = \"Auto\""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/formatting.rs",
        "line": 261,
        "message": "Function has 51 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "apply_rustfmt_config",
        "function_signature": "pub async fn apply_rustfmt_config(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    Ok(FormatResult {",
          "        formatted: false,",
          "        unformatted_files,",
          "        suggestions,",
          "    })",
          "}",
          "",
          "/// Apply formatting configuration",
          "pub async fn apply_rustfmt_config(project_path: &Path) -> Result<()> {",
          "    let rustfmt_toml = project_path.join(\"rustfmt.toml\");",
          "",
          "    if !rustfmt_toml.exists() {",
          "        // Create default rustfmt.toml",
          "        let config = r#\"# Ferrous Forge rustfmt configuration",
          "edition = \"2021\"",
          "max_width = 100",
          "hard_tabs = false",
          "tab_spaces = 4",
          "newline_style = \"Auto\""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 51: Control flow statement",
          "Line 60: Control flow statement",
          "Line 107: Control flow statement",
          "Line 150: Control flow statement",
          "Line 181: Control flow statement",
          "Line 192: Control flow statement",
          "Line 204: Control flow statement",
          "Line 220: Control flow statement",
          "Line 221: Control flow statement",
          "Line 229: Control flow statement",
          "Line 231: Control flow statement",
          "Line 232: Control flow statement",
          "Line 233: Control flow statement",
          "Line 238: Control flow statement",
          "Line 264: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 80: Error handling point",
          "Line 87: Error handling point",
          "Line 96: Error handling point",
          "Line 105: Error handling point",
          "Line 119: Error handling point",
          "Line 127: Error handling point",
          "Line 130: Error handling point",
          "Line 138: Error handling point",
          "Line 145: Error handling point",
          "Line 148: Error handling point",
          "Line 165: Error handling point",
          "Line 172: Error handling point",
          "Line 190: Error handling point",
          "Line 298: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 313,
        "message": "File has 314 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_hooks_not_installed",
        "function_signature": "async fn test_check_hooks_not_installed() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_hooks_not_installed() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp dir for test\");",
          "        let installed = check_hooks_installed(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "        assert!(!installed);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 138,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "install_git_hooks",
        "function_signature": "pub async fn install_git_hooks(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "if [ ${#FIRST_LINE} -gt 72 ]; then",
          "    echo \"⚠️  Commit message first line is too long (${#FIRST_LINE} > 72 characters)\"",
          "    echo \"   Consider making it more concise\"",
          "fi",
          "",
          "echo \"✅ Commit message format valid\"",
          "\"#;",
          "",
          "/// Install git hooks in a project",
          "pub async fn install_git_hooks(project_path: &Path) -> Result<()> {",
          "    // Check if it's a git repository",
          "    let git_dir = project_path.join(\".git\");",
          "    if !git_dir.exists() {",
          "        return Err(Error::validation(",
          "            \"Not a git repository. Run 'git init' first.\",",
          "        ));",
          "    }",
          "",
          "    let hooks_dir = git_dir.join(\"hooks\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 181,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "install_hook",
        "function_signature": "async fn install_hook(hooks_dir: &Path, name: &str, content: &str) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    println!(\"  • pre-push: Runs tests and full validation before push\");",
          "    println!(\"  • commit-msg: Ensures conventional commit format\");",
          "    println!();",
          "    println!(\"To bypass hooks temporarily, use: git commit --no-verify\");",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Install a single hook",
          "async fn install_hook(hooks_dir: &Path, name: &str, content: &str) -> Result<()> {",
          "    let hook_path = hooks_dir.join(name);",
          "",
          "    // Check if hook already exists",
          "    if hook_path.exists() {",
          "        let existing = fs::read_to_string(&hook_path)",
          "            .await",
          "            .map_err(|e| Error::process(format!(\"Failed to read existing hook: {}\", e)))?;",
          "",
          "        if existing.contains(\"Ferrous Forge\") {",
          "            // Our hook is already installed"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 231,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "uninstall_git_hooks",
        "function_signature": "pub async fn uninstall_git_hooks(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        fs::set_permissions(&hook_path, perms)",
          "            .await",
          "            .map_err(|e| Error::process(format!(\"Failed to set hook permissions: {}\", e)))?;",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Remove git hooks from a project",
          "pub async fn uninstall_git_hooks(project_path: &Path) -> Result<()> {",
          "    let git_dir = project_path.join(\".git\");",
          "    if !git_dir.exists() {",
          "        return Ok(()); // No git repo, nothing to uninstall",
          "    }",
          "",
          "    let hooks_dir = git_dir.join(\"hooks\");",
          "",
          "    println!(\"🗑️  Removing git hooks...\");",
          "",
          "    for hook_name in &[\"pre-commit\", \"pre-push\", \"commit-msg\"] {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 272,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_hooks_installed",
        "function_signature": "pub async fn check_hooks_installed(project_path: &Path) -> Result<bool> {",
        "return_type": "Result<bool> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        }",
          "    }",
          "",
          "    println!(\"✅ Git hooks removed\");",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Check if git hooks are installed",
          "pub async fn check_hooks_installed(project_path: &Path) -> Result<bool> {",
          "    let git_dir = project_path.join(\".git\");",
          "    if !git_dir.exists() {",
          "        return Ok(false);",
          "    }",
          "",
          "    let hooks_dir = git_dir.join(\"hooks\");",
          "    let pre_commit = hooks_dir.join(\"pre-commit\");",
          "",
          "    if pre_commit.exists() {",
          "        let content = fs::read_to_string(&pre_commit).await.unwrap_or_default();"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 308,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_hooks_not_installed",
        "function_signature": "async fn test_check_hooks_not_installed() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert!(result.is_err());",
          "        assert!(result",
          "            .expect_err(\"Should have failed\")",
          "            .to_string()",
          "            .contains(\"Not a git repository\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_hooks_not_installed() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp dir for test\");",
          "        let installed = check_hooks_installed(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "        assert!(!installed);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 297: Variable 'temp_dir' used",
          "Line 308: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/git_hooks.rs",
        "line": 311,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_hooks_not_installed",
        "function_signature": "async fn test_check_hooks_not_installed() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .to_string()",
          "            .contains(\"Not a git repository\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_hooks_not_installed() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp dir for test\");",
          "        let installed = check_hooks_installed(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "        assert!(!installed);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use std::path::Path;",
          "use tokio::fs;",
          "        use std::os::unix::fs::PermissionsExt;",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 19: Control flow statement",
          "Line 20: Control flow statement",
          "Line 29: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 52: Control flow statement",
          "Line 53: Control flow statement",
          "Line 55: Control flow statement",
          "Line 77: Control flow statement",
          "Line 85: Control flow statement",
          "Line 92: Control flow statement",
          "Line 110: Control flow statement",
          "Line 129: Control flow statement",
          "Line 139: Control flow statement",
          "Line 141: Control flow statement",
          "Line 149: Control flow statement",
          "Line 184: Control flow statement",
          "Line 185: Control flow statement",
          "Line 190: Control flow statement",
          "Line 233: Control flow statement",
          "Line 244: Control flow statement",
          "Line 245: Control flow statement",
          "Line 248: Control flow statement",
          "Line 254: Control flow statement",
          "Line 256: Control flow statement",
          "Line 271: Control flow statement",
          "Line 274: Control flow statement",
          "Line 281: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context"
        ],
        "error_propagation": [
          "Line 111: Error handling point",
          "Line 152: Error handling point",
          "Line 157: Error handling point",
          "Line 161: Error handling point",
          "Line 165: Error handling point",
          "Line 188: Error handling point",
          "Line 199: Error handling point",
          "Line 211: Error handling point",
          "Line 219: Error handling point",
          "Line 224: Error handling point",
          "Line 251: Error handling point",
          "Line 259: Error handling point",
          "Line 297: Error handling point",
          "Line 308: Error handling point",
          "Line 311: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/main.rs",
        "line": 11,
        "message": "Function has 74 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "//!",
          "//! This is the main binary entry point for the Ferrous Forge CLI tool.",
          "",
          "#![forbid(unsafe_code)]",
          "#![warn(missing_docs)]",
          "",
          "use clap::Parser;",
          "use ferrous_forge::{cli::Cli, commands, Result};",
          "",
          "#[tokio::main]",
          "async fn main() -> Result<()> {",
          "    // Initialize tracing",
          "    tracing_subscriber::fmt::init();",
          "",
          "    // Parse command line arguments",
          "    let cli = Cli::parse();",
          "",
          "    // Execute the appropriate command",
          "    match cli.command {",
          "        commands::Commands::Init { force } => commands::init::execute(force).await,"
        ],
        "imports": [
          "use clap::Parser;",
          "use ferrous_forge::{cli::Cli, commands, Result};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 20: Control flow statement",
          "Line 41: Control flow statement",
          "Line 48: Control flow statement",
          "Line 62: Control flow statement"
        ],
        "dependencies": [
          "use clap::Parser;",
          "use ferrous_forge::{cli::Cli, commands, Result};"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/detector.rs",
        "line": 32,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse",
        "function_signature": "pub fn parse(version_output: &str) -> Result<Self> {",
        "return_type": "Result<Self> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    pub host: String,",
          "    /// Release channel",
          "    pub channel: Channel,",
          "    /// Raw version string from rustc",
          "    pub raw_string: String,",
          "}",
          "",
          "impl RustVersion {",
          "    /// Parse rustc version output",
          "    pub fn parse(version_output: &str) -> Result<Self> {",
          "        // Example: rustc 1.90.0 (4b06a43a1 2025-08-07)",
          "        let regex = Regex::new(",
          "            r\"rustc (\\d+\\.\\d+\\.\\d+(?:-[\\w.]+)?)\\s*\\(([a-f0-9]+)\\s+(\\d{4}-\\d{2}-\\d{2})\\)\",",
          "        )?;",
          "",
          "        let captures = regex",
          "            .captures(version_output)",
          "            .ok_or_else(|| Error::parse(\"Invalid rustc version output\"))?;",
          "",
          "        let version_str = &captures[1];"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::NaiveDate;",
          "use regex::Regex;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::process::Command;",
          "use std::str;",
          "use super::Channel;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 70: Control flow statement",
          "Line 81: Control flow statement",
          "Line 94: Control flow statement",
          "Line 96: Control flow statement",
          "Line 98: Control flow statement",
          "Line 109: Control flow statement",
          "Line 110: Control flow statement",
          "Line 111: Control flow statement",
          "Line 131: Control flow statement",
          "Line 142: Control flow statement",
          "Line 148: Control flow statement",
          "Line 163: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::NaiveDate;",
          "use regex::Regex;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use super::Channel;",
          "    use super::*;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 35: Error handling point",
          "Line 36: Error handling point",
          "Line 40: Error handling point",
          "Line 43: Error handling point",
          "Line 46: Error handling point",
          "Line 73: Error handling point",
          "Line 79: Error handling point",
          "Line 87: Error handling point",
          "Line 124: Error handling point",
          "Line 129: Error handling point",
          "Line 136: Error handling point",
          "Line 156: Error handling point",
          "Line 161: Error handling point",
          "Line 168: Error handling point",
          "Line 185: Error handling point",
          "Line 196: Error handling point",
          "Line 207: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/detector.rs",
        "line": 93,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "detect_channel",
        "function_signature": "fn detect_channel(version_str: &str) -> Channel {",
        "return_type": "Channel {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl std::fmt::Display for RustVersion {",
        "surrounding_code": [
          "    }",
          "",
          "    let stdout = str::from_utf8(&output.stdout)",
          "        .map_err(|e| Error::parse(format!(\"Invalid UTF-8 in rustc output: {}\", e)))?;",
          "",
          "    RustVersion::parse(stdout)",
          "}",
          "",
          "/// Detect the channel from version string",
          "fn detect_channel(version_str: &str) -> Channel {",
          "    if version_str.contains(\"nightly\") {",
          "        Channel::Nightly",
          "    } else if version_str.contains(\"beta\") {",
          "        Channel::Beta",
          "    } else if version_str.contains(\"-\") {",
          "        // Has pre-release identifier",
          "        Channel::Custom(version_str.to_string())",
          "    } else {",
          "        Channel::Stable",
          "    }"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::NaiveDate;",
          "use regex::Regex;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::process::Command;",
          "use std::str;",
          "use super::Channel;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 70: Control flow statement",
          "Line 81: Control flow statement",
          "Line 94: Control flow statement",
          "Line 96: Control flow statement",
          "Line 98: Control flow statement",
          "Line 109: Control flow statement",
          "Line 110: Control flow statement",
          "Line 111: Control flow statement",
          "Line 131: Control flow statement",
          "Line 142: Control flow statement",
          "Line 148: Control flow statement",
          "Line 163: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::NaiveDate;",
          "use regex::Regex;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use super::Channel;",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 35: Error handling point",
          "Line 36: Error handling point",
          "Line 40: Error handling point",
          "Line 43: Error handling point",
          "Line 46: Error handling point",
          "Line 73: Error handling point",
          "Line 79: Error handling point",
          "Line 87: Error handling point",
          "Line 124: Error handling point",
          "Line 129: Error handling point",
          "Line 136: Error handling point",
          "Line 156: Error handling point",
          "Line 161: Error handling point",
          "Line 168: Error handling point",
          "Line 185: Error handling point",
          "Line 196: Error handling point",
          "Line 207: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/github.rs",
        "line": 61,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(auth_token: Option<String>) -> Result<Self> {",
        "return_type": "Result<Self> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": "/// Simplified author information",
        "surrounding_code": [
          "",
          "/// GitHub API client",
          "pub struct GitHubClient {",
          "    client: Client,",
          "    auth_token: Option<String>,",
          "}",
          "",
          "impl GitHubClient {",
          "    /// Create a new GitHub client",
          "    pub fn new(auth_token: Option<String>) -> Result<Self> {",
          "        let client = Client::builder()",
          "            .timeout(std::time::Duration::from_secs(30))",
          "            .user_agent(format!(\"ferrous-forge/{}\", env!(\"CARGO_PKG_VERSION\")))",
          "            .build()",
          "            .map_err(|e| Error::network(format!(\"Failed to create HTTP client: {}\", e)))?;",
          "",
          "        Ok(Self { client, auth_token })",
          "    }",
          "",
          "    /// Get the latest stable release"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 83: Control flow statement",
          "Line 93: Control flow statement",
          "Line 104: Control flow statement",
          "Line 134: Control flow statement",
          "Line 143: Control flow statement",
          "Line 154: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 31: Error handling point",
          "Line 66: Error handling point",
          "Line 90: Error handling point",
          "Line 114: Error handling point",
          "Line 117: Error handling point",
          "Line 125: Error handling point",
          "Line 141: Error handling point",
          "Line 164: Error handling point",
          "Line 168: Error handling point",
          "Line 190: Error handling point",
          "Line 193: Error handling point",
          "Line 198: Error handling point",
          "Line 206: Error handling point",
          "Line 207: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/github.rs",
        "line": 72,
        "message": "Function has 51 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "get_latest_release",
        "function_signature": "pub async fn get_latest_release(&self) -> Result<GitHubRelease> {",
        "return_type": "Result<GitHubRelease> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "/// Simplified author information",
        "surrounding_code": [
          "            .timeout(std::time::Duration::from_secs(30))",
          "            .user_agent(format!(\"ferrous-forge/{}\", env!(\"CARGO_PKG_VERSION\")))",
          "            .build()",
          "            .map_err(|e| Error::network(format!(\"Failed to create HTTP client: {}\", e)))?;",
          "",
          "        Ok(Self { client, auth_token })",
          "    }",
          "",
          "    /// Get the latest stable release",
          "    pub async fn get_latest_release(&self) -> Result<GitHubRelease> {",
          "        let url = format!(",
          "            \"{}/repos/{}/{}/releases/latest\",",
          "            GITHUB_API_BASE, RUST_REPO_OWNER, RUST_REPO_NAME",
          "        );",
          "",
          "        let mut request = self",
          "            .client",
          "            .get(&url)",
          "            .header(\"Accept\", \"application/vnd.github.v3+json\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 83: Control flow statement",
          "Line 93: Control flow statement",
          "Line 104: Control flow statement",
          "Line 134: Control flow statement",
          "Line 143: Control flow statement",
          "Line 154: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 31: Error handling point",
          "Line 66: Error handling point",
          "Line 90: Error handling point",
          "Line 114: Error handling point",
          "Line 117: Error handling point",
          "Line 125: Error handling point",
          "Line 141: Error handling point",
          "Line 164: Error handling point",
          "Line 168: Error handling point",
          "Line 190: Error handling point",
          "Line 193: Error handling point",
          "Line 198: Error handling point",
          "Line 206: Error handling point",
          "Line 207: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/github.rs",
        "line": 123,
        "message": "Function has 53 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "get_releases",
        "function_signature": "pub async fn get_releases(&self, count: usize) -> Result<Vec<GitHubRelease>> {",
        "return_type": "Result<Vec<GitHubRelease>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "/// Simplified author information",
        "surrounding_code": [
          "            .map_err(|e| Error::parse(format!(\"Failed to parse release JSON: {}\", e)))?;",
          "",
          "        // Parse version from tag",
          "        release.version = self.parse_version_from_tag(&release.tag_name)?;",
          "",
          "        Ok(release)",
          "    }",
          "",
          "    /// Get multiple recent releases",
          "    pub async fn get_releases(&self, count: usize) -> Result<Vec<GitHubRelease>> {",
          "        let url = format!(",
          "            \"{}/repos/{}/{}/releases?per_page={}\",",
          "            GITHUB_API_BASE, RUST_REPO_OWNER, RUST_REPO_NAME, count",
          "        );",
          "",
          "        let mut request = self",
          "            .client",
          "            .get(&url)",
          "            .header(\"Accept\", \"application/vnd.github.v3+json\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 83: Control flow statement",
          "Line 93: Control flow statement",
          "Line 104: Control flow statement",
          "Line 134: Control flow statement",
          "Line 143: Control flow statement",
          "Line 154: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 31: Error handling point",
          "Line 66: Error handling point",
          "Line 90: Error handling point",
          "Line 114: Error handling point",
          "Line 117: Error handling point",
          "Line 125: Error handling point",
          "Line 141: Error handling point",
          "Line 164: Error handling point",
          "Line 168: Error handling point",
          "Line 190: Error handling point",
          "Line 193: Error handling point",
          "Line 198: Error handling point",
          "Line 206: Error handling point",
          "Line 207: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/github.rs",
        "line": 207,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_get_latest_release",
        "function_signature": "async fn test_get_latest_release() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "/// Simplified author information",
        "surrounding_code": [
          "            client.parse_version_from_tag(\"v1.90.0\").unwrap(),",
          "            Version::new(1, 90, 0)",
          "        );",
          "    }",
          "",
          "    #[tokio::test]",
          "    #[ignore] // Requires network access",
          "    async fn test_get_latest_release() {",
          "        let client = GitHubClient::new(None)?;",
          "        let release = client.get_latest_release().await.unwrap();",
          "",
          "        assert!(!release.tag_name.is_empty());",
          "        assert!(release.version.major >= 1);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 207: Variable 'release' used"
        ],
        "control_flow": [
          "Line 83: Control flow statement",
          "Line 93: Control flow statement",
          "Line 104: Control flow statement",
          "Line 134: Control flow statement",
          "Line 143: Control flow statement",
          "Line 154: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use reqwest::Client;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 29: Error handling point",
          "Line 31: Error handling point",
          "Line 66: Error handling point",
          "Line 90: Error handling point",
          "Line 114: Error handling point",
          "Line 117: Error handling point",
          "Line 125: Error handling point",
          "Line 141: Error handling point",
          "Line 164: Error handling point",
          "Line 168: Error handling point",
          "Line 190: Error handling point",
          "Line 193: Error handling point",
          "Line 198: Error handling point",
          "Line 206: Error handling point",
          "Line 207: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/rust_version/mod.rs",
        "line": 34,
        "message": "Function has 54 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "fmt",
        "function_signature": "fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
        "return_type": "std::fmt::Result {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for Channel {",
        "surrounding_code": [
          "    /// Beta releases",
          "    Beta,",
          "    /// Nightly builds",
          "    Nightly,",
          "    /// Custom or unknown channel",
          "    Custom(String),",
          "}",
          "",
          "impl std::fmt::Display for Channel {",
          "    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {",
          "        match self {",
          "            Self::Stable => write!(f, \"stable\"),",
          "            Self::Beta => write!(f, \"beta\"),",
          "            Self::Nightly => write!(f, \"nightly\"),",
          "            Self::Custom(s) => write!(f, \"{}\", s),",
          "        }",
          "    }",
          "}",
          "",
          "/// Version update recommendation"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::sync::Arc;",
          "use std::time::Duration;",
          "use tokio::sync::RwLock;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 110: Control flow statement",
          "Line 111: Control flow statement",
          "Line 121: Control flow statement",
          "Line 135: Control flow statement",
          "Line 139: Control flow statement",
          "Line 143: Control flow statement",
          "Line 152: Control flow statement",
          "Line 153: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::sync::RwLock;",
          "    use super::*;",
          "Trait implementation",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 89: Error handling point",
          "Line 118: Error handling point",
          "Line 131: Error handling point",
          "Line 132: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/bypass.rs",
        "line": 124,
        "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_active_bypass",
        "function_signature": "pub async fn check_active_bypass(&self, stage: PipelineStage) -> Result<Option<ActiveBypass>> {",
        "return_type": "Result<Option<ActiveBypass>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        }",
          "",
          "        let contents = fs::read_to_string(&bypass_path).await?;",
          "        let bypass: ActiveBypass = serde_json::from_str(&contents)",
          "            .map_err(|e| Error::parse(format!(\"Failed to parse bypass: {}\", e)))?;",
          "",
          "        // Check if bypass has expired",
          "        if Utc::now() > bypass.expires_at {",
          "            // Remove expired bypass",
          "            let _ = fs::remove_file(&bypass_path).await;",
          "            return Ok(None);",
          "        }",
          "",
          "        Ok(Some(bypass))",
          "    }",
          "",
          "    /// Remove an active bypass",
          "    pub async fn remove_bypass(&self, stage: PipelineStage) -> Result<()> {",
          "        let bypass_path = self.get_active_bypass_path(stage)?;",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [
          "Line 124: Variable '_' used"
        ],
        "control_flow": [
          "Line 54: Control flow statement",
          "Line 67: Control flow statement",
          "Line 71: Control flow statement",
          "Line 76: Control flow statement",
          "Line 78: Control flow statement",
          "Line 98: Control flow statement",
          "Line 107: Control flow statement",
          "Line 113: Control flow statement",
          "Line 121: Control flow statement",
          "Line 122: Control flow statement",
          "Line 135: Control flow statement",
          "Line 146: Control flow statement",
          "Line 180: Control flow statement",
          "Line 196: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 77: Error handling point",
          "Line 95: Error handling point",
          "Line 99: Error handling point",
          "Line 111: Error handling point",
          "Line 117: Error handling point",
          "Line 119: Error handling point",
          "Line 133: Error handling point",
          "Line 136: Error handling point",
          "Line 144: Error handling point",
          "Line 150: Error handling point",
          "Line 166: Error handling point",
          "Line 178: Error handling point",
          "Line 181: Error handling point",
          "Line 185: Error handling point",
          "Line 187: Error handling point",
          "Line 194: Error handling point",
          "Line 197: Error handling point",
          "Line 209: Error handling point",
          "Line 213: Error handling point",
          "Line 221: Error handling point",
          "Line 228: Error handling point",
          "Line 236: Error handling point",
          "Line 256: Error handling point",
          "Line 270: Error handling point",
          "Line 280: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/bypass.rs",
        "line": 256,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_bypass_manager_creation",
        "function_signature": "fn test_bypass_manager_creation() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    fn test_bypass_manager_creation() {",
          "        let config = BypassConfig {",
          "            enabled: true,",
          "            require_reason: true,",
          "            require_confirmation: true,",
          "            log_bypasses: true,",
          "            max_bypasses_per_day: 3,",
          "        };",
          "",
          "        let manager = BypassManager::new(&config).unwrap();",
          "        assert!(manager.is_enabled());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_bypass_creation() {",
          "        let config = BypassConfig {",
          "            enabled: true,",
          "            require_reason: true,",
          "            require_confirmation: false,",
          "            log_bypasses: false,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 256: Variable 'manager' used",
          "Line 270: Variable 'manager' used"
        ],
        "control_flow": [
          "Line 54: Control flow statement",
          "Line 67: Control flow statement",
          "Line 71: Control flow statement",
          "Line 76: Control flow statement",
          "Line 78: Control flow statement",
          "Line 98: Control flow statement",
          "Line 107: Control flow statement",
          "Line 113: Control flow statement",
          "Line 121: Control flow statement",
          "Line 122: Control flow statement",
          "Line 135: Control flow statement",
          "Line 146: Control flow statement",
          "Line 180: Control flow statement",
          "Line 196: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 77: Error handling point",
          "Line 95: Error handling point",
          "Line 99: Error handling point",
          "Line 111: Error handling point",
          "Line 117: Error handling point",
          "Line 119: Error handling point",
          "Line 133: Error handling point",
          "Line 136: Error handling point",
          "Line 144: Error handling point",
          "Line 150: Error handling point",
          "Line 166: Error handling point",
          "Line 178: Error handling point",
          "Line 181: Error handling point",
          "Line 185: Error handling point",
          "Line 187: Error handling point",
          "Line 194: Error handling point",
          "Line 197: Error handling point",
          "Line 209: Error handling point",
          "Line 213: Error handling point",
          "Line 221: Error handling point",
          "Line 228: Error handling point",
          "Line 236: Error handling point",
          "Line 256: Error handling point",
          "Line 270: Error handling point",
          "Line 280: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/bypass.rs",
        "line": 270,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_bypass_creation",
        "function_signature": "async fn test_bypass_creation() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    async fn test_bypass_creation() {",
          "        let config = BypassConfig {",
          "            enabled: true,",
          "            require_reason: true,",
          "            require_confirmation: false,",
          "            log_bypasses: false,",
          "            max_bypasses_per_day: 0, // No limit",
          "        };",
          "",
          "        let manager = BypassManager::new(&config).unwrap();",
          "",
          "        let bypass = manager",
          "            .create_bypass(",
          "                PipelineStage::PreCommit,",
          "                \"test reason\".to_string(),",
          "                \"test_user\".to_string(),",
          "                1, // 1 hour",
          "            )",
          "            .await",
          "            .unwrap();"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 256: Variable 'manager' used",
          "Line 270: Variable 'manager' used"
        ],
        "control_flow": [
          "Line 54: Control flow statement",
          "Line 67: Control flow statement",
          "Line 71: Control flow statement",
          "Line 76: Control flow statement",
          "Line 78: Control flow statement",
          "Line 98: Control flow statement",
          "Line 107: Control flow statement",
          "Line 113: Control flow statement",
          "Line 121: Control flow statement",
          "Line 122: Control flow statement",
          "Line 135: Control flow statement",
          "Line 146: Control flow statement",
          "Line 180: Control flow statement",
          "Line 196: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 77: Error handling point",
          "Line 95: Error handling point",
          "Line 99: Error handling point",
          "Line 111: Error handling point",
          "Line 117: Error handling point",
          "Line 119: Error handling point",
          "Line 133: Error handling point",
          "Line 136: Error handling point",
          "Line 144: Error handling point",
          "Line 150: Error handling point",
          "Line 166: Error handling point",
          "Line 178: Error handling point",
          "Line 181: Error handling point",
          "Line 185: Error handling point",
          "Line 187: Error handling point",
          "Line 194: Error handling point",
          "Line 197: Error handling point",
          "Line 209: Error handling point",
          "Line 213: Error handling point",
          "Line 221: Error handling point",
          "Line 228: Error handling point",
          "Line 236: Error handling point",
          "Line 256: Error handling point",
          "Line 270: Error handling point",
          "Line 280: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/bypass.rs",
        "line": 280,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_bypass_creation",
        "function_signature": "async fn test_bypass_creation() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        let bypass = manager",
          "            .create_bypass(",
          "                PipelineStage::PreCommit,",
          "                \"test reason\".to_string(),",
          "                \"test_user\".to_string(),",
          "                1, // 1 hour",
          "            )",
          "            .await",
          "            .unwrap();",
          "",
          "        assert_eq!(bypass.stage, PipelineStage::PreCommit);",
          "        assert_eq!(bypass.reason, \"test reason\");",
          "        assert_eq!(bypass.user, \"test_user\");",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 54: Control flow statement",
          "Line 67: Control flow statement",
          "Line 71: Control flow statement",
          "Line 76: Control flow statement",
          "Line 78: Control flow statement",
          "Line 98: Control flow statement",
          "Line 107: Control flow statement",
          "Line 113: Control flow statement",
          "Line 121: Control flow statement",
          "Line 122: Control flow statement",
          "Line 135: Control flow statement",
          "Line 146: Control flow statement",
          "Line 180: Control flow statement",
          "Line 196: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use chrono::{DateTime, Utc};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{config::BypassConfig, PipelineStage};",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 77: Error handling point",
          "Line 95: Error handling point",
          "Line 99: Error handling point",
          "Line 111: Error handling point",
          "Line 117: Error handling point",
          "Line 119: Error handling point",
          "Line 133: Error handling point",
          "Line 136: Error handling point",
          "Line 144: Error handling point",
          "Line 150: Error handling point",
          "Line 166: Error handling point",
          "Line 178: Error handling point",
          "Line 181: Error handling point",
          "Line 185: Error handling point",
          "Line 187: Error handling point",
          "Line 194: Error handling point",
          "Line 197: Error handling point",
          "Line 209: Error handling point",
          "Line 213: Error handling point",
          "Line 221: Error handling point",
          "Line 228: Error handling point",
          "Line 236: Error handling point",
          "Line 256: Error handling point",
          "Line 270: Error handling point",
          "Line 280: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/audit.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for AuditCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Audit check implementation",
          "pub struct AuditCheck;",
          "",
          "impl SafetyCheck for AuditCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"audit\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Scans for security vulnerabilities in dependencies\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 66: Control flow statement",
          "Line 70: Control flow statement",
          "Line 75: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 50: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/audit.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for AuditCheck {",
        "surrounding_code": [
          "        \"audit\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Scans for security vulnerabilities in dependencies\"",
          "    }",
          "}",
          "",
          "/// Run cargo audit",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Audit);",
          "",
          "    // Check if cargo-audit is available",
          "    let audit_check = Command::new(\"cargo\").args(&[\"audit\", \"--version\"]).output();",
          "",
          "    if audit_check",
          "        .as_ref()",
          "        .map_or(true, |output| !output.status.success())",
          "    {"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 66: Control flow statement",
          "Line 70: Control flow statement",
          "Line 75: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 50: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/audit.rs",
        "line": 29,
        "message": "Function has 65 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for AuditCheck {",
        "surrounding_code": [
          "        \"audit\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Scans for security vulnerabilities in dependencies\"",
          "    }",
          "}",
          "",
          "/// Run cargo audit",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Audit);",
          "",
          "    // Check if cargo-audit is available",
          "    let audit_check = Command::new(\"cargo\").args(&[\"audit\", \"--version\"]).output();",
          "",
          "    if audit_check",
          "        .as_ref()",
          "        .map_or(true, |output| !output.status.success())",
          "    {"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 36: Control flow statement",
          "Line 54: Control flow statement",
          "Line 65: Control flow statement",
          "Line 66: Control flow statement",
          "Line 70: Control flow statement",
          "Line 75: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 50: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/build.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for BuildCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Build check implementation",
          "pub struct BuildCheck;",
          "",
          "impl SafetyCheck for BuildCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"build\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Ensures project builds successfully in release mode\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 91: Error handling point",
          "Line 102: Error handling point",
          "Line 107: Error handling point",
          "Line 116: Error handling point",
          "Line 118: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/build.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for BuildCheck {",
        "surrounding_code": [
          "        \"build\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Ensures project builds successfully in release mode\"",
          "    }",
          "}",
          "",
          "/// Run cargo build --release",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Build);",
          "",
          "    // Run cargo build --release",
          "    let output = Command::new(\"cargo\")",
          "        .current_dir(project_path)",
          "        .args(&[\"build\", \"--release\"])",
          "        .output()?;",
          "",
          "    result.set_duration(start.elapsed());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 91: Error handling point",
          "Line 102: Error handling point",
          "Line 107: Error handling point",
          "Line 116: Error handling point",
          "Line 118: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/build.rs",
        "line": 29,
        "message": "Function has 61 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for BuildCheck {",
        "surrounding_code": [
          "        \"build\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Ensures project builds successfully in release mode\"",
          "    }",
          "}",
          "",
          "/// Run cargo build --release",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Build);",
          "",
          "    // Run cargo build --release",
          "    let output = Command::new(\"cargo\")",
          "        .current_dir(project_path)",
          "        .args(&[\"build\", \"--release\"])",
          "        .output()?;",
          "",
          "    result.set_duration(start.elapsed());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 91: Error handling point",
          "Line 102: Error handling point",
          "Line 107: Error handling point",
          "Line 116: Error handling point",
          "Line 118: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/build.rs",
        "line": 116,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "let main_rs = r#\"fn main() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for BuildCheck {",
        "surrounding_code": [
          "            .unwrap();",
          "",
          "        // Create a valid main.rs",
          "        let main_rs = r#\"fn main() {",
          "    println!(\"Hello, world!\");",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/main.rs\"), main_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for valid code",
          "        assert!(result.passed);",
          "    }",
          "",
          "    #[test]",
          "    fn test_build_check_struct() {",
          "        assert_eq!(BuildCheck::name(), \"build\");"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 91: Error handling point",
          "Line 102: Error handling point",
          "Line 107: Error handling point",
          "Line 116: Error handling point",
          "Line 118: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/build.rs",
        "line": 118,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "let main_rs = r#\"fn main() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for BuildCheck {",
        "surrounding_code": [
          "        // Create a valid main.rs",
          "        let main_rs = r#\"fn main() {",
          "    println!(\"Hello, world!\");",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/main.rs\"), main_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for valid code",
          "        assert!(result.passed);",
          "    }",
          "",
          "    #[test]",
          "    fn test_build_check_struct() {",
          "        assert_eq!(BuildCheck::name(), \"build\");",
          "        assert!(!BuildCheck::description().is_empty());",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 118: Variable 'result' used"
        ],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 91: Error handling point",
          "Line 102: Error handling point",
          "Line 107: Error handling point",
          "Line 116: Error handling point",
          "Line 118: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/clippy.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for ClippyCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Clippy check implementation",
          "pub struct ClippyCheck;",
          "",
          "impl SafetyCheck for ClippyCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"clippy\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Runs clippy lints with strict warnings\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 38: Control flow statement",
          "Line 63: Control flow statement",
          "Line 73: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 91: Control flow statement",
          "Line 146: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 59: Error handling point",
          "Line 116: Error handling point",
          "Line 127: Error handling point",
          "Line 132: Error handling point",
          "Line 141: Error handling point",
          "Line 143: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/clippy.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for ClippyCheck {",
        "surrounding_code": [
          "        \"clippy\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Runs clippy lints with strict warnings\"",
          "    }",
          "}",
          "",
          "/// Run cargo clippy with strict warnings",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Clippy);",
          "",
          "    // Check if clippy is available",
          "    let clippy_check = Command::new(\"cargo\")",
          "        .args(&[\"clippy\", \"--version\"])",
          "        .output();",
          "",
          "    if clippy_check",
          "        .as_ref()"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 38: Control flow statement",
          "Line 63: Control flow statement",
          "Line 73: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 91: Control flow statement",
          "Line 146: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 59: Error handling point",
          "Line 116: Error handling point",
          "Line 127: Error handling point",
          "Line 132: Error handling point",
          "Line 141: Error handling point",
          "Line 143: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/clippy.rs",
        "line": 29,
        "message": "Function has 86 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for ClippyCheck {",
        "surrounding_code": [
          "        \"clippy\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Runs clippy lints with strict warnings\"",
          "    }",
          "}",
          "",
          "/// Run cargo clippy with strict warnings",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Clippy);",
          "",
          "    // Check if clippy is available",
          "    let clippy_check = Command::new(\"cargo\")",
          "        .args(&[\"clippy\", \"--version\"])",
          "        .output();",
          "",
          "    if clippy_check",
          "        .as_ref()"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 38: Control flow statement",
          "Line 63: Control flow statement",
          "Line 73: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 91: Control flow statement",
          "Line 146: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 59: Error handling point",
          "Line 116: Error handling point",
          "Line 127: Error handling point",
          "Line 132: Error handling point",
          "Line 141: Error handling point",
          "Line 143: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/clippy.rs",
        "line": 141,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "let main_rs = r#\"fn main() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for ClippyCheck {",
        "surrounding_code": [
          "            .unwrap();",
          "",
          "        // Create a clean main.rs",
          "        let main_rs = r#\"fn main() {",
          "    println!(\"Hello, world!\");",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/main.rs\"), main_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let _result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for clean code (assuming clippy is available)",
          "        // Note: This might fail in CI if clippy isn't available",
          "    }",
          "",
          "    #[test]",
          "    fn test_clippy_check_struct() {",
          "        assert_eq!(ClippyCheck::name(), \"clippy\");"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 38: Control flow statement",
          "Line 63: Control flow statement",
          "Line 73: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 91: Control flow statement",
          "Line 146: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 59: Error handling point",
          "Line 116: Error handling point",
          "Line 127: Error handling point",
          "Line 132: Error handling point",
          "Line 141: Error handling point",
          "Line 143: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/clippy.rs",
        "line": 143,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "let main_rs = r#\"fn main() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for ClippyCheck {",
        "surrounding_code": [
          "        // Create a clean main.rs",
          "        let main_rs = r#\"fn main() {",
          "    println!(\"Hello, world!\");",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/main.rs\"), main_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let _result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for clean code (assuming clippy is available)",
          "        // Note: This might fail in CI if clippy isn't available",
          "    }",
          "",
          "    #[test]",
          "    fn test_clippy_check_struct() {",
          "        assert_eq!(ClippyCheck::name(), \"clippy\");",
          "        assert!(!ClippyCheck::description().is_empty());",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 143: Variable '_result' used"
        ],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 38: Control flow statement",
          "Line 63: Control flow statement",
          "Line 73: Control flow statement",
          "Line 77: Control flow statement",
          "Line 81: Control flow statement",
          "Line 91: Control flow statement",
          "Line 146: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 59: Error handling point",
          "Line 116: Error handling point",
          "Line 127: Error handling point",
          "Line 132: Error handling point",
          "Line 141: Error handling point",
          "Line 143: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/doc.rs",
        "line": 14,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for DocCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Doc check implementation",
          "pub struct DocCheck;",
          "",
          "impl SafetyCheck for DocCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"doc\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Builds project documentation\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/doc.rs",
        "line": 28,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(_project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for DocCheck {",
        "surrounding_code": [
          "        \"doc\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Builds project documentation\"",
          "    }",
          "}",
          "",
          "/// Run documentation build check (placeholder)",
          "pub async fn run(_project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Doc);",
          "    result.set_duration(start.elapsed());",
          "    result.add_context(\"Documentation check placeholder - always passes\");",
          "    Ok(result)",
          "}",
          "",
          "/// Check documentation coverage (placeholder)",
          "pub async fn coverage_check(_project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/doc.rs",
        "line": 37,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "coverage_check",
        "function_signature": "pub async fn coverage_check(_project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for DocCheck {",
        "surrounding_code": [
          "pub async fn run(_project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Doc);",
          "    result.set_duration(start.elapsed());",
          "    result.add_context(\"Documentation check placeholder - always passes\");",
          "    Ok(result)",
          "}",
          "",
          "/// Check documentation coverage (placeholder)",
          "pub async fn coverage_check(_project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::DocCoverage);",
          "    result.set_duration(start.elapsed());",
          "    result.add_context(\"Documentation coverage check placeholder - always passes\");",
          "    Ok(result)",
          "}"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/format.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for FormatCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Format check implementation",
          "pub struct FormatCheck;",
          "",
          "impl SafetyCheck for FormatCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"format\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates code formatting with rustfmt\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 34: Control flow statement",
          "Line 49: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 67: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 86: Error handling point",
          "Line 97: Error handling point",
          "Line 102: Error handling point",
          "Line 111: Error handling point",
          "Line 113: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/format.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for FormatCheck {",
        "surrounding_code": [
          "        \"format\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates code formatting with rustfmt\"",
          "    }",
          "}",
          "",
          "/// Run cargo fmt --check",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Format);",
          "",
          "    // Check if rustfmt is available",
          "    if which::which(\"cargo\").is_err() {",
          "        result.add_error(\"cargo not found in PATH\");",
          "        result.add_suggestion(\"Install Rust and cargo from https://rustup.rs\");",
          "        result.set_duration(start.elapsed());",
          "        return Ok(result);",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 34: Control flow statement",
          "Line 49: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 67: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 86: Error handling point",
          "Line 97: Error handling point",
          "Line 102: Error handling point",
          "Line 111: Error handling point",
          "Line 113: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/format.rs",
        "line": 29,
        "message": "Function has 56 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for FormatCheck {",
        "surrounding_code": [
          "        \"format\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates code formatting with rustfmt\"",
          "    }",
          "}",
          "",
          "/// Run cargo fmt --check",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Format);",
          "",
          "    // Check if rustfmt is available",
          "    if which::which(\"cargo\").is_err() {",
          "        result.add_error(\"cargo not found in PATH\");",
          "        result.add_suggestion(\"Install Rust and cargo from https://rustup.rs\");",
          "        result.set_duration(start.elapsed());",
          "        return Ok(result);",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 34: Control flow statement",
          "Line 49: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 67: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 86: Error handling point",
          "Line 97: Error handling point",
          "Line 102: Error handling point",
          "Line 111: Error handling point",
          "Line 113: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/format.rs",
        "line": 111,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "let main_rs = r#\"fn main() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for FormatCheck {",
        "surrounding_code": [
          "            .unwrap();",
          "",
          "        // Create a properly formatted main.rs",
          "        let main_rs = r#\"fn main() {",
          "    println!(\"Hello, world!\");",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/main.rs\"), main_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for properly formatted code",
          "        assert!(result.passed);",
          "        assert!(result.errors.is_empty());",
          "    }",
          "",
          "    #[test]",
          "    fn test_format_check_struct() {"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 34: Control flow statement",
          "Line 49: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 67: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 86: Error handling point",
          "Line 97: Error handling point",
          "Line 102: Error handling point",
          "Line 111: Error handling point",
          "Line 113: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/format.rs",
        "line": 113,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "let main_rs = r#\"fn main() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for FormatCheck {",
        "surrounding_code": [
          "        // Create a properly formatted main.rs",
          "        let main_rs = r#\"fn main() {",
          "    println!(\"Hello, world!\");",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/main.rs\"), main_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for properly formatted code",
          "        assert!(result.passed);",
          "        assert!(result.errors.is_empty());",
          "    }",
          "",
          "    #[test]",
          "    fn test_format_check_struct() {",
          "        assert_eq!(FormatCheck::name(), \"format\");",
          "        assert!(!FormatCheck::description().is_empty());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 113: Variable 'result' used"
        ],
        "control_flow": [
          "Line 33: Control flow statement",
          "Line 34: Control flow statement",
          "Line 49: Control flow statement",
          "Line 59: Control flow statement",
          "Line 61: Control flow statement",
          "Line 67: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 45: Error handling point",
          "Line 86: Error handling point",
          "Line 97: Error handling point",
          "Line 102: Error handling point",
          "Line 111: Error handling point",
          "Line 113: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/license.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for LicenseCheck {",
        "surrounding_code": [
          "use tokio::fs;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// License check implementation",
          "pub struct LicenseCheck;",
          "",
          "impl SafetyCheck for LicenseCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"license\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates license compatibility and presence\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 36: Control flow statement",
          "Line 59: Control flow statement",
          "Line 62: Control flow statement",
          "Line 63: Control flow statement",
          "Line 76: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 100: Control flow statement",
          "Line 113: Control flow statement",
          "Line 123: Control flow statement",
          "Line 166: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 42: Error handling point",
          "Line 44: Error handling point",
          "Line 139: Error handling point",
          "Line 153: Error handling point",
          "Line 161: Error handling point",
          "Line 163: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/license.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for LicenseCheck {",
        "surrounding_code": [
          "        \"license\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates license compatibility and presence\"",
          "    }",
          "}",
          "",
          "/// Validate license configuration",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::License);",
          "",
          "    // Check Cargo.toml for license field",
          "    let cargo_toml_path = project_path.join(\"Cargo.toml\");",
          "",
          "    if !cargo_toml_path.exists() {",
          "        result.add_error(\"Cargo.toml not found\");",
          "        result.set_duration(start.elapsed());",
          "        return Ok(result);"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 36: Control flow statement",
          "Line 59: Control flow statement",
          "Line 62: Control flow statement",
          "Line 63: Control flow statement",
          "Line 76: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 100: Control flow statement",
          "Line 113: Control flow statement",
          "Line 123: Control flow statement",
          "Line 166: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 42: Error handling point",
          "Line 44: Error handling point",
          "Line 139: Error handling point",
          "Line 153: Error handling point",
          "Line 161: Error handling point",
          "Line 163: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/license.rs",
        "line": 29,
        "message": "Function has 109 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for LicenseCheck {",
        "surrounding_code": [
          "        \"license\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates license compatibility and presence\"",
          "    }",
          "}",
          "",
          "/// Validate license configuration",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::License);",
          "",
          "    // Check Cargo.toml for license field",
          "    let cargo_toml_path = project_path.join(\"Cargo.toml\");",
          "",
          "    if !cargo_toml_path.exists() {",
          "        result.add_error(\"Cargo.toml not found\");",
          "        result.set_duration(start.elapsed());",
          "        return Ok(result);"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 36: Control flow statement",
          "Line 59: Control flow statement",
          "Line 62: Control flow statement",
          "Line 63: Control flow statement",
          "Line 76: Control flow statement",
          "Line 87: Control flow statement",
          "Line 88: Control flow statement",
          "Line 100: Control flow statement",
          "Line 113: Control flow statement",
          "Line 123: Control flow statement",
          "Line 166: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 42: Error handling point",
          "Line 44: Error handling point",
          "Line 139: Error handling point",
          "Line 153: Error handling point",
          "Line 161: Error handling point",
          "Line 163: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/mod.rs",
        "line": 27,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult>;",
        "return_type": "Result<CheckResult>;",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "/// Trait for implementing safety checks",
        "surrounding_code": [
          "pub mod semver;",
          "pub mod standards;",
          "pub mod test;",
          "pub mod test_runner;",
          "",
          "/// Trait for implementing safety checks",
          "#[allow(async_fn_in_trait)]",
          "pub trait SafetyCheck {",
          "    /// Run the safety check",
          "    async fn run(project_path: &Path) -> Result<CheckResult>;",
          "",
          "    /// Get the name of this check",
          "    fn name() -> &'static str;",
          "",
          "    /// Get a description of what this check does",
          "    fn description() -> &'static str;",
          "}",
          "",
          "/// Registry of all available safety checks",
          "pub struct CheckRegistry;"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use super::report::CheckResult;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 59: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::report::CheckResult;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/mod.rs",
        "line": 58,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "get_description",
        "function_signature": "pub fn get_description(check_type: super::CheckType) -> &'static str {",
        "return_type": "&'static str {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "/// Trait for implementing safety checks",
        "surrounding_code": [
          "            super::CheckType::PublishDryRun,",
          "            super::CheckType::Standards,",
          "            super::CheckType::DocCoverage,",
          "            super::CheckType::License,",
          "            super::CheckType::Semver,",
          "        ]",
          "    }",
          "",
          "    /// Get description for a check type",
          "    pub fn get_description(check_type: super::CheckType) -> &'static str {",
          "        match check_type {",
          "            super::CheckType::Format => \"Validates code formatting with rustfmt\",",
          "            super::CheckType::Clippy => \"Runs clippy lints with strict warnings\",",
          "            super::CheckType::Build => \"Ensures project builds successfully\",",
          "            super::CheckType::Test => \"Runs the complete test suite\",",
          "            super::CheckType::Audit => \"Scans for security vulnerabilities\",",
          "            super::CheckType::Doc => \"Builds project documentation\",",
          "            super::CheckType::PublishDryRun => \"Validates crates.io publication\",",
          "            super::CheckType::Standards => \"Validates Ferrous Forge standards\",",
          "            super::CheckType::DocCoverage => \"Checks documentation coverage\","
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use super::report::CheckResult;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 59: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::report::CheckResult;",
          "Trait implementation"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/publish.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for PublishCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Publish dry run check implementation",
          "pub struct PublishCheck;",
          "",
          "impl SafetyCheck for PublishCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"publish\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates crates.io publication readiness\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/publish.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for PublishCheck {",
        "surrounding_code": [
          "        \"publish\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates crates.io publication readiness\"",
          "    }",
          "}",
          "",
          "/// Run cargo publish --dry-run",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::PublishDryRun);",
          "",
          "    // Run cargo publish --dry-run",
          "    let output = Command::new(\"cargo\")",
          "        .current_dir(project_path)",
          "        .args(&[\"publish\", \"--dry-run\"])",
          "        .output()?;",
          "",
          "    result.set_duration(start.elapsed());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/publish.rs",
        "line": 29,
        "message": "Function has 62 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for PublishCheck {",
        "surrounding_code": [
          "        \"publish\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates crates.io publication readiness\"",
          "    }",
          "}",
          "",
          "/// Run cargo publish --dry-run",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::PublishDryRun);",
          "",
          "    // Run cargo publish --dry-run",
          "    let output = Command::new(\"cargo\")",
          "        .current_dir(project_path)",
          "        .args(&[\"publish\", \"--dry-run\"])",
          "        .output()?;",
          "",
          "    result.set_duration(start.elapsed());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 50: Control flow statement",
          "Line 53: Control flow statement",
          "Line 58: Control flow statement",
          "Line 74: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/semver.rs",
        "line": 16,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for SemverCheck {",
        "surrounding_code": [
          "use tokio::fs;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Semver check implementation",
          "pub struct SemverCheck;",
          "",
          "impl SafetyCheck for SemverCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"semver\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Checks semantic versioning compliance\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 37: Control flow statement",
          "Line 55: Control flow statement",
          "Line 56: Control flow statement",
          "Line 61: Control flow statement",
          "Line 63: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 75: Control flow statement",
          "Line 95: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 43: Error handling point",
          "Line 45: Error handling point",
          "Line 115: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 136: Error handling point",
          "Line 147: Error handling point",
          "Line 149: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/semver.rs",
        "line": 30,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for SemverCheck {",
        "surrounding_code": [
          "        \"semver\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Checks semantic versioning compliance\"",
          "    }",
          "}",
          "",
          "/// Check semantic versioning compliance",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Semver);",
          "",
          "    // Read Cargo.toml",
          "    let cargo_toml_path = project_path.join(\"Cargo.toml\");",
          "",
          "    if !cargo_toml_path.exists() {",
          "        result.add_error(\"Cargo.toml not found\");",
          "        result.set_duration(start.elapsed());",
          "        return Ok(result);"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 37: Control flow statement",
          "Line 55: Control flow statement",
          "Line 56: Control flow statement",
          "Line 61: Control flow statement",
          "Line 63: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 75: Control flow statement",
          "Line 95: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 43: Error handling point",
          "Line 45: Error handling point",
          "Line 115: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 136: Error handling point",
          "Line 147: Error handling point",
          "Line 149: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/semver.rs",
        "line": 30,
        "message": "Function has 84 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for SemverCheck {",
        "surrounding_code": [
          "        \"semver\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Checks semantic versioning compliance\"",
          "    }",
          "}",
          "",
          "/// Check semantic versioning compliance",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Semver);",
          "",
          "    // Read Cargo.toml",
          "    let cargo_toml_path = project_path.join(\"Cargo.toml\");",
          "",
          "    if !cargo_toml_path.exists() {",
          "        result.add_error(\"Cargo.toml not found\");",
          "        result.set_duration(start.elapsed());",
          "        return Ok(result);"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 37: Control flow statement",
          "Line 55: Control flow statement",
          "Line 56: Control flow statement",
          "Line 61: Control flow statement",
          "Line 63: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 75: Control flow statement",
          "Line 95: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 43: Error handling point",
          "Line 45: Error handling point",
          "Line 115: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 136: Error handling point",
          "Line 147: Error handling point",
          "Line 149: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/semver.rs",
        "line": 136,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_semver_check_with_invalid_version",
        "function_signature": "async fn test_semver_check_with_invalid_version() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for SemverCheck {",
        "surrounding_code": [
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass with valid version",
          "        assert!(result.passed);",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_semver_check_with_invalid_version() {",
          "        let temp_dir = TempDir::new().unwrap();",
          "",
          "        let cargo_toml = r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.0.0\"",
          "edition = \"2021\"",
          "\"#;",
          "",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), cargo_toml)",
          "            .await"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 115: Variable 'temp_dir' used",
          "Line 136: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 37: Control flow statement",
          "Line 55: Control flow statement",
          "Line 56: Control flow statement",
          "Line 61: Control flow statement",
          "Line 63: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 75: Control flow statement",
          "Line 95: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 43: Error handling point",
          "Line 45: Error handling point",
          "Line 115: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 136: Error handling point",
          "Line 147: Error handling point",
          "Line 149: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/semver.rs",
        "line": 147,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_semver_check_with_invalid_version",
        "function_signature": "async fn test_semver_check_with_invalid_version() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for SemverCheck {",
        "surrounding_code": [
          "        let cargo_toml = r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.0.0\"",
          "edition = \"2021\"",
          "\"#;",
          "",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), cargo_toml)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should fail with 0.0.0 version",
          "        assert!(!result.passed);",
          "    }",
          "",
          "    #[test]",
          "    fn test_semver_check_struct() {",
          "        assert_eq!(SemverCheck::name(), \"semver\");"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 37: Control flow statement",
          "Line 55: Control flow statement",
          "Line 56: Control flow statement",
          "Line 61: Control flow statement",
          "Line 63: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 75: Control flow statement",
          "Line 95: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 43: Error handling point",
          "Line 45: Error handling point",
          "Line 115: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 136: Error handling point",
          "Line 147: Error handling point",
          "Line 149: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/semver.rs",
        "line": 149,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_semver_check_with_invalid_version",
        "function_signature": "async fn test_semver_check_with_invalid_version() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for SemverCheck {",
        "surrounding_code": [
          "name = \"test\"",
          "version = \"0.0.0\"",
          "edition = \"2021\"",
          "\"#;",
          "",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), cargo_toml)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should fail with 0.0.0 version",
          "        assert!(!result.passed);",
          "    }",
          "",
          "    #[test]",
          "    fn test_semver_check_struct() {",
          "        assert_eq!(SemverCheck::name(), \"semver\");",
          "        assert!(!SemverCheck::description().is_empty());",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use semver::Version;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 128: Variable 'result' used",
          "Line 149: Variable 'result' used"
        ],
        "control_flow": [
          "Line 37: Control flow statement",
          "Line 55: Control flow statement",
          "Line 56: Control flow statement",
          "Line 61: Control flow statement",
          "Line 63: Control flow statement",
          "Line 67: Control flow statement",
          "Line 72: Control flow statement",
          "Line 75: Control flow statement",
          "Line 95: Control flow statement",
          "Line 98: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use semver::Version;",
          "use tokio::fs;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 43: Error handling point",
          "Line 45: Error handling point",
          "Line 115: Error handling point",
          "Line 126: Error handling point",
          "Line 128: Error handling point",
          "Line 136: Error handling point",
          "Line 147: Error handling point",
          "Line 149: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/standards.rs",
        "line": 14,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for StandardsCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Standards check implementation",
          "pub struct StandardsCheck;",
          "",
          "impl SafetyCheck for StandardsCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"standards\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates Ferrous Forge coding standards\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 34: Control flow statement",
          "Line 38: Control flow statement",
          "Line 51: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 33: Error handling point",
          "Line 46: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/standards.rs",
        "line": 28,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for StandardsCheck {",
        "surrounding_code": [
          "        \"standards\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Validates Ferrous Forge coding standards\"",
          "    }",
          "}",
          "",
          "/// Run Ferrous Forge standards validation",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Standards);",
          "",
          "    // Use the existing validation module",
          "    let validator = crate::validation::RustValidator::new(project_path.to_path_buf())?;",
          "    match validator.validate_project().await {",
          "        Ok(violations) => {",
          "            result.set_duration(start.elapsed());",
          "",
          "            if violations.is_empty() {"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 34: Control flow statement",
          "Line 38: Control flow statement",
          "Line 51: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 33: Error handling point",
          "Line 46: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test.rs",
        "line": 15,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for TestCheck {",
        "surrounding_code": [
          "use std::time::Instant;",
          "",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "",
          "/// Test check implementation",
          "pub struct TestCheck;",
          "",
          "impl SafetyCheck for TestCheck {",
          "    async fn run(project_path: &Path) -> Result<CheckResult> {",
          "        run(project_path).await",
          "    }",
          "",
          "    fn name() -> &'static str {",
          "        \"test\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Runs the complete test suite\"",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 53: Control flow statement",
          "Line 56: Control flow statement",
          "Line 58: Control flow statement",
          "Line 61: Control flow statement",
          "Line 66: Control flow statement",
          "Line 77: Control flow statement",
          "Line 83: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 100: Error handling point",
          "Line 111: Error handling point",
          "Line 116: Error handling point",
          "Line 136: Error handling point",
          "Line 138: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test.rs",
        "line": 29,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for TestCheck {",
        "surrounding_code": [
          "        \"test\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Runs the complete test suite\"",
          "    }",
          "}",
          "",
          "/// Run cargo test --all-targets --all-features",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Test);",
          "",
          "    // Run cargo test with comprehensive flags",
          "    let output = Command::new(\"cargo\")",
          "        .current_dir(project_path)",
          "        .args(&[\"test\", \"--all-targets\", \"--all-features\"])",
          "        .output()?;",
          "",
          "    result.set_duration(start.elapsed());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 53: Control flow statement",
          "Line 56: Control flow statement",
          "Line 58: Control flow statement",
          "Line 61: Control flow statement",
          "Line 66: Control flow statement",
          "Line 77: Control flow statement",
          "Line 83: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 100: Error handling point",
          "Line 111: Error handling point",
          "Line 116: Error handling point",
          "Line 136: Error handling point",
          "Line 138: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test.rs",
        "line": 29,
        "message": "Function has 70 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run",
        "function_signature": "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl SafetyCheck for TestCheck {",
        "surrounding_code": [
          "        \"test\"",
          "    }",
          "",
          "    fn description() -> &'static str {",
          "        \"Runs the complete test suite\"",
          "    }",
          "}",
          "",
          "/// Run cargo test --all-targets --all-features",
          "pub async fn run(project_path: &Path) -> Result<CheckResult> {",
          "    let start = Instant::now();",
          "    let mut result = CheckResult::new(CheckType::Test);",
          "",
          "    // Run cargo test with comprehensive flags",
          "    let output = Command::new(\"cargo\")",
          "        .current_dir(project_path)",
          "        .args(&[\"test\", \"--all-targets\", \"--all-features\"])",
          "        .output()?;",
          "",
          "    result.set_duration(start.elapsed());"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 53: Control flow statement",
          "Line 56: Control flow statement",
          "Line 58: Control flow statement",
          "Line 61: Control flow statement",
          "Line 66: Control flow statement",
          "Line 77: Control flow statement",
          "Line 83: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 100: Error handling point",
          "Line 111: Error handling point",
          "Line 116: Error handling point",
          "Line 136: Error handling point",
          "Line 138: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test.rs",
        "line": 136,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_add",
        "function_signature": "fn test_add() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for TestCheck {",
        "surrounding_code": [
          "    ",
          "    #[test]",
          "    fn test_add() {",
          "        assert_eq!(add(2, 2), 4);",
          "    }",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/lib.rs\"), lib_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for working tests",
          "        assert!(result.passed);",
          "    }",
          "",
          "    #[test]",
          "    fn test_test_check_struct() {",
          "        assert_eq!(TestCheck::name(), \"test\");"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 53: Control flow statement",
          "Line 56: Control flow statement",
          "Line 58: Control flow statement",
          "Line 61: Control flow statement",
          "Line 66: Control flow statement",
          "Line 77: Control flow statement",
          "Line 83: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 100: Error handling point",
          "Line 111: Error handling point",
          "Line 116: Error handling point",
          "Line 136: Error handling point",
          "Line 138: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test.rs",
        "line": 138,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_add",
        "function_signature": "fn test_add() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl SafetyCheck for TestCheck {",
        "surrounding_code": [
          "    fn test_add() {",
          "        assert_eq!(add(2, 2), 4);",
          "    }",
          "}",
          "\"#;",
          "        fs::write(temp_dir.path().join(\"src/lib.rs\"), lib_rs)",
          "            .await",
          "            .unwrap();",
          "",
          "        let result = run(temp_dir.path()).await.unwrap();",
          "",
          "        // Should pass for working tests",
          "        assert!(result.passed);",
          "    }",
          "",
          "    #[test]",
          "    fn test_test_check_struct() {",
          "        assert_eq!(TestCheck::name(), \"test\");",
          "        assert!(!TestCheck::description().is_empty());",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use std::process::Command;",
          "use std::time::Instant;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 138: Variable 'result' used"
        ],
        "control_flow": [
          "Line 41: Control flow statement",
          "Line 53: Control flow statement",
          "Line 56: Control flow statement",
          "Line 58: Control flow statement",
          "Line 61: Control flow statement",
          "Line 66: Control flow statement",
          "Line 77: Control flow statement",
          "Line 83: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::SafetyCheck;",
          "use crate::safety::{report::CheckResult, CheckType};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 37: Error handling point",
          "Line 100: Error handling point",
          "Line 111: Error handling point",
          "Line 116: Error handling point",
          "Line 136: Error handling point",
          "Line 138: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test_runner.rs",
        "line": 9,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_safety_checks",
        "function_signature": "pub async fn test_safety_checks(project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "//! Test runner for safety checks",
          "",
          "use crate::Result;",
          "use std::path::Path;",
          "",
          "use super::{build, clippy, format, standards};",
          "",
          "/// Run a quick test of the safety checks",
          "pub async fn test_safety_checks(project_path: &Path) -> Result<()> {",
          "    println!(\"🧪 Testing Safety Pipeline Checks\");",
          "    println!(\"==================================\");",
          "",
          "    // Test format check",
          "    println!(\"\\n📝 Testing Format Check...\");",
          "    match format::run(project_path).await {",
          "        Ok(result) => {",
          "            println!(",
          "                \"  {} Format Check ({:.2}s)\",",
          "                result.status_emoji(),"
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use super::{build, clippy, format, standards};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 15: Control flow statement",
          "Line 22: Control flow statement",
          "Line 33: Control flow statement",
          "Line 40: Control flow statement",
          "Line 51: Control flow statement",
          "Line 58: Control flow statement",
          "Line 69: Control flow statement",
          "Line 76: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::{build, clippy, format, standards};",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/checks/test_runner.rs",
        "line": 8,
        "message": "Function has 79 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "//! Test runner for safety checks",
          "",
          "use crate::Result;",
          "use std::path::Path;",
          "",
          "use super::{build, clippy, format, standards};",
          "",
          "/// Run a quick test of the safety checks",
          "pub async fn test_safety_checks(project_path: &Path) -> Result<()> {",
          "    println!(\"🧪 Testing Safety Pipeline Checks\");",
          "    println!(\"==================================\");",
          "",
          "    // Test format check",
          "    println!(\"\\n📝 Testing Format Check...\");",
          "    match format::run(project_path).await {",
          "        Ok(result) => {",
          "            println!(",
          "                \"  {} Format Check ({:.2}s)\","
        ],
        "imports": [
          "use crate::Result;",
          "use std::path::Path;",
          "use super::{build, clippy, format, standards};"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 15: Control flow statement",
          "Line 22: Control flow statement",
          "Line 33: Control flow statement",
          "Line 40: Control flow statement",
          "Line 51: Control flow statement",
          "Line 58: Control flow statement",
          "Line 69: Control flow statement",
          "Line 76: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use super::{build, clippy, format, standards};"
        ],
        "error_propagation": []
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/config.rs",
        "line": 307,
        "message": "File has 308 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_config_get_set",
        "function_signature": "fn test_config_get_set() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for SafetyConfig {",
        "surrounding_code": [
          "",
          "        assert_eq!(config.get(\"enabled\"), Some(\"true\".to_string()));",
          "",
          "        config.set(\"enabled\", \"false\").unwrap();",
          "        assert!(!config.enabled);",
          "        assert_eq!(config.get(\"enabled\"), Some(\"false\".to_string()));",
          "",
          "        config.set(\"pre_commit.timeout_seconds\", \"600\").unwrap();",
          "        assert_eq!(config.pre_commit.timeout_seconds, 600);",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use std::time::Duration;",
          "use tokio::fs;",
          "use super::{CheckType, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 97: Control flow statement",
          "Line 99: Control flow statement",
          "Line 123: Control flow statement",
          "Line 145: Control flow statement",
          "Line 154: Control flow statement",
          "Line 161: Control flow statement",
          "Line 174: Control flow statement",
          "Line 238: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{CheckType, PipelineStage};",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 107: Error handling point",
          "Line 110: Error handling point",
          "Line 113: Error handling point",
          "Line 120: Error handling point",
          "Line 124: Error handling point",
          "Line 128: Error handling point",
          "Line 132: Error handling point",
          "Line 139: Error handling point",
          "Line 178: Error handling point",
          "Line 183: Error handling point",
          "Line 188: Error handling point",
          "Line 193: Error handling point",
          "Line 198: Error handling point",
          "Line 203: Error handling point",
          "Line 208: Error handling point",
          "Line 213: Error handling point",
          "Line 218: Error handling point",
          "Line 223: Error handling point",
          "Line 228: Error handling point",
          "Line 301: Error handling point",
          "Line 305: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/config.rs",
        "line": 173,
        "message": "Function has 64 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "set",
        "function_signature": "pub fn set(&mut self, key: &str, value: &str) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": "impl Default for SafetyConfig {",
        "surrounding_code": [
          "        stage_config.enabled && stage_config.checks.contains(&check)",
          "    }",
          "",
          "    /// Get timeout for a specific stage",
          "    pub fn get_timeout(&self, stage: PipelineStage) -> Duration {",
          "        Duration::from_secs(self.get_stage_config(stage).timeout_seconds)",
          "    }",
          "",
          "    /// Set a configuration value",
          "    pub fn set(&mut self, key: &str, value: &str) -> Result<()> {",
          "        match key {",
          "            \"enabled\" => {",
          "                self.enabled = value",
          "                    .parse()",
          "                    .map_err(|_| Error::config(\"Invalid boolean value for enabled\"))?;",
          "            }",
          "            \"strict_mode\" => {",
          "                self.strict_mode = value",
          "                    .parse()",
          "                    .map_err(|_| Error::config(\"Invalid boolean value for strict_mode\"))?;"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "use std::time::Duration;",
          "use tokio::fs;",
          "use super::{CheckType, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 97: Control flow statement",
          "Line 99: Control flow statement",
          "Line 123: Control flow statement",
          "Line 145: Control flow statement",
          "Line 154: Control flow statement",
          "Line 161: Control flow statement",
          "Line 174: Control flow statement",
          "Line 238: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{CheckType, PipelineStage};",
          "    use super::*;",
          "Trait implementation",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 107: Error handling point",
          "Line 110: Error handling point",
          "Line 113: Error handling point",
          "Line 120: Error handling point",
          "Line 124: Error handling point",
          "Line 128: Error handling point",
          "Line 132: Error handling point",
          "Line 139: Error handling point",
          "Line 178: Error handling point",
          "Line 183: Error handling point",
          "Line 188: Error handling point",
          "Line 193: Error handling point",
          "Line 198: Error handling point",
          "Line 203: Error handling point",
          "Line 208: Error handling point",
          "Line 213: Error handling point",
          "Line 218: Error handling point",
          "Line 223: Error handling point",
          "Line 228: Error handling point",
          "Line 301: Error handling point",
          "Line 305: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/mod.rs",
        "line": 144,
        "message": "Function has 54 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "for_stage",
        "function_signature": "pub fn for_stage(stage: PipelineStage) -> Vec<Self> {",
        "return_type": "Vec<Self> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for PipelineStage {",
        "surrounding_code": [
          "            Self::PublishDryRun => \"Publish Dry Run\",",
          "            Self::Standards => \"Standards Check\",",
          "            Self::DocCoverage => \"Documentation Coverage\",",
          "            Self::License => \"License Check\",",
          "            Self::Semver => \"Semver Check\",",
          "        }",
          "    }",
          "",
          "    /// Get the checks for a specific pipeline stage",
          "    pub fn for_stage(stage: PipelineStage) -> Vec<Self> {",
          "        match stage {",
          "            PipelineStage::PreCommit => {",
          "                vec![Self::Format, Self::Clippy, Self::Build, Self::Standards]",
          "            }",
          "            PipelineStage::PrePush => vec![",
          "                Self::Format,",
          "                Self::Clippy,",
          "                Self::Build,",
          "                Self::Standards,",
          "                Self::Test,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::time::Duration;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Vec",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 36: Control flow statement",
          "Line 45: Control flow statement",
          "Line 54: Control flow statement",
          "Line 66: Control flow statement",
          "Line 111: Control flow statement",
          "Line 128: Control flow statement",
          "Line 145: Control flow statement",
          "Line 197: Control flow statement",
          "Line 204: Control flow statement",
          "Line 212: Control flow statement",
          "Line 219: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 246: Error handling point",
          "Line 250: Error handling point",
          "Line 254: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/pipeline.rs",
        "line": 25,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub async fn new(project_path: impl AsRef<Path>) -> Result<Self> {",
        "return_type": "Result<Self> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "/// Main safety pipeline coordinator",
          "pub struct SafetyPipeline {",
          "    config: SafetyConfig,",
          "    project_path: PathBuf,",
          "    bypass_manager: BypassManager,",
          "}",
          "",
          "impl SafetyPipeline {",
          "    /// Create a new safety pipeline",
          "    pub async fn new(project_path: impl AsRef<Path>) -> Result<Self> {",
          "        let config = SafetyConfig::load_or_default().await?;",
          "        let bypass_manager = BypassManager::new(&config.bypass)?;",
          "",
          "        Ok(Self {",
          "            config,",
          "            project_path: project_path.as_ref().to_path_buf(),",
          "            bypass_manager,",
          "        })",
          "    }",
          ""
        ],
        "imports": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use std::path::{Path, PathBuf};",
          "use std::time::{Duration, Instant};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 44: Control flow statement",
          "Line 53: Control flow statement",
          "Line 68: Control flow statement",
          "Line 81: Control flow statement",
          "Line 88: Control flow statement",
          "Line 91: Control flow statement",
          "Line 105: Control flow statement",
          "Line 126: Control flow statement",
          "Line 142: Control flow statement",
          "Line 185: Control flow statement",
          "Line 200: Control flow statement",
          "Line 219: Control flow statement",
          "Line 226: Control flow statement",
          "Line 248: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 27: Error handling point",
          "Line 71: Error handling point",
          "Line 75: Error handling point",
          "Line 91: Error handling point",
          "Line 100: Error handling point",
          "Line 140: Error handling point",
          "Line 245: Error handling point",
          "Line 255: Error handling point",
          "Line 256: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/safety/pipeline.rs",
        "line": 37,
        "message": "Function has 52 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run_checks",
        "function_signature": "pub async fn run_checks(&self, stage: PipelineStage) -> Result<SafetyReport> {",
        "return_type": "Result<SafetyReport> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        Ok(Self {",
          "            config,",
          "            project_path: project_path.as_ref().to_path_buf(),",
          "            bypass_manager,",
          "        })",
          "    }",
          "",
          "    /// Run safety checks for a specific stage",
          "    pub async fn run_checks(&self, stage: PipelineStage) -> Result<SafetyReport> {",
          "        if !self.config.enabled {",
          "            println!(\"⚠️  Safety pipeline is disabled\");",
          "            return Ok(SafetyReport::new(stage));",
          "        }",
          "",
          "        let stage_config = self.config.get_stage_config(stage);",
          "        if !stage_config.enabled {",
          "            println!(\"⚠️  {} stage is disabled\", stage.display_name());",
          "            return Ok(SafetyReport::new(stage));",
          "        }"
        ],
        "imports": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use std::path::{Path, PathBuf};",
          "use std::time::{Duration, Instant};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 44: Control flow statement",
          "Line 53: Control flow statement",
          "Line 68: Control flow statement",
          "Line 81: Control flow statement",
          "Line 88: Control flow statement",
          "Line 91: Control flow statement",
          "Line 105: Control flow statement",
          "Line 126: Control flow statement",
          "Line 142: Control flow statement",
          "Line 185: Control flow statement",
          "Line 200: Control flow statement",
          "Line 219: Control flow statement",
          "Line 226: Control flow statement",
          "Line 248: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 27: Error handling point",
          "Line 71: Error handling point",
          "Line 75: Error handling point",
          "Line 91: Error handling point",
          "Line 100: Error handling point",
          "Line 140: Error handling point",
          "Line 245: Error handling point",
          "Line 255: Error handling point",
          "Line 256: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/pipeline.rs",
        "line": 178,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run_single_check",
        "function_signature": "async fn run_single_check(&self, check_type: CheckType) -> Result<CheckResult> {",
        "return_type": "Result<CheckResult> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        _multi_progress: Option<&MultiProgress>,",
          "    ) -> Result<()> {",
          "        // For now, implement as sequential until we add proper parallel execution",
          "        // Parallel execution requires careful handling of stdout/stderr",
          "        self.run_checks_sequential(checks, report, _multi_progress)",
          "            .await",
          "    }",
          "",
          "    /// Run a single safety check",
          "    async fn run_single_check(&self, check_type: CheckType) -> Result<CheckResult> {",
          "        let stage_config = self",
          "            .config",
          "            .get_stage_config(self.get_stage_for_check(check_type));",
          "        let _check_timeout = Duration::from_secs(stage_config.timeout_seconds);",
          "",
          "        // Run the check with timeout",
          "        let check_result = match check_type {",
          "            CheckType::Format => checks::format::run(&self.project_path).await,",
          "            CheckType::Clippy => checks::clippy::run(&self.project_path).await,",
          "            CheckType::Build => checks::build::run(&self.project_path).await,"
        ],
        "imports": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use std::path::{Path, PathBuf};",
          "use std::time::{Duration, Instant};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 44: Control flow statement",
          "Line 53: Control flow statement",
          "Line 68: Control flow statement",
          "Line 81: Control flow statement",
          "Line 88: Control flow statement",
          "Line 91: Control flow statement",
          "Line 105: Control flow statement",
          "Line 126: Control flow statement",
          "Line 142: Control flow statement",
          "Line 185: Control flow statement",
          "Line 200: Control flow statement",
          "Line 219: Control flow statement",
          "Line 226: Control flow statement",
          "Line 248: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 27: Error handling point",
          "Line 71: Error handling point",
          "Line 75: Error handling point",
          "Line 91: Error handling point",
          "Line 100: Error handling point",
          "Line 140: Error handling point",
          "Line 245: Error handling point",
          "Line 255: Error handling point",
          "Line 256: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/pipeline.rs",
        "line": 212,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "get_stage_for_check",
        "function_signature": "fn get_stage_for_check(&self, check_type: CheckType) -> PipelineStage {",
        "return_type": "PipelineStage {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                let mut result = CheckResult::new(check_type);",
          "                result.add_error(format!(\"Check failed: {}\", e));",
          "                result.add_suggestion(\"Check the error message above for details\");",
          "                Ok(result)",
          "            }",
          "        }",
          "    }",
          "",
          "    /// Get the appropriate stage for a check type",
          "    fn get_stage_for_check(&self, check_type: CheckType) -> PipelineStage {",
          "        // Find the first stage that includes this check",
          "        for stage in [",
          "            PipelineStage::PreCommit,",
          "            PipelineStage::PrePush,",
          "            PipelineStage::Publish,",
          "        ] {",
          "            if CheckType::for_stage(stage).contains(&check_type) {",
          "                return stage;",
          "            }",
          "        }"
        ],
        "imports": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use std::path::{Path, PathBuf};",
          "use std::time::{Duration, Instant};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 38: Control flow statement",
          "Line 44: Control flow statement",
          "Line 53: Control flow statement",
          "Line 68: Control flow statement",
          "Line 81: Control flow statement",
          "Line 88: Control flow statement",
          "Line 91: Control flow statement",
          "Line 105: Control flow statement",
          "Line 126: Control flow statement",
          "Line 142: Control flow statement",
          "Line 185: Control flow statement",
          "Line 200: Control flow statement",
          "Line 219: Control flow statement",
          "Line 226: Control flow statement",
          "Line 248: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use indicatif::{MultiProgress, ProgressBar, ProgressStyle};",
          "use super::{",
          "    use super::*;",
          "    use tempfile::TempDir;"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 27: Error handling point",
          "Line 71: Error handling point",
          "Line 75: Error handling point",
          "Line 91: Error handling point",
          "Line 100: Error handling point",
          "Line 140: Error handling point",
          "Line 245: Error handling point",
          "Line 255: Error handling point",
          "Line 256: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/safety/report.rs",
        "line": 30,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(check_type: CheckType) -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    pub errors: Vec<String>,",
          "    /// Suggestions for fixing issues",
          "    pub suggestions: Vec<String>,",
          "    /// Additional context information",
          "    pub context: Vec<String>,",
          "}",
          "",
          "impl CheckResult {",
          "    /// Create a new check result",
          "    pub fn new(check_type: CheckType) -> Self {",
          "        Self {",
          "            check_type,",
          "            passed: true,",
          "            duration: Duration::default(),",
          "            errors: Vec::new(),",
          "            suggestions: Vec::new(),",
          "            context: Vec::new(),",
          "        }",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use std::time::Duration;",
          "use tokio::fs;",
          "use super::{CheckType, PipelineStage};",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 20: Control flow statement",
          "Line 69: Control flow statement",
          "Line 78: Control flow statement",
          "Line 115: Control flow statement",
          "Line 168: Control flow statement",
          "Line 184: Control flow statement",
          "Line 187: Control flow statement",
          "Line 201: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use console::style;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "use super::{CheckType, PipelineStage};",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 225: Error handling point",
          "Line 226: Error handling point",
          "Line 236: Error handling point",
          "Line 238: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/security.rs",
        "line": 91,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run_security_audit",
        "function_signature": "pub async fn run_security_audit(project_path: &Path) -> Result<AuditReport> {",
        "return_type": "Result<AuditReport> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                report.push('\\n');",
          "            }",
          "        }",
          "",
          "        report",
          "    }",
          "}",
          "",
          "/// Run security audit on a project",
          "pub async fn run_security_audit(project_path: &Path) -> Result<AuditReport> {",
          "    // Ensure cargo-audit is installed",
          "    ensure_cargo_audit_installed().await?;",
          "",
          "    // Run cargo audit with JSON output",
          "    let output = Command::new(\"cargo\")",
          "        .args(&[\"audit\", \"--json\"])",
          "        .current_dir(project_path)",
          "        .output()",
          "        .map_err(|e| Error::process(format!(\"Failed to run cargo audit: {}\", e)))?;",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 78: Control flow statement",
          "Line 110: Control flow statement",
          "Line 121: Control flow statement",
          "Line 136: Control flow statement",
          "Line 140: Control flow statement",
          "Line 142: Control flow statement",
          "Line 180: Control flow statement",
          "Line 188: Control flow statement",
          "Line 205: Control flow statement",
          "Line 207: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 93: Error handling point",
          "Line 100: Error handling point",
          "Line 119: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/security.rs",
        "line": 132,
        "message": "Function has 72 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_audit_output",
        "function_signature": "fn parse_audit_output(output: &[u8]) -> Result<AuditReport> {",
        "return_type": "Result<AuditReport> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "        }",
          "",
          "        println!(\"✅ cargo-audit installed successfully\");",
          "    }",
          "",
          "    Ok(())",
          "}",
          "",
          "/// Parse cargo audit JSON output",
          "fn parse_audit_output(output: &[u8]) -> Result<AuditReport> {",
          "    let output_str = String::from_utf8_lossy(output);",
          "",
          "    // Try to parse as JSON",
          "    if let Ok(json) = serde_json::from_str::<serde_json::Value>(&output_str) {",
          "        let mut vulnerabilities = Vec::new();",
          "",
          "        // Extract vulnerabilities from the JSON structure",
          "        if let Some(vulns) = json[\"vulnerabilities\"][\"list\"].as_array() {",
          "            for vuln in vulns {",
          "                if let Some(advisory) = vuln[\"advisory\"].as_object() {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 78: Control flow statement",
          "Line 110: Control flow statement",
          "Line 121: Control flow statement",
          "Line 136: Control flow statement",
          "Line 140: Control flow statement",
          "Line 142: Control flow statement",
          "Line 180: Control flow statement",
          "Line 188: Control flow statement",
          "Line 205: Control flow statement",
          "Line 207: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 93: Error handling point",
          "Line 100: Error handling point",
          "Line 119: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/security.rs",
        "line": 204,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "quick_security_check",
        "function_signature": "pub async fn quick_security_check(project_path: &Path) -> Result<bool> {",
        "return_type": "Result<bool> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                vulnerabilities: vec![],",
          "                dependencies_count: 0,",
          "                passed: vuln_count == 0,",
          "            })",
          "        }",
          "    }",
          "}",
          "",
          "/// Quick security check (non-blocking)",
          "pub async fn quick_security_check(project_path: &Path) -> Result<bool> {",
          "    // Check if Cargo.lock exists",
          "    let cargo_lock = project_path.join(\"Cargo.lock\");",
          "    if !cargo_lock.exists() {",
          "        return Ok(true); // No dependencies to check",
          "    }",
          "",
          "    // Run quick audit check",
          "    match run_security_audit(project_path).await {",
          "        Ok(report) => Ok(report.passed),",
          "        Err(_) => Ok(true), // Don't block on audit failures"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 35: Control flow statement",
          "Line 37: Control flow statement",
          "Line 46: Control flow statement",
          "Line 59: Control flow statement",
          "Line 78: Control flow statement",
          "Line 110: Control flow statement",
          "Line 121: Control flow statement",
          "Line 136: Control flow statement",
          "Line 140: Control flow statement",
          "Line 142: Control flow statement",
          "Line 180: Control flow statement",
          "Line 188: Control flow statement",
          "Line 205: Control flow statement",
          "Line 207: Control flow statement",
          "Line 212: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 93: Error handling point",
          "Line 100: Error handling point",
          "Line 119: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 751,
        "message": "File has 752 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function_limits_properties",
        "function_signature": "fn test_function_limits_properties(",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "                    max_parameters,",
          "                    max_complexity,",
          "                };",
          "",
          "                prop_assert!(limits.max_lines > 0);",
          "                prop_assert!(limits.max_parameters > 0);",
          "                prop_assert!(limits.max_complexity > 0);",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 80,
        "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    /// Minimum documentation length (words)",
          "    pub min_doc_length: usize,",
          "}",
          "",
          "/// Banned patterns and practices",
          "#[derive(Debug, Clone, Serialize, Deserialize)]",
          "pub struct BannedPatterns {",
          "    /// Ban underscore parameter naming (_param)",
          "    pub ban_underscore_params: bool,",
          "    /// Ban underscore let assignments (let _ =)",
          "    pub ban_underscore_let: bool,",
          "    /// Ban .unwrap() calls in production",
          "    pub ban_unwrap: bool,",
          "    /// Ban .expect() calls in production",
          "    pub ban_expect: bool,",
          "    /// Ban panic! macro in production",
          "    pub ban_panic: bool,",
          "    /// Ban todo! macro in production",
          "    pub ban_todo: bool,",
          "    /// Ban unimplemented! macro in production"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [
          "Line 80: Variable 'assignments (' used"
        ],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 82,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "}",
          "",
          "/// Banned patterns and practices",
          "#[derive(Debug, Clone, Serialize, Deserialize)]",
          "pub struct BannedPatterns {",
          "    /// Ban underscore parameter naming (_param)",
          "    pub ban_underscore_params: bool,",
          "    /// Ban underscore let assignments (let _ =)",
          "    pub ban_underscore_let: bool,",
          "    /// Ban .unwrap() calls in production",
          "    pub ban_unwrap: bool,",
          "    /// Ban .expect() calls in production",
          "    pub ban_expect: bool,",
          "    /// Ban panic! macro in production",
          "    pub ban_panic: bool,",
          "    /// Ban todo! macro in production",
          "    pub ban_todo: bool,",
          "    /// Ban unimplemented! macro in production",
          "    pub ban_unimplemented: bool,",
          "    /// Custom banned patterns (regex)"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 84,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "/// Banned patterns and practices",
          "#[derive(Debug, Clone, Serialize, Deserialize)]",
          "pub struct BannedPatterns {",
          "    /// Ban underscore parameter naming (_param)",
          "    pub ban_underscore_params: bool,",
          "    /// Ban underscore let assignments (let _ =)",
          "    pub ban_underscore_let: bool,",
          "    /// Ban .unwrap() calls in production",
          "    pub ban_unwrap: bool,",
          "    /// Ban .expect() calls in production",
          "    pub ban_expect: bool,",
          "    /// Ban panic! macro in production",
          "    pub ban_panic: bool,",
          "    /// Ban todo! macro in production",
          "    pub ban_todo: bool,",
          "    /// Ban unimplemented! macro in production",
          "    pub ban_unimplemented: bool,",
          "    /// Custom banned patterns (regex)",
          "    pub custom_banned: Vec<BannedPattern>,",
          "}"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 136,
        "message": "Function has 67 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "default",
        "function_signature": "fn default() -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "    /// Require security audit dependencies",
          "    pub require_audit: bool,",
          "    /// Minimum security audit frequency (days)",
          "    pub audit_frequency_days: u32,",
          "    /// Security-sensitive patterns to flag",
          "    pub security_patterns: Vec<BannedPattern>,",
          "}",
          "",
          "impl Default for CodingStandards {",
          "    fn default() -> Self {",
          "        Self {",
          "            edition: EditionStandards {",
          "                required_edition: \"2024\".to_string(),",
          "                min_rust_version: \"1.85.0\".to_string(),",
          "                auto_upgrade: true,",
          "            },",
          "            file_limits: FileLimits {",
          "                max_lines: 300,",
          "                max_line_length: 100,",
          "                exempt_files: vec!["
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 300,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_compliance",
        "function_signature": "pub async fn check_compliance(&self, project_path: &std::path::Path) -> Result<Vec<String>> {",
        "return_type": "Result<Vec<String>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "arithmetic-side-effects-allowed = []",
          "\"#,",
          "            self.edition.min_rust_version,",
          "            self.file_limits.max_lines * 1000, // Convert to bytes approximation",
          "            self.documentation.require_private_docs,",
          "        )",
          "    }",
          "",
          "    /// Check if a project complies with these standards",
          "    pub async fn check_compliance(&self, project_path: &std::path::Path) -> Result<Vec<String>> {",
          "        let mut violations = Vec::new();",
          "",
          "        // Check Cargo.toml for edition",
          "        let cargo_toml = project_path.join(\"Cargo.toml\");",
          "        if cargo_toml.exists() {",
          "            let content = tokio::fs::read_to_string(&cargo_toml).await?;",
          "            if !content.contains(&format!(r#\"edition = \"{}\"\"#, self.edition.required_edition)) {",
          "                violations.push(format!(",
          "                    \"Project must use Rust Edition {}\",",
          "                    self.edition.required_edition"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 589,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_edition_2024",
        "function_signature": "async fn test_check_compliance_edition_2024() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "        assert!(config.contains(\"check-private-items = true\"));",
          "",
          "        standards.documentation.require_private_docs = false;",
          "        let config = standards.generate_clippy_config();",
          "        assert!(config.contains(\"check-private-items = false\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_compliance_edition_2024() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        // Write Cargo.toml with Edition 2024",
          "        fs::write(",
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\""
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 589: Variable 'temp_dir' used",
          "Line 616: Variable 'temp_dir' used",
          "Line 644: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 603,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_edition_2024",
        "function_signature": "async fn test_check_compliance_edition_2024() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let standards = CodingStandards::default();",
          "        let violations = standards",
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        assert!(violations.is_empty());",
          "    }",
          ""
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 609,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_edition_2024",
        "function_signature": "async fn test_check_compliance_edition_2024() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let standards = CodingStandards::default();",
          "        let violations = standards",
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_compliance_wrong_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        // Write Cargo.toml with wrong edition"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 616,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_wrong_edition",
        "function_signature": "async fn test_check_compliance_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_compliance_wrong_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        // Write Cargo.toml with wrong edition",
          "        fs::write(",
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\""
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 589: Variable 'temp_dir' used",
          "Line 616: Variable 'temp_dir' used",
          "Line 644: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 630,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_wrong_edition",
        "function_signature": "async fn test_check_compliance_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let standards = CodingStandards::default();",
          "        let violations = standards",
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        assert!(!violations.is_empty());",
          "        assert!(violations[0].contains(\"Edition 2024\"));",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 636,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_wrong_edition",
        "function_signature": "async fn test_check_compliance_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let standards = CodingStandards::default();",
          "        let violations = standards",
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        assert!(!violations.is_empty());",
          "        assert!(violations[0].contains(\"Edition 2024\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_compliance_no_cargo_toml() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        let standards = CodingStandards::default();"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 644,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_no_cargo_toml",
        "function_signature": "async fn test_check_compliance_no_cargo_toml() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        assert!(!violations.is_empty());",
          "        assert!(violations[0].contains(\"Edition 2024\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_check_compliance_no_cargo_toml() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        let standards = CodingStandards::default();",
          "        let violations = standards",
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        // Should not fail if no Cargo.toml exists",
          "        assert!(violations.is_empty());",
          "    }"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 589: Variable 'temp_dir' used",
          "Line 616: Variable 'temp_dir' used",
          "Line 644: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 650,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_check_compliance_no_cargo_toml",
        "function_signature": "async fn test_check_compliance_no_cargo_toml() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "",
          "    #[tokio::test]",
          "    async fn test_check_compliance_no_cargo_toml() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        let standards = CodingStandards::default();",
          "        let violations = standards",
          "            .check_compliance(temp_dir.path())",
          "            .await",
          "            .expect(\"Check should succeed\");",
          "",
          "        // Should not fail if no Cargo.toml exists",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    // Integration tests for serialization/deserialization",
          "    #[test]",
          "    fn test_serialization_roundtrip() {",
          "        let original = CodingStandards::default();",
          ""
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation",
          "Async context"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 700,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_banned_pattern_serialization",
        "function_signature": "fn test_banned_pattern_serialization() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "    #[test]",
          "    fn test_banned_pattern_serialization() {",
          "        let pattern = BannedPattern {",
          "            name: \"test\".to_string(),",
          "            pattern: r\"test_.*\".to_string(),",
          "            message: \"Test message\".to_string(),",
          "            applies_to_tests: true,",
          "        };",
          "",
          "        let serialized = serde_json::to_string(&pattern).expect(\"Should serialize\");",
          "        let deserialized: BannedPattern =",
          "            serde_json::from_str(&serialized).expect(\"Should deserialize\");",
          "",
          "        assert_eq!(pattern.name, deserialized.name);",
          "        assert_eq!(pattern.pattern, deserialized.pattern);",
          "        assert_eq!(pattern.message, deserialized.message);",
          "        assert_eq!(pattern.applies_to_tests, deserialized.applies_to_tests);",
          "    }",
          "",
          "    // Property-based tests"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 661: Variable 'serialized' used",
          "Line 700: Variable 'serialized' used"
        ],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/standards.rs",
        "line": 702,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_banned_pattern_serialization",
        "function_signature": "fn test_banned_pattern_serialization() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CodingStandards {",
        "surrounding_code": [
          "        let pattern = BannedPattern {",
          "            name: \"test\".to_string(),",
          "            pattern: r\"test_.*\".to_string(),",
          "            message: \"Test message\".to_string(),",
          "            applies_to_tests: true,",
          "        };",
          "",
          "        let serialized = serde_json::to_string(&pattern).expect(\"Should serialize\");",
          "        let deserialized: BannedPattern =",
          "            serde_json::from_str(&serialized).expect(\"Should deserialize\");",
          "",
          "        assert_eq!(pattern.name, deserialized.name);",
          "        assert_eq!(pattern.pattern, deserialized.pattern);",
          "        assert_eq!(pattern.message, deserialized.message);",
          "        assert_eq!(pattern.applies_to_tests, deserialized.applies_to_tests);",
          "    }",
          "",
          "    // Property-based tests",
          "    #[cfg(test)]",
          "    mod property_tests {"
        ],
        "imports": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 219: Control flow statement",
          "Line 223: Control flow statement",
          "Line 227: Control flow statement",
          "Line 231: Control flow statement",
          "Line 235: Control flow statement",
          "Line 239: Control flow statement",
          "Line 243: Control flow statement",
          "Line 299: Control flow statement",
          "Line 305: Control flow statement",
          "Line 307: Control flow statement",
          "Line 652: Control flow statement"
        ],
        "dependencies": [
          "use crate::Result;",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "        use super::*;",
          "        use proptest::prelude::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 82: Error handling point",
          "Line 84: Error handling point",
          "Line 192: Error handling point",
          "Line 306: Error handling point",
          "Line 508: Error handling point",
          "Line 589: Error handling point",
          "Line 603: Error handling point",
          "Line 609: Error handling point",
          "Line 616: Error handling point",
          "Line 630: Error handling point",
          "Line 636: Error handling point",
          "Line 644: Error handling point",
          "Line 650: Error handling point",
          "Line 661: Error handling point",
          "Line 663: Error handling point",
          "Line 700: Error handling point",
          "Line 702: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/templates.rs",
        "line": 49,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_cargo_toml",
        "function_signature": "pub fn generate_cargo_toml(&self, project_name: &str, is_lib: bool) -> Result<String> {",
        "return_type": "Result<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "                    \"Failed to register GitHub workflow template: {}\",",
          "                    e",
          "                ))",
          "            })?;",
          "",
          "        Ok(Self { handlebars })",
          "    }",
          "",
          "    /// Generate a Cargo.toml file with Ferrous Forge standards",
          "    pub fn generate_cargo_toml(&self, project_name: &str, is_lib: bool) -> Result<String> {",
          "        let data = json!({",
          "            \"project_name\": project_name,",
          "            \"is_lib\": is_lib,",
          "            \"version\": \"0.1.0\",",
          "            \"edition\": \"2024\",",
          "            \"rust_version\": \"1.85\",",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"cargo_toml\", &data)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 109: Control flow statement",
          "Line 119: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 30: Error handling point",
          "Line 34: Error handling point",
          "Line 43: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/templates.rs",
        "line": 64,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_main_rs",
        "function_signature": "pub fn generate_main_rs(&self, project_name: &str) -> Result<String> {",
        "return_type": "Result<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            \"rust_version\": \"1.85\",",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"cargo_toml\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render Cargo.toml: {}\", e)))",
          "    }",
          "",
          "    /// Generate a main.rs file with Ferrous Forge standards",
          "    pub fn generate_main_rs(&self, project_name: &str) -> Result<String> {",
          "        let data = json!({",
          "            \"project_name\": project_name,",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"main_rs\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render main.rs: {}\", e)))",
          "    }",
          "",
          "    /// Generate a lib.rs file with Ferrous Forge standards"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 109: Control flow statement",
          "Line 119: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 30: Error handling point",
          "Line 34: Error handling point",
          "Line 43: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/templates.rs",
        "line": 75,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_lib_rs",
        "function_signature": "pub fn generate_lib_rs(&self, project_name: &str) -> Result<String> {",
        "return_type": "Result<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            \"project_name\": project_name,",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"main_rs\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render main.rs: {}\", e)))",
          "    }",
          "",
          "    /// Generate a lib.rs file with Ferrous Forge standards",
          "    pub fn generate_lib_rs(&self, project_name: &str) -> Result<String> {",
          "        let data = json!({",
          "            \"project_name\": project_name,",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"lib_rs\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render lib.rs: {}\", e)))",
          "    }",
          "",
          "    /// Generate GitHub Actions CI workflow"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 109: Control flow statement",
          "Line 119: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 30: Error handling point",
          "Line 34: Error handling point",
          "Line 43: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/templates.rs",
        "line": 86,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_github_workflow",
        "function_signature": "pub fn generate_github_workflow(&self, project_name: &str) -> Result<String> {",
        "return_type": "Result<String> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            \"project_name\": project_name,",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"lib_rs\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render lib.rs: {}\", e)))",
          "    }",
          "",
          "    /// Generate GitHub Actions CI workflow",
          "    pub fn generate_github_workflow(&self, project_name: &str) -> Result<String> {",
          "        let data = json!({",
          "            \"project_name\": project_name,",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"github_workflow\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render GitHub workflow: {}\", e)))",
          "    }",
          "",
          "    /// Apply templates to an existing project"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 109: Control flow statement",
          "Line 119: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 30: Error handling point",
          "Line 34: Error handling point",
          "Line 43: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/templates.rs",
        "line": 97,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "apply_to_project",
        "function_signature": "pub async fn apply_to_project(&self, project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "            \"project_name\": project_name,",
          "        });",
          "",
          "        self.handlebars",
          "            .render(\"github_workflow\", &data)",
          "            .map_err(|e| Error::template(format!(\"Failed to render GitHub workflow: {}\", e)))",
          "    }",
          "",
          "    /// Apply templates to an existing project",
          "    pub async fn apply_to_project(&self, project_path: &Path) -> Result<()> {",
          "        // This would be used to retrofit existing projects with Ferrous Forge standards",
          "        // For now, just create a placeholder",
          "        tracing::info!(",
          "            \"Applying Ferrous Forge templates to project: {}\",",
          "            project_path.display()",
          "        );",
          "",
          "        // TODO: Implement project retrofitting",
          "        // - Backup existing files",
          "        // - Update Cargo.toml with Edition 2024"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "use std::path::Path;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 109: Control flow statement",
          "Line 119: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use handlebars::Handlebars;",
          "use serde_json::json;",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 26: Error handling point",
          "Line 30: Error handling point",
          "Line 34: Error handling point",
          "Line 43: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/test_coverage.rs",
        "line": 528,
        "message": "File has 529 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_format_coverage_report",
        "function_signature": "fn test_format_coverage_report() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CoverageAnalyzer {",
        "surrounding_code": [
          "            branches_tested: 8,",
          "            total_branches: 10,",
          "        };",
          "",
          "        let formatted = analyzer.format_coverage_report(&report);",
          "        assert!(formatted.contains(\"Test Coverage Report\"));",
          "        assert!(formatted.contains(\"85.0%\"));",
          "        assert!(formatted.contains(\"90.0%\"));",
          "        assert!(formatted.contains(\"80.0%\"));",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 115: Control flow statement",
          "Line 121: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 141: Control flow statement",
          "Line 155: Control flow statement",
          "Line 186: Control flow statement",
          "Line 247: Control flow statement",
          "Line 260: Control flow statement",
          "Line 266: Control flow statement",
          "Line 270: Control flow statement",
          "Line 297: Control flow statement",
          "Line 304: Control flow statement",
          "Line 311: Control flow statement",
          "Line 318: Control flow statement",
          "Line 321: Control flow statement",
          "Line 353: Control flow statement",
          "Line 358: Control flow statement",
          "Line 363: Control flow statement",
          "Line 395: Control flow statement",
          "Line 403: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 129: Error handling point",
          "Line 139: Error handling point",
          "Line 155: Error handling point",
          "Line 184: Error handling point",
          "Line 227: Error handling point",
          "Line 425: Error handling point",
          "Line 429: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/test_coverage.rs",
        "line": 30,
        "message": "Function has 74 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "default",
        "function_signature": "fn default() -> Self {",
        "return_type": "Self {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CoverageConfig {",
        "surrounding_code": [
          "    /// Whether to fail builds on coverage below threshold",
          "    pub fail_on_low_coverage: bool,",
          "    /// Files to exclude from coverage analysis",
          "    pub exclude_files: Vec<String>,",
          "    /// Directories to exclude from coverage analysis",
          "    pub exclude_dirs: Vec<String>,",
          "}",
          "",
          "impl Default for CoverageConfig {",
          "    fn default() -> Self {",
          "        Self {",
          "            min_line_coverage: 80.0,",
          "            min_function_coverage: 85.0,",
          "            min_branch_coverage: 75.0,",
          "            fail_on_low_coverage: true,",
          "            exclude_files: vec![",
          "                \"main.rs\".to_string(),",
          "                \"lib.rs\".to_string(),",
          "                \"**/tests/**\".to_string(),",
          "                \"**/benches/**\".to_string(),"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 115: Control flow statement",
          "Line 121: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 141: Control flow statement",
          "Line 155: Control flow statement",
          "Line 186: Control flow statement",
          "Line 247: Control flow statement",
          "Line 260: Control flow statement",
          "Line 266: Control flow statement",
          "Line 270: Control flow statement",
          "Line 297: Control flow statement",
          "Line 304: Control flow statement",
          "Line 311: Control flow statement",
          "Line 318: Control flow statement",
          "Line 321: Control flow statement",
          "Line 353: Control flow statement",
          "Line 358: Control flow statement",
          "Line 363: Control flow statement",
          "Line 395: Control flow statement",
          "Line 403: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 129: Error handling point",
          "Line 139: Error handling point",
          "Line 155: Error handling point",
          "Line 184: Error handling point",
          "Line 227: Error handling point",
          "Line 425: Error handling point",
          "Line 429: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/test_coverage.rs",
        "line": 154,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "run_coverage",
        "function_signature": "pub async fn run_coverage(&self, project_path: &Path) -> Result<CoverageReport> {",
        "return_type": "Result<CoverageReport> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl Default for CoverageConfig {",
        "surrounding_code": [
          "                stderr",
          "            )));",
          "        }",
          "",
          "        tracing::info!(\"cargo-tarpaulin installed successfully\");",
          "        Ok(())",
          "    }",
          "",
          "    /// Run test coverage analysis",
          "    pub async fn run_coverage(&self, project_path: &Path) -> Result<CoverageReport> {",
          "        if !self.check_tarpaulin_installed()? {",
          "            return Err(Error::validation(",
          "                \"cargo-tarpaulin not installed. Run 'cargo install cargo-tarpaulin' first.\",",
          "            ));",
          "        }",
          "",
          "        tracing::info!(\"Running test coverage analysis...\");",
          "",
          "        let exclude_files_str = self.config.exclude_files.join(\",\");",
          "        let mut args = vec!["
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 115: Control flow statement",
          "Line 121: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 141: Control flow statement",
          "Line 155: Control flow statement",
          "Line 186: Control flow statement",
          "Line 247: Control flow statement",
          "Line 260: Control flow statement",
          "Line 266: Control flow statement",
          "Line 270: Control flow statement",
          "Line 297: Control flow statement",
          "Line 304: Control flow statement",
          "Line 311: Control flow statement",
          "Line 318: Control flow statement",
          "Line 321: Control flow statement",
          "Line 353: Control flow statement",
          "Line 358: Control flow statement",
          "Line 363: Control flow statement",
          "Line 395: Control flow statement",
          "Line 403: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 129: Error handling point",
          "Line 139: Error handling point",
          "Line 155: Error handling point",
          "Line 184: Error handling point",
          "Line 227: Error handling point",
          "Line 425: Error handling point",
          "Line 429: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/test_coverage.rs",
        "line": 199,
        "message": "Function has 95 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_tarpaulin_output",
        "function_signature": "fn parse_tarpaulin_output(&self, output: &str) -> Result<CoverageReport> {",
        "return_type": "Result<CoverageReport> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": "impl Default for CoverageConfig {",
        "surrounding_code": [
          "                stderr",
          "            )));",
          "        }",
          "",
          "        let stdout = String::from_utf8_lossy(&output.stdout);",
          "        self.parse_tarpaulin_output(&stdout)",
          "    }",
          "",
          "    /// Parse cargo-tarpaulin JSON output",
          "    fn parse_tarpaulin_output(&self, output: &str) -> Result<CoverageReport> {",
          "        #[derive(Deserialize)]",
          "        struct TarpaulinOutput {",
          "            #[serde(rename = \"coverage\")]",
          "            line_coverage: f64,",
          "            #[serde(rename = \"linesCovered\")]",
          "            lines_covered: u32,",
          "            #[serde(rename = \"linesTotal\")]",
          "            lines_total: u32,",
          "            #[serde(rename = \"branchesCovered\")]",
          "            branches_covered: Option<u32>,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 115: Control flow statement",
          "Line 121: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 141: Control flow statement",
          "Line 155: Control flow statement",
          "Line 186: Control flow statement",
          "Line 247: Control flow statement",
          "Line 260: Control flow statement",
          "Line 266: Control flow statement",
          "Line 270: Control flow statement",
          "Line 297: Control flow statement",
          "Line 304: Control flow statement",
          "Line 311: Control flow statement",
          "Line 318: Control flow statement",
          "Line 321: Control flow statement",
          "Line 353: Control flow statement",
          "Line 358: Control flow statement",
          "Line 363: Control flow statement",
          "Line 395: Control flow statement",
          "Line 403: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 129: Error handling point",
          "Line 139: Error handling point",
          "Line 155: Error handling point",
          "Line 184: Error handling point",
          "Line 227: Error handling point",
          "Line 425: Error handling point",
          "Line 429: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/test_coverage.rs",
        "line": 331,
        "message": "Function has 91 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "format_coverage_report",
        "function_signature": "pub fn format_coverage_report(&self, report: &CoverageReport) -> String {",
        "return_type": "String {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": "impl Default for CoverageConfig {",
        "surrounding_code": [
          "                return Err(Error::validation(message));",
          "            }",
          "            tracing::warn!(\"{}\", message);",
          "        }",
          "",
          "        Ok(())",
          "    }",
          "",
          "    /// Generate a human-readable coverage report",
          "    pub fn format_coverage_report(&self, report: &CoverageReport) -> String {",
          "        let mut output = String::new();",
          "",
          "        output.push_str(\"📊 Test Coverage Report\\n\");",
          "        output.push_str(\"═══════════════════\\n\");",
          "        output.push_str(\"═══\\n\\n\");",
          "",
          "        output.push_str(&format!(\"📈 Overall Coverage:\\n\"));",
          "        output.push_str(&format!(",
          "            \"  • Lines:     {:.1}% ({}/{})\\n\",",
          "            report.line_coverage, report.lines_tested, report.total_lines"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 115: Control flow statement",
          "Line 121: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 141: Control flow statement",
          "Line 155: Control flow statement",
          "Line 186: Control flow statement",
          "Line 247: Control flow statement",
          "Line 260: Control flow statement",
          "Line 266: Control flow statement",
          "Line 270: Control flow statement",
          "Line 297: Control flow statement",
          "Line 304: Control flow statement",
          "Line 311: Control flow statement",
          "Line 318: Control flow statement",
          "Line 321: Control flow statement",
          "Line 353: Control flow statement",
          "Line 358: Control flow statement",
          "Line 363: Control flow statement",
          "Line 395: Control flow statement",
          "Line 403: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation"
        ],
        "error_propagation": [
          "Line 129: Error handling point",
          "Line 139: Error handling point",
          "Line 155: Error handling point",
          "Line 184: Error handling point",
          "Line 227: Error handling point",
          "Line 425: Error handling point",
          "Line 429: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/test_coverage.rs",
        "line": 422,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_project_coverage",
        "function_signature": "pub async fn check_project_coverage(&self, project_path: &Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl Default for CoverageConfig {",
        "surrounding_code": [
          "        output.push_str(\"  • Add tests for uncovered code paths\\n\");",
          "        output.push_str(\"  • Remove dead code\\n\");",
          "        output.push_str(\"  • Test error conditions and edge cases\\n\");",
          "        output.push_str(\"  • Use property-based testing\\n\");",
          "",
          "        output",
          "    }",
          "",
          "    /// Check coverage for a project",
          "    pub async fn check_project_coverage(&self, project_path: &Path) -> Result<()> {",
          "        println!(\"🧪 Checking test coverage...\");",
          "",
          "        let report = self.run_coverage(project_path).await?;",
          "",
          "        println!(\"{}\", self.format_coverage_report(&report));",
          "",
          "        self.validate_coverage(&report)?;",
          "",
          "        println!(\"✅ Coverage check completed successfully\");",
          "        Ok(())"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "use std::collections::HashMap;",
          "use std::path::Path;",
          "use std::process::Command;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 115: Control flow statement",
          "Line 121: Control flow statement",
          "Line 127: Control flow statement",
          "Line 129: Control flow statement",
          "Line 141: Control flow statement",
          "Line 155: Control flow statement",
          "Line 186: Control flow statement",
          "Line 247: Control flow statement",
          "Line 260: Control flow statement",
          "Line 266: Control flow statement",
          "Line 270: Control flow statement",
          "Line 297: Control flow statement",
          "Line 304: Control flow statement",
          "Line 311: Control flow statement",
          "Line 318: Control flow statement",
          "Line 321: Control flow statement",
          "Line 353: Control flow statement",
          "Line 358: Control flow statement",
          "Line 363: Control flow statement",
          "Line 395: Control flow statement",
          "Line 403: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use serde::{Deserialize, Serialize};",
          "    use super::*;",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 129: Error handling point",
          "Line 139: Error handling point",
          "Line 155: Error handling point",
          "Line 184: Error handling point",
          "Line 227: Error handling point",
          "Line 425: Error handling point",
          "Line 429: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 426,
        "message": "File has 427 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "check_auto_update",
        "function_signature": "pub async fn check_auto_update() -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "            // Auto-install security updates",
          "            updater.install_update(&update_info).await?;",
          "            tracing::warn!(\"Security update installed automatically\");",
          "        } else {",
          "            // Just notify about regular updates",
          "            tracing::info!(\"Update available. Run 'ferrous-forge update' to install.\");",
          "        }",
          "    }",
          "",
          "    Ok(())",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 126,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "install_update",
        "function_signature": "pub async fn install_update(&self, update_info: &UpdateInfo) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "",
          "        match self.channel {",
          "            UpdateChannel::Stable => self.parse_latest_release(&body).await,",
          "            UpdateChannel::Beta => self.parse_prerelease(&body).await,",
          "            UpdateChannel::Nightly => self.parse_nightly_build(&body).await,",
          "        }",
          "    }",
          "",
          "    /// Download and install an update",
          "    pub async fn install_update(&self, update_info: &UpdateInfo) -> Result<()> {",
          "        tracing::info!(\"Installing update to version {}\", update_info.version);",
          "",
          "        // Create backup before update",
          "        let backup_path = self._create_backup().await?;",
          "        tracing::info!(\"Created backup at: {}\", backup_path.display());",
          "",
          "        #[cfg(feature = \"update-system\")]",
          "        {",
          "            // Download the binary from the GitHub release",
          "            tracing::info!(\"Downloading update from: {}\", update_info.download_url);"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 126,
        "message": "Function has 67 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "install_update",
        "function_signature": "pub async fn install_update(&self, update_info: &UpdateInfo) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "",
          "        match self.channel {",
          "            UpdateChannel::Stable => self.parse_latest_release(&body).await,",
          "            UpdateChannel::Beta => self.parse_prerelease(&body).await,",
          "            UpdateChannel::Nightly => self.parse_nightly_build(&body).await,",
          "        }",
          "    }",
          "",
          "    /// Download and install an update",
          "    pub async fn install_update(&self, update_info: &UpdateInfo) -> Result<()> {",
          "        tracing::info!(\"Installing update to version {}\", update_info.version);",
          "",
          "        // Create backup before update",
          "        let backup_path = self._create_backup().await?;",
          "        tracing::info!(\"Created backup at: {}\", backup_path.display());",
          "",
          "        #[cfg(feature = \"update-system\")]",
          "        {",
          "            // Download the binary from the GitHub release",
          "            tracing::info!(\"Downloading update from: {}\", update_info.download_url);"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 246,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "restore_backup",
        "function_signature": "pub async fn restore_backup(&self, backup_path: &std::path::Path) -> Result<()> {",
        "return_type": "Result<()> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "            let backup_config = backup_path.join(\"config.toml\");",
          "            tokio::fs::copy(&config_file, &backup_config).await?;",
          "        }",
          "",
          "        tracing::info!(\"Created backup at: {}\", backup_path.display());",
          "        Ok(backup_path)",
          "    }",
          "",
          "    /// Restore from a backup",
          "    pub async fn restore_backup(&self, backup_path: &std::path::Path) -> Result<()> {",
          "        if !backup_path.exists() {",
          "            return Err(Error::update(\"Backup path does not exist\"));",
          "        }",
          "",
          "        let backup_exe = backup_path.join(\"ferrous-forge\");",
          "        let backup_config = backup_path.join(\"config.toml\");",
          "",
          "        // Restore binary",
          "        if backup_exe.exists() {",
          "            let current_exe = std::env::current_exe().map_err(|e| {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 297,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_latest_release",
        "function_signature": "async fn parse_latest_release(&self, response_body: &str) -> Result<Option<UpdateInfo>> {",
        "return_type": "Result<Option<UpdateInfo>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "                backups.push(entry.path());",
          "            }",
          "        }",
          "",
          "        backups.sort();",
          "        Ok(backups)",
          "    }",
          "",
          "    /// Parse latest stable release from GitHub API response",
          "    async fn parse_latest_release(&self, response_body: &str) -> Result<Option<UpdateInfo>> {",
          "        #[derive(Deserialize)]",
          "        struct GitHubRelease {",
          "            tag_name: String,",
          "            name: String,",
          "            body: String,",
          "            prerelease: bool,",
          "            assets: Vec<GitHubAsset>,",
          "        }",
          "",
          "        #[derive(Deserialize)]"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 297,
        "message": "Function has 56 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_latest_release",
        "function_signature": "async fn parse_latest_release(&self, response_body: &str) -> Result<Option<UpdateInfo>> {",
        "return_type": "Result<Option<UpdateInfo>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "                backups.push(entry.path());",
          "            }",
          "        }",
          "",
          "        backups.sort();",
          "        Ok(backups)",
          "    }",
          "",
          "    /// Parse latest stable release from GitHub API response",
          "    async fn parse_latest_release(&self, response_body: &str) -> Result<Option<UpdateInfo>> {",
          "        #[derive(Deserialize)]",
          "        struct GitHubRelease {",
          "            tag_name: String,",
          "            name: String,",
          "            body: String,",
          "            prerelease: bool,",
          "            assets: Vec<GitHubAsset>,",
          "        }",
          "",
          "        #[derive(Deserialize)]"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 353,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_prerelease",
        "function_signature": "async fn parse_prerelease(&self, response_body: &str) -> Result<Option<UpdateInfo>> {",
        "return_type": "Result<Option<UpdateInfo>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "            channel: self.channel.clone(),",
          "            changelog: release.body,",
          "            download_url: asset.browser_download_url.clone(),",
          "            checksum: String::new(), // GitHub doesn't provide checksums in API",
          "            is_security_update: release.name.to_lowercase().contains(\"security\"),",
          "        }))",
          "    }",
          "",
          "    /// Parse prerelease from GitHub API response",
          "    async fn parse_prerelease(&self, response_body: &str) -> Result<Option<UpdateInfo>> {",
          "        #[derive(Deserialize)]",
          "        struct GitHubReleases {",
          "            #[serde(flatten)]",
          "            _releases: Vec<serde_json::Value>,",
          "        }",
          "",
          "        let releases: Vec<serde_json::Value> = serde_json::from_str(response_body)",
          "            .map_err(|e| Error::update(format!(\"Failed to parse GitHub releases: {}\", e)))?;",
          "",
          "        // Find the latest prerelease"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/updater.rs",
        "line": 378,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "parse_nightly_build",
        "function_signature": "async fn parse_nightly_build(&self, _response_body: &str) -> Result<Option<UpdateInfo>> {",
        "return_type": "Result<Option<UpdateInfo>> {",
        "is_async": true,
        "is_generic": true,
        "trait_impl": "impl std::fmt::Display for UpdateChannel {",
        "surrounding_code": [
          "                        .await;",
          "                }",
          "            }",
          "        }",
          "",
          "        Ok(None)",
          "    }",
          "",
          "    /// Parse nightly build from GitHub Actions artifacts",
          "    async fn parse_nightly_build(&self, _response_body: &str) -> Result<Option<UpdateInfo>> {",
          "        // Nightly builds would come from GitHub Actions artifacts",
          "        // This is more complex and would require authentication",
          "        // For now, return None as nightly builds aren't implemented",
          "        tracing::warn!(\"Nightly builds not yet supported\");",
          "        Ok(None)",
          "    }",
          "",
          "    /// Get platform-specific binary suffix",
          "    fn get_platform_suffix(&self) -> String {",
          "        let arch = std::env::consts::ARCH;"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::PathBuf;",
          "                use std::os::unix::fs::PermissionsExt;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 26: Control flow statement",
          "Line 37: Control flow statement",
          "Line 91: Control flow statement",
          "Line 106: Control flow statement",
          "Line 118: Control flow statement",
          "Line 145: Control flow statement",
          "Line 209: Control flow statement",
          "Line 236: Control flow statement",
          "Line 247: Control flow statement",
          "Line 255: Control flow statement",
          "Line 265: Control flow statement",
          "Line 279: Control flow statement",
          "Line 286: Control flow statement",
          "Line 287: Control flow statement",
          "Line 316: Control flow statement",
          "Line 327: Control flow statement",
          "Line 328: Control flow statement",
          "Line 365: Control flow statement",
          "Line 366: Control flow statement",
          "Line 391: Control flow statement",
          "Line 402: Control flow statement",
          "Line 406: Control flow statement",
          "Line 413: Control flow statement",
          "Line 416: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use semver::Version;",
          "use serde::{Deserialize, Serialize};",
          "Trait implementation",
          "Async context",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 76: Error handling point",
          "Line 82: Error handling point",
          "Line 104: Error handling point",
          "Line 116: Error handling point",
          "Line 130: Error handling point",
          "Line 143: Error handling point",
          "Line 155: Error handling point",
          "Line 160: Error handling point",
          "Line 166: Error handling point",
          "Line 172: Error handling point",
          "Line 174: Error handling point",
          "Line 180: Error handling point",
          "Line 211: Error handling point",
          "Line 218: Error handling point",
          "Line 225: Error handling point",
          "Line 229: Error handling point",
          "Line 232: Error handling point",
          "Line 235: Error handling point",
          "Line 238: Error handling point",
          "Line 258: Error handling point",
          "Line 260: Error handling point",
          "Line 266: Error handling point",
          "Line 267: Error handling point",
          "Line 276: Error handling point",
          "Line 284: Error handling point",
          "Line 286: Error handling point",
          "Line 314: Error handling point",
          "Line 325: Error handling point",
          "Line 340: Error handling point",
          "Line 361: Error handling point",
          "Line 368: Error handling point",
          "Line 404: Error handling point",
          "Line 410: Error handling point",
          "Line 411: Error handling point",
          "Line 413: Error handling point",
          "Line 418: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FileTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1173,
        "message": "File has 1174 lines, maximum allowed is 300",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "small_function",
        "function_signature": "content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Should validate\");",
          "",
          "        let function_size_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::FunctionTooLarge)",
          "            .collect();",
          "",
          "        assert_eq!(function_size_violations.len(), 1);",
          "        assert!(function_size_violations[0].message.contains(\"63 lines\"));",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Architectural",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [],
      "confidence_score": 0.2
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 31,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    UnderscoreBandaid,",
          "    /// Wrong Rust edition (not 2024)",
          "    WrongEdition,",
          "    /// File exceeds size limit",
          "    FileTooLarge,",
          "    /// Function exceeds size limit",
          "    FunctionTooLarge,",
          "    /// Line exceeds length limit",
          "    LineTooLong,",
          "    /// Use of .unwrap() or .expect() in production code",
          "    UnwrapInProduction,",
          "    /// Missing documentation",
          "    MissingDocs,",
          "    /// Missing required dependencies",
          "    MissingDependencies,",
          "    /// Rust version too old",
          "    OldRustVersion,",
          "}",
          "",
          "/// A single standards violation"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 31,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    UnderscoreBandaid,",
          "    /// Wrong Rust edition (not 2024)",
          "    WrongEdition,",
          "    /// File exceeds size limit",
          "    FileTooLarge,",
          "    /// Function exceeds size limit",
          "    FunctionTooLarge,",
          "    /// Line exceeds length limit",
          "    LineTooLong,",
          "    /// Use of .unwrap() or .expect() in production code",
          "    UnwrapInProduction,",
          "    /// Missing documentation",
          "    MissingDocs,",
          "    /// Missing required dependencies",
          "    MissingDependencies,",
          "    /// Rust version too old",
          "    OldRustVersion,",
          "}",
          "",
          "/// A single standards violation"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 97,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "new",
        "function_signature": "pub fn new(project_root: PathBuf) -> Result<Self> {",
        "return_type": "Result<Self> {",
        "is_async": false,
        "is_generic": true,
        "trait_impl": null,
        "surrounding_code": [
          "    underscore_param: Regex,",
          "    underscore_let: Regex,",
          "    unwrap_call: Regex,",
          "    expect_call: Regex,",
          "    function_def: Regex,",
          "}",
          "",
          "impl RustValidator {",
          "    /// Create a new validator for the given project",
          "    pub fn new(project_root: PathBuf) -> Result<Self> {",
          "        let patterns = ValidationPatterns {",
          "            underscore_param: Regex::new(r\"fn\\s+\\w+\\([^)]*_\\w+\\s*:[^)]*\\)\")",
          "                .map_err(|e| Error::validation(format!(\"Invalid regex: {}\", e)))?,",
          "            underscore_let: Regex::new(r\"let\\s+_\\s*=\")",
          "                .map_err(|e| Error::validation(format!(\"Invalid regex: {}\", e)))?,",
          "            unwrap_call: Regex::new(r\"\\.unwrap\\(\\)\")",
          "                .map_err(|e| Error::validation(format!(\"Invalid regex: {}\", e)))?,",
          "            expect_call: Regex::new(r\"\\.expect\\(\")",
          "                .map_err(|e| Error::validation(format!(\"Invalid regex: {}\", e)))?,",
          "            function_def: Regex::new(r\"^(\\s*)(?:pub\\s+)?(?:async\\s+)?fn\\s+\\w+\")"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": "Result",
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Generic constraints"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 162,
        "message": "Function has 51 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "generate_report",
        "function_signature": "pub fn generate_report(&self, violations: &[Violation]) -> String {",
        "return_type": "String {",
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            }",
          "",
          "            self.validate_rust_file(&rust_file, &mut violations).await?;",
          "        }",
          "",
          "        Ok(violations)",
          "    }",
          "",
          "    /// Generate a human-readable report from violations",
          "    pub fn generate_report(&self, violations: &[Violation]) -> String {",
          "        if violations.is_empty() {",
          "            return \"✅ All Rust validation checks passed! Code meets Ferrous Forge standards.\"",
          "                .to_string();",
          "        }",
          "",
          "        let mut report = format!(",
          "            \"❌ Found {} violations of Ferrous Forge standards:\\n\\n\",",
          "            violations.len()",
          "        );",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 503,
        "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "validate_rust_file",
        "function_signature": "pub async fn validate_rust_file(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                    severity: Severity::Error,",
          "                });",
          "            }",
          "",
          "            if self.patterns.underscore_let.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnderscoreBandaid,",
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message: \"BANNED: Underscore assignment (let _ =) - handle errors properly\"",
          "                        .to_string(),",
          "                    severity: Severity::Error,",
          "                });",
          "            }",
          "",
          "            // Check for .unwrap() in production code (not in tests or if allowed)",
          "            if !in_test_block && !is_test_file && !allow_unwrap ",
          "                && self.patterns.unwrap_call.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnwrapInProduction,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [
          "Line 503: Variable '_' used",
          "Line 844: Variable '_' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 509,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "validate_rust_file",
        "function_signature": "pub async fn validate_rust_file(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                    violation_type: ViolationType::UnderscoreBandaid,",
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message: \"BANNED: Underscore assignment (let _ =) - handle errors properly\"",
          "                        .to_string(),",
          "                    severity: Severity::Error,",
          "                });",
          "            }",
          "",
          "            // Check for .unwrap() in production code (not in tests or if allowed)",
          "            if !in_test_block && !is_test_file && !allow_unwrap ",
          "                && self.patterns.unwrap_call.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnwrapInProduction,",
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message:",
          "                        \"BANNED: .unwrap() in production code - use proper error handling with ?\"",
          "                            .to_string(),",
          "                    severity: Severity::Error,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 517,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "validate_rust_file",
        "function_signature": "pub async fn validate_rust_file(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "            // Check for .unwrap() in production code (not in tests or if allowed)",
          "            if !in_test_block && !is_test_file && !allow_unwrap ",
          "                && self.patterns.unwrap_call.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnwrapInProduction,",
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message:",
          "                        \"BANNED: .unwrap() in production code - use proper error handling with ?\"",
          "                            .to_string(),",
          "                    severity: Severity::Error,",
          "                });",
          "            }",
          "",
          "            // Check for .expect() in production code (not in tests or if allowed)",
          "            if !in_test_block && !is_test_file && !allow_expect ",
          "                && self.patterns.expect_call.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnwrapInProduction,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 523,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "validate_rust_file",
        "function_signature": "pub async fn validate_rust_file(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message:",
          "                        \"BANNED: .unwrap() in production code - use proper error handling with ?\"",
          "                            .to_string(),",
          "                    severity: Severity::Error,",
          "                });",
          "            }",
          "",
          "            // Check for .expect() in production code (not in tests or if allowed)",
          "            if !in_test_block && !is_test_file && !allow_expect ",
          "                && self.patterns.expect_call.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnwrapInProduction,",
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message:",
          "                        \"BANNED: .expect() in production code - use proper error handling with ?\"",
          "                            .to_string(),",
          "                    severity: Severity::Error,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 531,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "validate_rust_file",
        "function_signature": "pub async fn validate_rust_file(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "            // Check for .expect() in production code (not in tests or if allowed)",
          "            if !in_test_block && !is_test_file && !allow_expect ",
          "                && self.patterns.expect_call.is_match(line) {",
          "                violations.push(Violation {",
          "                    violation_type: ViolationType::UnwrapInProduction,",
          "                    file: rust_file.to_path_buf(),",
          "                    line: i + 1,",
          "                    message:",
          "                        \"BANNED: .expect() in production code - use proper error handling with ?\"",
          "                            .to_string(),",
          "                    severity: Severity::Error,",
          "                });",
          "            }",
          "",
          "            // Reset test block tracking",
          "            if line_stripped.starts_with('}') && in_test_block {",
          "                in_test_block = false;",
          "            }",
          "        }"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 384,
        "message": "Function has 186 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "validate_rust_file",
        "function_signature": "pub async fn validate_rust_file(",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        }",
          "",
          "        Ok(())",
          "    }",
          "",
          "    /// Validates a Rust source file for standards compliance",
          "    ///",
          "    /// Checks for file size limits, line length, function size,",
          "    /// underscore bandaids, and unwrap/expect usage.",
          "    pub async fn validate_rust_file(",
          "        &self,",
          "        rust_file: &Path,",
          "        violations: &mut Vec<Violation>,",
          "    ) -> Result<()> {",
          "        let content = fs::read_to_string(rust_file).await?;",
          "        let lines: Vec<&str> = content.lines().collect();",
          "        ",
          "        // Check if this is a test or benchmark file",
          "        let path_str = rust_file.to_string_lossy();",
          "        let is_test_file = path_str.contains(\"/tests/\") "
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 635,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_rust_validator_creation",
        "function_signature": "async fn test_rust_validator_creation() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            output: \"All checks passed\".to_string(),",
          "        };",
          "",
          "        assert!(result.success);",
          "        assert_eq!(result.output, \"All checks passed\");",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_rust_validator_creation() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator = RustValidator::new(temp_dir.path().to_path_buf());",
          "",
          "        assert!(validator.is_ok());",
          "        let validator = validator.expect(\"Should create validator\");",
          "        assert_eq!(validator.project_root, temp_dir.path());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_no_violations() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 639,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_rust_validator_creation",
        "function_signature": "async fn test_rust_validator_creation() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert_eq!(result.output, \"All checks passed\");",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_rust_validator_creation() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator = RustValidator::new(temp_dir.path().to_path_buf());",
          "",
          "        assert!(validator.is_ok());",
          "        let validator = validator.expect(\"Should create validator\");",
          "        assert_eq!(validator.project_root, temp_dir.path());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_no_violations() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = vec![];"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 636: Variable 'validator' used",
          "Line 639: Variable 'validator' used",
          "Line 646: Variable 'validator' used",
          "Line 659: Variable 'validator' used",
          "Line 706: Variable 'validator' used",
          "Line 735: Variable 'validator' used",
          "Line 763: Variable 'validator' used",
          "Line 791: Variable 'validator' used",
          "Line 819: Variable 'validator' used",
          "Line 851: Variable 'validator' used",
          "Line 894: Variable 'validator' used",
          "Line 943: Variable 'validator' used",
          "Line 980: Variable 'validator' used",
          "Line 1041: Variable 'validator' used",
          "Line 1101: Variable 'validator' used",
          "Line 1128: Variable 'validator' used",
          "Line 1157: Variable 'validator' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 645,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_generate_report_no_violations",
        "function_signature": "async fn test_generate_report_no_violations() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let validator = RustValidator::new(temp_dir.path().to_path_buf());",
          "",
          "        assert!(validator.is_ok());",
          "        let validator = validator.expect(\"Should create validator\");",
          "        assert_eq!(validator.project_root, temp_dir.path());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_no_violations() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = vec![];",
          "        let report = validator.generate_report(&violations);",
          "",
          "        assert!(report.contains(\"✅\"));",
          "        assert!(report.contains(\"All Rust validation checks passed\"));",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 647,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_generate_report_no_violations",
        "function_signature": "async fn test_generate_report_no_violations() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert!(validator.is_ok());",
          "        let validator = validator.expect(\"Should create validator\");",
          "        assert_eq!(validator.project_root, temp_dir.path());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_no_violations() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = vec![];",
          "        let report = validator.generate_report(&violations);",
          "",
          "        assert!(report.contains(\"✅\"));",
          "        assert!(report.contains(\"All Rust validation checks passed\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_with_violations() {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 658,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_generate_report_with_violations",
        "function_signature": "async fn test_generate_report_with_violations() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let violations = vec![];",
          "        let report = validator.generate_report(&violations);",
          "",
          "        assert!(report.contains(\"✅\"));",
          "        assert!(report.contains(\"All Rust validation checks passed\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_with_violations() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = vec![",
          "            Violation {",
          "                violation_type: ViolationType::UnderscoreBandaid,",
          "                file: PathBuf::from(\"test.rs\"),",
          "                line: 10,",
          "                message: \"Underscore parameter\".to_string(),",
          "                severity: Severity::Error,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 660,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_generate_report_with_violations",
        "function_signature": "async fn test_generate_report_with_violations() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        assert!(report.contains(\"✅\"));",
          "        assert!(report.contains(\"All Rust validation checks passed\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_generate_report_with_violations() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = vec![",
          "            Violation {",
          "                violation_type: ViolationType::UnderscoreBandaid,",
          "                file: PathBuf::from(\"test.rs\"),",
          "                line: 10,",
          "                message: \"Underscore parameter\".to_string(),",
          "                severity: Severity::Error,",
          "            },",
          "            Violation {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 691,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_correct_edition",
        "function_signature": "async fn test_validate_cargo_toml_correct_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert!(report.contains(\"Found 2 violations\"));",
          "        assert!(report.contains(\"UNDERSCOREBANDAID\"));",
          "        assert!(report.contains(\"WRONGEDITION\"));",
          "        assert!(report.contains(\"test.rs:11\"));",
          "        assert!(report.contains(\"Cargo.toml:6\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_cargo_toml_correct_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        fs::write(",
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 704,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_correct_edition",
        "function_signature": "async fn test_validate_cargo_toml_correct_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 707,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_correct_edition",
        "function_signature": "async fn test_validate_cargo_toml_correct_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert!(violations.is_empty());",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 713,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_correct_edition",
        "function_signature": "async fn test_validate_cargo_toml_correct_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_cargo_toml_wrong_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        fs::write("
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 720,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_wrong_edition",
        "function_signature": "async fn test_validate_cargo_toml_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_cargo_toml_wrong_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        fs::write(",
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 733,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_wrong_edition",
        "function_signature": "async fn test_validate_cargo_toml_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 736,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_wrong_edition",
        "function_signature": "async fn test_validate_cargo_toml_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2021\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert_eq!(violations.len(), 0); // 2021 is now valid",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 742,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_wrong_edition",
        "function_signature": "async fn test_validate_cargo_toml_wrong_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert_eq!(violations.len(), 0); // 2021 is now valid",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_cargo_toml_missing_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        fs::write("
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 749,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_missing_edition",
        "function_signature": "async fn test_validate_cargo_toml_missing_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert_eq!(violations.len(), 0); // 2021 is now valid",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_cargo_toml_missing_edition() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let cargo_toml = temp_dir.path().join(\"Cargo.toml\");",
          "",
          "        fs::write(",
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "\"#,",
          "        )"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 761,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_missing_edition",
        "function_signature": "async fn test_validate_cargo_toml_missing_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        fs::write(",
          "            &cargo_toml,",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 764,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_missing_edition",
        "function_signature": "async fn test_validate_cargo_toml_missing_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert_eq!(violations.len(), 1);",
          "        assert_eq!(violations[0].violation_type, ViolationType::WrongEdition);",
          "        assert!(violations[0].message.contains(\"Missing edition\"));"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 770,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_cargo_toml_missing_edition",
        "function_signature": "async fn test_validate_cargo_toml_missing_edition() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_cargo_toml(&cargo_toml, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        assert_eq!(violations.len(), 1);",
          "        assert_eq!(violations[0].violation_type, ViolationType::WrongEdition);",
          "        assert!(violations[0].message.contains(\"Missing edition\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_size_limit() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 779,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_size_limit",
        "function_signature": "async fn test_validate_rust_file_size_limit() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Should validate\");",
          "",
          "        assert_eq!(violations.len(), 1);",
          "        assert_eq!(violations[0].violation_type, ViolationType::WrongEdition);",
          "        assert!(violations[0].message.contains(\"Missing edition\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_size_limit() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        // Create a file with over 300 lines",
          "        let content = (0..350)",
          "            .map(|i| format!(\"// Line {}\", i))",
          "            .collect::<Vec<_>>()",
          "            .join(\"\\n\");",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 789,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_size_limit",
        "function_signature": "async fn test_validate_rust_file_size_limit() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        // Create a file with over 300 lines",
          "        let content = (0..350)",
          "            .map(|i| format!(\"// Line {}\", i))",
          "            .collect::<Vec<_>>()",
          "            .join(\"\\n\");",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 792,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_size_limit",
        "function_signature": "async fn test_validate_rust_file_size_limit() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let content = (0..350)",
          "            .map(|i| format!(\"// Line {}\", i))",
          "            .collect::<Vec<_>>()",
          "            .join(\"\\n\");",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let file_size_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::FileTooLarge)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 798,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_size_limit",
        "function_signature": "async fn test_validate_rust_file_size_limit() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let file_size_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::FileTooLarge)",
          "            .collect();",
          "",
          "        assert_eq!(file_size_violations.len(), 1);",
          "        assert!(file_size_violations[0].message.contains(\"350 lines\"));",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 811,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_line_length",
        "function_signature": "async fn test_validate_rust_file_line_length() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .filter(|v| v.violation_type == ViolationType::FileTooLarge)",
          "            .collect();",
          "",
          "        assert_eq!(file_size_violations.len(), 1);",
          "        assert!(file_size_violations[0].message.contains(\"350 lines\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_line_length() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let long_line = \"// \".to_string() + &\"x\".repeat(150);",
          "        fs::write(&rust_file, long_line)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 817,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_line_length",
        "function_signature": "async fn test_validate_rust_file_line_length() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_line_length() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let long_line = \"// \".to_string() + &\"x\".repeat(150);",
          "        fs::write(&rust_file, long_line)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 820,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_line_length",
        "function_signature": "async fn test_validate_rust_file_line_length() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let long_line = \"// \".to_string() + &\"x\".repeat(150);",
          "        fs::write(&rust_file, long_line)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let line_length_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::LineTooLong)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 826,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_line_length",
        "function_signature": "async fn test_validate_rust_file_line_length() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let line_length_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::LineTooLong)",
          "            .collect();",
          "",
          "        assert_eq!(line_length_violations.len(), 1);",
          "        assert!(line_length_violations[0].message.contains(\"153 characters\"));",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 839,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_underscore_bandaid",
        "function_signature": "async fn test_validate_rust_file_underscore_bandaid() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .filter(|v| v.violation_type == ViolationType::LineTooLong)",
          "            .collect();",
          "",
          "        assert_eq!(line_length_violations.len(), 1);",
          "        assert!(line_length_violations[0].message.contains(\"153 characters\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_underscore_bandaid() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r\"",
          "fn test_function(_param: String) {",
          "    let _ = some_operation();",
          "}",
          "\";",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 843,
        "message": "BANNED: Underscore parameter (_param) - fix the design instead of hiding warnings",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function",
        "function_signature": "fn test_function(_param: String) {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert!(line_length_violations[0].message.contains(\"153 characters\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_underscore_bandaid() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r\"",
          "fn test_function(_param: String) {",
          "    let _ = some_operation();",
          "}",
          "\";",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnderscoreBandaid",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 844,
        "message": "BANNED: Underscore assignment (let _ =) - handle errors properly",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function",
        "function_signature": "fn test_function(_param: String) {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_underscore_bandaid() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r\"",
          "fn test_function(_param: String) {",
          "    let _ = some_operation();",
          "}",
          "\";",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [
          "Line 503: Variable '_' used",
          "Line 844: Variable '_' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Simple",
      "ai_fixable": true,
      "fix_recommendation": "Either use the parameter or remove it from function signature",
      "side_effects": [],
      "confidence_score": 0.85
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 849,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function",
        "function_signature": "fn test_function(_param: String) {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r\"",
          "fn test_function(_param: String) {",
          "    let _ = some_operation();",
          "}",
          "\";",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 852,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function",
        "function_signature": "fn test_function(_param: String) {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "fn test_function(_param: String) {",
          "    let _ = some_operation();",
          "}",
          "\";",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let bandaid_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::UnderscoreBandaid)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 858,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function",
        "function_signature": "fn test_function(_param: String) {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let bandaid_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::UnderscoreBandaid)",
          "            .collect();",
          "",
          "        assert_eq!(bandaid_violations.len(), 2); // One for param, one for let",
          "        assert!(bandaid_violations",
          "            .iter()",
          "            .any(|v| v.message.contains(\"parameter\")));"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 876,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_rust_file_unwrap_in_production",
        "function_signature": "async fn test_validate_rust_file_unwrap_in_production() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .iter()",
          "            .any(|v| v.message.contains(\"parameter\")));",
          "        assert!(bandaid_violations",
          "            .iter()",
          "            .any(|v| v.message.contains(\"assignment\")));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_unwrap_in_production() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r#\"",
          "fn production_code() {",
          "    let value = some_result.unwrap();",
          "    let other = another_result.expect(\"message\");",
          "}",
          "",
          "#[test]",
          "fn test_code() {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 881,
        "message": "BANNED: .unwrap() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "production_code",
        "function_signature": "fn production_code() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_unwrap_in_production() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r#\"",
          "fn production_code() {",
          "    let value = some_result.unwrap();",
          "    let other = another_result.expect(\"message\");",
          "}",
          "",
          "#[test]",
          "fn test_code() {",
          "    let value = some_result.unwrap(); // This should be allowed",
          "}",
          "\"#;",
          "        fs::write(&rust_file, content)",
          "            .await"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 881: Variable 'value' used",
          "Line 887: Variable 'value' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 882,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "production_code",
        "function_signature": "fn production_code() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    #[tokio::test]",
          "    async fn test_validate_rust_file_unwrap_in_production() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        let content = r#\"",
          "fn production_code() {",
          "    let value = some_result.unwrap();",
          "    let other = another_result.expect(\"message\");",
          "}",
          "",
          "#[test]",
          "fn test_code() {",
          "    let value = some_result.unwrap(); // This should be allowed",
          "}",
          "\"#;",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 882: Variable 'other' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 892,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_code",
        "function_signature": "fn test_code() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "}",
          "",
          "#[test]",
          "fn test_code() {",
          "    let value = some_result.unwrap(); // This should be allowed",
          "}",
          "\"#;",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 895,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_code",
        "function_signature": "fn test_code() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "fn test_code() {",
          "    let value = some_result.unwrap(); // This should be allowed",
          "}",
          "\"#;",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let unwrap_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::UnwrapInProduction)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 901,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_code",
        "function_signature": "fn test_code() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let unwrap_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::UnwrapInProduction)",
          "            .collect();",
          "",
          "        // Should find 2 violations in production code, but none in test code",
          "        assert_eq!(unwrap_violations.len(), 2);",
          "        assert!(unwrap_violations",
          "            .iter()"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 920,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_rust_files",
        "function_signature": "async fn test_find_rust_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .iter()",
          "            .any(|v| v.message.contains(\"unwrap\")));",
          "        assert!(unwrap_violations",
          "            .iter()",
          "            .any(|v| v.message.contains(\"expect\")));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_find_rust_files() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create some Rust files",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "",
          "        fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
          "            .await",
          "            .expect(\"Failed to write main.rs\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 926,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_rust_files",
        "function_signature": "async fn test_find_rust_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    #[tokio::test]",
          "    async fn test_find_rust_files() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create some Rust files",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "",
          "        fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
          "            .await",
          "            .expect(\"Failed to write main.rs\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "        fs::write(temp_dir.path().join(\"build.rs\"), \"// build\")",
          "            .await",
          "            .expect(\"Failed to write build.rs\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 930,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        // Create some Rust files",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "",
          "        fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
          "            .await",
          "            .expect(\"Failed to write main.rs\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "        fs::write(temp_dir.path().join(\"build.rs\"), \"// build\")",
          "            .await",
          "            .expect(\"Failed to write build.rs\");",
          "",
          "        // Create non-Rust file",
          "        fs::write(temp_dir.path().join(\"README.md\"), \" Test\")",
          "            .await"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 933,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "",
          "        fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
          "            .await",
          "            .expect(\"Failed to write main.rs\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "        fs::write(temp_dir.path().join(\"build.rs\"), \"// build\")",
          "            .await",
          "            .expect(\"Failed to write build.rs\");",
          "",
          "        // Create non-Rust file",
          "        fs::write(temp_dir.path().join(\"README.md\"), \" Test\")",
          "            .await",
          "            .expect(\"Failed to write README\");",
          "",
          "        let validator ="
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 936,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
          "            .await",
          "            .expect(\"Failed to write main.rs\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "        fs::write(temp_dir.path().join(\"build.rs\"), \"// build\")",
          "            .await",
          "            .expect(\"Failed to write build.rs\");",
          "",
          "        // Create non-Rust file",
          "        fs::write(temp_dir.path().join(\"README.md\"), \" Test\")",
          "            .await",
          "            .expect(\"Failed to write README\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let rust_files = validator"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 941,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "        fs::write(temp_dir.path().join(\"build.rs\"), \"// build\")",
          "            .await",
          "            .expect(\"Failed to write build.rs\");",
          "",
          "        // Create non-Rust file",
          "        fs::write(temp_dir.path().join(\"README.md\"), \" Test\")",
          "            .await",
          "            .expect(\"Failed to write README\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let rust_files = validator",
          "            .find_rust_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(rust_files.len(), 3);"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 944,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Failed to write build.rs\");",
          "",
          "        // Create non-Rust file",
          "        fs::write(temp_dir.path().join(\"README.md\"), \" Test\")",
          "            .await",
          "            .expect(\"Failed to write README\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let rust_files = validator",
          "            .find_rust_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(rust_files.len(), 3);",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"main.rs\"));"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 949,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Failed to write README\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let rust_files = validator",
          "            .find_rust_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(rust_files.len(), 3);",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"main.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"lib.rs\"));",
          "        assert!(rust_files",
          "            .iter()"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 954,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        let rust_files = validator",
          "            .find_rust_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(rust_files.len(), 3);",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"main.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"lib.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"build.rs\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_find_cargo_files() {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 957,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(rust_files.len(), 3);",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"main.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"lib.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"build.rs\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_find_cargo_files() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create Cargo.toml files"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 960,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "main",
        "function_signature": "fs::write(src_dir.join(\"main.rs\"), \"fn main() {}\")",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert_eq!(rust_files.len(), 3);",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"main.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"lib.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"build.rs\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_find_cargo_files() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create Cargo.toml files",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write Cargo.toml\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 965,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"lib.rs\"));",
          "        assert!(rust_files",
          "            .iter()",
          "            .any(|f| f.file_name().expect(\"file name\") == \"build.rs\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_find_cargo_files() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create Cargo.toml files",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let sub_dir = temp_dir.path().join(\"sub_project\");",
          "        fs::create_dir(&sub_dir)",
          "            .await",
          "            .expect(\"Failed to create sub dir\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 970,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_find_cargo_files() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create Cargo.toml files",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let sub_dir = temp_dir.path().join(\"sub_project\");",
          "        fs::create_dir(&sub_dir)",
          "            .await",
          "            .expect(\"Failed to create sub dir\");",
          "        fs::write(sub_dir.join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write sub Cargo.toml\");",
          "",
          "        let validator ="
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 975,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        // Create Cargo.toml files",
          "        fs::write(temp_dir.path().join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let sub_dir = temp_dir.path().join(\"sub_project\");",
          "        fs::create_dir(&sub_dir)",
          "            .await",
          "            .expect(\"Failed to create sub dir\");",
          "        fs::write(sub_dir.join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write sub Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let cargo_files = validator",
          "            .find_cargo_files()",
          "            .await"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 978,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Failed to write Cargo.toml\");",
          "",
          "        let sub_dir = temp_dir.path().join(\"sub_project\");",
          "        fs::create_dir(&sub_dir)",
          "            .await",
          "            .expect(\"Failed to create sub dir\");",
          "        fs::write(sub_dir.join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write sub Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let cargo_files = validator",
          "            .find_cargo_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(cargo_files.len(), 2);"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 981,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let sub_dir = temp_dir.path().join(\"sub_project\");",
          "        fs::create_dir(&sub_dir)",
          "            .await",
          "            .expect(\"Failed to create sub dir\");",
          "        fs::write(sub_dir.join(\"Cargo.toml\"), \"[package]\")",
          "            .await",
          "            .expect(\"Failed to write sub Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let cargo_files = validator",
          "            .find_cargo_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(cargo_files.len(), 2);",
          "        assert!(cargo_files",
          "            .iter()",
          "            .all(|f| f.file_name().expect(\"file name\") == \"Cargo.toml\"));"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 986,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Failed to write sub Cargo.toml\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let cargo_files = validator",
          "            .find_cargo_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(cargo_files.len(), 2);",
          "        assert!(cargo_files",
          "            .iter()",
          "            .all(|f| f.file_name().expect(\"file name\") == \"Cargo.toml\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_project_integration() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 991,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_find_cargo_files",
        "function_signature": "async fn test_find_cargo_files() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        let cargo_files = validator",
          "            .find_cargo_files()",
          "            .await",
          "            .expect(\"Should find files\");",
          "",
          "        assert_eq!(cargo_files.len(), 2);",
          "        assert!(cargo_files",
          "            .iter()",
          "            .all(|f| f.file_name().expect(\"file name\") == \"Cargo.toml\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_project_integration() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create a basic Rust project structure",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 996,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_project_integration",
        "function_signature": "async fn test_validate_project_integration() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        assert_eq!(cargo_files.len(), 2);",
          "        assert!(cargo_files",
          "            .iter()",
          "            .all(|f| f.file_name().expect(\"file name\") == \"Cargo.toml\"));",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_validate_project_integration() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create a basic Rust project structure",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "",
          "        // Cargo.toml with correct edition",
          "        fs::write(",
          "            temp_dir.path().join(\"Cargo.toml\"),"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1002,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_project_integration",
        "function_signature": "async fn test_validate_project_integration() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    #[tokio::test]",
          "    async fn test_validate_project_integration() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create a basic Rust project structure",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "",
          "        // Cargo.toml with correct edition",
          "        fs::write(",
          "            temp_dir.path().join(\"Cargo.toml\"),",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1015,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_validate_project_integration",
        "function_signature": "async fn test_validate_project_integration() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            temp_dir.path().join(\"Cargo.toml\"),",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        // Good Rust file",
          "        fs::write(",
          "            src_dir.join(\"lib.rs\"),",
          "            r\"",
          "//! Test library",
          "",
          "pub fn add(a: i32, b: i32) -> i32 {",
          "    a + b",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1039,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_add",
        "function_signature": "fn test_add() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    #[test]",
          "    fn test_add() {",
          "        assert_eq!(add(2, 3), 5);",
          "    }",
          "}",
          "\",",
          "        )",
          "        .await",
          "        .expect(\"Failed to write lib.rs\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = validator.validate_project().await.expect(\"Should validate\");",
          "",
          "        // Should pass validation (only rust version check might fail depending on system)",
          "        let non_rust_version_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type != ViolationType::OldRustVersion)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1042,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_add",
        "function_signature": "fn test_add() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        assert_eq!(add(2, 3), 5);",
          "    }",
          "}",
          "\",",
          "        )",
          "        .await",
          "        .expect(\"Failed to write lib.rs\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = validator.validate_project().await.expect(\"Should validate\");",
          "",
          "        // Should pass validation (only rust version check might fail depending on system)",
          "        let non_rust_version_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type != ViolationType::OldRustVersion)",
          "            .collect();",
          "",
          "        assert!(non_rust_version_violations.is_empty());"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1044,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_add",
        "function_signature": "fn test_add() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "}",
          "\",",
          "        )",
          "        .await",
          "        .expect(\"Failed to write lib.rs\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let violations = validator.validate_project().await.expect(\"Should validate\");",
          "",
          "        // Should pass validation (only rust version check might fail depending on system)",
          "        let non_rust_version_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type != ViolationType::OldRustVersion)",
          "            .collect();",
          "",
          "        assert!(non_rust_version_violations.is_empty());",
          "    }",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 649: Variable 'violations' used",
          "Line 662: Variable 'violations' used",
          "Line 1044: Variable 'violations' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1065,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_serialization",
        "function_signature": "fn test_serialization() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    fn test_serialization() {",
          "        let violation = Violation {",
          "            violation_type: ViolationType::UnderscoreBandaid,",
          "            file: PathBuf::from(\"test.rs\"),",
          "            line: 10,",
          "            message: \"Test violation\".to_string(),",
          "            severity: Severity::Error,",
          "        };",
          "",
          "        let serialized = serde_json::to_string(&violation).expect(\"Should serialize\");",
          "        let deserialized: Violation =",
          "            serde_json::from_str(&serialized).expect(\"Should deserialize\");",
          "",
          "        assert_eq!(violation.violation_type, deserialized.violation_type);",
          "        assert_eq!(violation.file, deserialized.file);",
          "        assert_eq!(violation.line, deserialized.line);",
          "        assert_eq!(violation.message, deserialized.message);",
          "    }",
          "",
          "    #[tokio::test]"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 1065: Variable 'serialized' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1067,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_serialization",
        "function_signature": "fn test_serialization() {",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            violation_type: ViolationType::UnderscoreBandaid,",
          "            file: PathBuf::from(\"test.rs\"),",
          "            line: 10,",
          "            message: \"Test violation\".to_string(),",
          "            severity: Severity::Error,",
          "        };",
          "",
          "        let serialized = serde_json::to_string(&violation).expect(\"Should serialize\");",
          "        let deserialized: Violation =",
          "            serde_json::from_str(&serialized).expect(\"Should deserialize\");",
          "",
          "        assert_eq!(violation.violation_type, deserialized.violation_type);",
          "        assert_eq!(violation.file, deserialized.file);",
          "        assert_eq!(violation.line, deserialized.line);",
          "        assert_eq!(violation.message, deserialized.message);",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_clippy_run() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1077,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_clippy_run",
        "function_signature": "async fn test_clippy_run() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "        assert_eq!(violation.violation_type, deserialized.violation_type);",
          "        assert_eq!(violation.file, deserialized.file);",
          "        assert_eq!(violation.line, deserialized.line);",
          "        assert_eq!(violation.message, deserialized.message);",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_clippy_run() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "",
          "        // Create a minimal Cargo.toml",
          "        fs::write(",
          "            temp_dir.path().join(\"Cargo.toml\"),",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1090,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_clippy_run",
        "function_signature": "async fn test_clippy_run() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            temp_dir.path().join(\"Cargo.toml\"),",
          "            r#\"",
          "[package]",
          "name = \"test\"",
          "version = \"0.1.0\"",
          "edition = \"2024\"",
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        // Create src directory with basic lib.rs",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// Empty lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1096,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_clippy_run",
        "function_signature": "async fn test_clippy_run() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "\"#,",
          "        )",
          "        .await",
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        // Create src directory with basic lib.rs",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// Empty lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let result = validator.run_clippy().await;",
          "",
          "        // The result might succeed or fail depending on the environment"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1099,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_clippy_run",
        "function_signature": "async fn test_clippy_run() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        .expect(\"Failed to write Cargo.toml\");",
          "",
          "        // Create src directory with basic lib.rs",
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// Empty lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let result = validator.run_clippy().await;",
          "",
          "        // The result might succeed or fail depending on the environment",
          "        // but we should get a ClippyResult",
          "        match result {",
          "            Ok(clippy_result) => {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1102,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_clippy_run",
        "function_signature": "async fn test_clippy_run() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        let src_dir = temp_dir.path().join(\"src\");",
          "        fs::create_dir(&src_dir)",
          "            .await",
          "            .expect(\"Failed to create src dir\");",
          "        fs::write(src_dir.join(\"lib.rs\"), \"// Empty lib\")",
          "            .await",
          "            .expect(\"Failed to write lib.rs\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let result = validator.run_clippy().await;",
          "",
          "        // The result might succeed or fail depending on the environment",
          "        // but we should get a ClippyResult",
          "        match result {",
          "            Ok(clippy_result) => {",
          "                assert!(!clippy_result.output.is_empty());",
          "            }",
          "            Err(_) => {"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1121,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_empty_rust_file",
        "function_signature": "async fn test_empty_rust_file() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            Err(_) => {",
          "                // This is acceptable as clippy might not be available in test environment",
          "            }",
          "        }",
          "    }",
          "",
          "    // Edge case tests",
          "    #[tokio::test]",
          "    async fn test_empty_rust_file() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"empty.rs\");",
          "",
          "        fs::write(&rust_file, \"\")",
          "            .await",
          "            .expect(\"Failed to write empty file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1126,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_empty_rust_file",
        "function_signature": "async fn test_empty_rust_file() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "",
          "    // Edge case tests",
          "    #[tokio::test]",
          "    async fn test_empty_rust_file() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"empty.rs\");",
          "",
          "        fs::write(&rust_file, \"\")",
          "            .await",
          "            .expect(\"Failed to write empty file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1129,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_empty_rust_file",
        "function_signature": "async fn test_empty_rust_file() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "    async fn test_empty_rust_file() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"empty.rs\");",
          "",
          "        fs::write(&rust_file, \"\")",
          "            .await",
          "            .expect(\"Failed to write empty file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        // Empty file should not generate violations",
          "        assert!(violations.is_empty());",
          "    }"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1135,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_empty_rust_file",
        "function_signature": "async fn test_empty_rust_file() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Failed to write empty file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        // Empty file should not generate violations",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_function_size_limit() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1143,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "test_function_size_limit",
        "function_signature": "async fn test_function_size_limit() {",
        "return_type": null,
        "is_async": true,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        // Empty file should not generate violations",
          "        assert!(violations.is_empty());",
          "    }",
          "",
          "    #[tokio::test]",
          "    async fn test_function_size_limit() {",
          "        let temp_dir = TempDir::new().expect(\"Failed to create temp directory\");",
          "        let rust_file = temp_dir.path().join(\"test.rs\");",
          "",
          "        // Create a function with more than 50 lines",
          "        let mut content = String::from(\"fn large_function() {\\n\");",
          "        for i in 0..60 {",
          "            content.push_str(&format!(\"    let x{} = {};\\n\", i, i));",
          "        }",
          "        content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
          "",
          "        fs::write(&rust_file, content)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [
          "Line 635: Variable 'temp_dir' used",
          "Line 645: Variable 'temp_dir' used",
          "Line 658: Variable 'temp_dir' used",
          "Line 691: Variable 'temp_dir' used",
          "Line 720: Variable 'temp_dir' used",
          "Line 749: Variable 'temp_dir' used",
          "Line 779: Variable 'temp_dir' used",
          "Line 811: Variable 'temp_dir' used",
          "Line 839: Variable 'temp_dir' used",
          "Line 876: Variable 'temp_dir' used",
          "Line 920: Variable 'temp_dir' used",
          "Line 965: Variable 'temp_dir' used",
          "Line 996: Variable 'temp_dir' used",
          "Line 1077: Variable 'temp_dir' used",
          "Line 1121: Variable 'temp_dir' used",
          "Line 1143: Variable 'temp_dir' used"
        ],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;",
          "Async context"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1155,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "small_function",
        "function_signature": "content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "        // Create a function with more than 50 lines",
          "        let mut content = String::from(\"fn large_function() {\\n\");",
          "        for i in 0..60 {",
          "            content.push_str(&format!(\"    let x{} = {};\\n\", i, i));",
          "        }",
          "        content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
          "",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          ""
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1158,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "small_function",
        "function_signature": "content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            content.push_str(&format!(\"    let x{} = {};\\n\", i, i));",
          "        }",
          "        content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
          "",
          "        fs::write(&rust_file, content)",
          "            .await",
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let function_size_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::FunctionTooLarge)"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "UnwrapInProduction",
        "file": "/mnt/projects/ferrous-forge/src/validation.rs",
        "line": 1164,
        "message": "BANNED: .expect() in production code - use proper error handling with ?",
        "severity": "Error"
      },
      "code_context": {
        "function_name": "small_function",
        "function_signature": "content.push_str(\"}\\n\\nfn small_function() {\\n    let x = 1;\\n}\\n\");",
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "            .expect(\"Failed to write Rust file\");",
          "",
          "        let validator =",
          "            RustValidator::new(temp_dir.path().to_path_buf()).expect(\"Should create validator\");",
          "",
          "        let mut violations = Vec::new();",
          "        validator",
          "            .validate_rust_file(&rust_file, &mut violations)",
          "            .await",
          "            .expect(\"Should validate\");",
          "",
          "        let function_size_violations: Vec<_> = violations",
          "            .iter()",
          "            .filter(|v| v.violation_type == ViolationType::FunctionTooLarge)",
          "            .collect();",
          "",
          "        assert_eq!(function_size_violations.len(), 1);",
          "        assert!(function_size_violations[0].message.contains(\"63 lines\"));",
          "    }",
          "}"
        ],
        "imports": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use std::path::{Path, PathBuf};",
          "use std::process::Command;",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": "Result or Option",
        "data_flow": [],
        "control_flow": [
          "Line 151: Control flow statement",
          "Line 163: Control flow statement",
          "Line 202: Control flow statement",
          "Line 255: Control flow statement",
          "Line 259: Control flow statement",
          "Line 295: Control flow statement",
          "Line 296: Control flow statement",
          "Line 297: Control flow statement",
          "Line 301: Control flow statement",
          "Line 323: Control flow statement",
          "Line 324: Control flow statement",
          "Line 327: Control flow statement",
          "Line 352: Control flow statement",
          "Line 353: Control flow statement",
          "Line 367: Control flow statement",
          "Line 392: Control flow statement",
          "Line 406: Control flow statement",
          "Line 407: Control flow statement",
          "Line 410: Control flow statement",
          "Line 415: Control flow statement",
          "Line 418: Control flow statement",
          "Line 422: Control flow statement",
          "Line 431: Control flow statement",
          "Line 443: Control flow statement",
          "Line 461: Control flow statement",
          "Line 466: Control flow statement",
          "Line 468: Control flow statement",
          "Line 470: Control flow statement",
          "Line 487: Control flow statement",
          "Line 498: Control flow statement",
          "Line 509: Control flow statement",
          "Line 510: Control flow statement",
          "Line 523: Control flow statement",
          "Line 524: Control flow statement",
          "Line 538: Control flow statement",
          "Line 543: Control flow statement",
          "Line 544: Control flow statement",
          "Line 546: Control flow statement",
          "Line 586: Control flow statement",
          "Line 1108: Control flow statement"
        ],
        "dependencies": [
          "use crate::{Error, Result};",
          "use regex::Regex;",
          "use serde::{Deserialize, Serialize};",
          "use tokio::fs;",
          "    use super::*;",
          "    use tempfile::TempDir;",
          "    use tokio::fs;",
          "    use super::*;"
        ],
        "error_propagation": [
          "Line 31: Error handling point",
          "Line 100: Error handling point",
          "Line 102: Error handling point",
          "Line 104: Error handling point",
          "Line 106: Error handling point",
          "Line 107: Error handling point",
          "Line 108: Error handling point",
          "Line 130: Error handling point",
          "Line 133: Error handling point",
          "Line 134: Error handling point",
          "Line 145: Error handling point",
          "Line 155: Error handling point",
          "Line 183: Error handling point",
          "Line 234: Error handling point",
          "Line 247: Error handling point",
          "Line 253: Error handling point",
          "Line 286: Error handling point",
          "Line 302: Error handling point",
          "Line 304: Error handling point",
          "Line 305: Error handling point",
          "Line 314: Error handling point",
          "Line 328: Error handling point",
          "Line 330: Error handling point",
          "Line 331: Error handling point",
          "Line 346: Error handling point",
          "Line 389: Error handling point",
          "Line 509: Error handling point",
          "Line 517: Error handling point",
          "Line 523: Error handling point",
          "Line 531: Error handling point",
          "Line 635: Error handling point",
          "Line 639: Error handling point",
          "Line 645: Error handling point",
          "Line 647: Error handling point",
          "Line 658: Error handling point",
          "Line 660: Error handling point",
          "Line 691: Error handling point",
          "Line 704: Error handling point",
          "Line 707: Error handling point",
          "Line 713: Error handling point",
          "Line 720: Error handling point",
          "Line 733: Error handling point",
          "Line 736: Error handling point",
          "Line 742: Error handling point",
          "Line 749: Error handling point",
          "Line 761: Error handling point",
          "Line 764: Error handling point",
          "Line 770: Error handling point",
          "Line 779: Error handling point",
          "Line 789: Error handling point",
          "Line 792: Error handling point",
          "Line 798: Error handling point",
          "Line 811: Error handling point",
          "Line 817: Error handling point",
          "Line 820: Error handling point",
          "Line 826: Error handling point",
          "Line 839: Error handling point",
          "Line 849: Error handling point",
          "Line 852: Error handling point",
          "Line 858: Error handling point",
          "Line 876: Error handling point",
          "Line 881: Error handling point",
          "Line 882: Error handling point",
          "Line 887: Error handling point",
          "Line 892: Error handling point",
          "Line 895: Error handling point",
          "Line 901: Error handling point",
          "Line 920: Error handling point",
          "Line 926: Error handling point",
          "Line 930: Error handling point",
          "Line 933: Error handling point",
          "Line 936: Error handling point",
          "Line 941: Error handling point",
          "Line 944: Error handling point",
          "Line 949: Error handling point",
          "Line 954: Error handling point",
          "Line 957: Error handling point",
          "Line 960: Error handling point",
          "Line 965: Error handling point",
          "Line 970: Error handling point",
          "Line 975: Error handling point",
          "Line 978: Error handling point",
          "Line 981: Error handling point",
          "Line 986: Error handling point",
          "Line 991: Error handling point",
          "Line 996: Error handling point",
          "Line 1002: Error handling point",
          "Line 1015: Error handling point",
          "Line 1039: Error handling point",
          "Line 1042: Error handling point",
          "Line 1044: Error handling point",
          "Line 1065: Error handling point",
          "Line 1067: Error handling point",
          "Line 1077: Error handling point",
          "Line 1090: Error handling point",
          "Line 1096: Error handling point",
          "Line 1099: Error handling point",
          "Line 1102: Error handling point",
          "Line 1121: Error handling point",
          "Line 1126: Error handling point",
          "Line 1129: Error handling point",
          "Line 1135: Error handling point",
          "Line 1143: Error handling point",
          "Line 1155: Error handling point",
          "Line 1158: Error handling point",
          "Line 1164: Error handling point"
        ]
      },
      "fix_complexity": "Moderate",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "Function signature change required",
        "All callers must be updated"
      ],
      "confidence_score": 0.0
    },
    {
      "violation": {
        "violation_type": "FunctionTooLarge",
        "file": "/mnt/projects/ferrous-forge/test_dogfooding.rs",
        "line": 5,
        "message": "Function has 53 lines, maximum allowed is 50",
        "severity": "Error"
      },
      "code_context": {
        "function_name": null,
        "function_signature": null,
        "return_type": null,
        "is_async": false,
        "is_generic": false,
        "trait_impl": null,
        "surrounding_code": [
          "#!/usr/bin/env rust-script",
          "//! Test using ferrous-forge crate on itself",
          "",
          "use std::process::Command;",
          "",
          "fn main() -> Result<(), Box<dyn std::error::Error>> {",
          "    println!(\"🍖 Testing Dogfooding - Using Ferrous Forge on Itself\");",
          "    println!(\"====================================================\");",
          "    ",
          "    // Test if we can use the external ferrous-forge crate",
          "    println!(\"\\n📦 Testing external ferrous-forge crate...\");",
          "    ",
          "    // Run ferrous-forge validate using the published crate",
          "    let output = Command::new(\"ferrous-forge\")",
          "        .args(&[\"validate\", \".\"])"
        ],
        "imports": [
          "use std::process::Command;"
        ],
        "error_handling_style": "CustomResult"
      },
      "semantic_analysis": {
        "actual_type": null,
        "expected_type": null,
        "data_flow": [],
        "control_flow": [
          "Line 10: Control flow statement",
          "Line 18: Control flow statement",
          "Line 21: Control flow statement",
          "Line 27: Control flow statement",
          "Line 38: Control flow statement",
          "Line 50: Control flow statement"
        ],
        "dependencies": [],
        "error_propagation": [
          "Line 16: Error handling point",
          "Line 36: Error handling point",
          "Line 48: Error handling point"
        ]
      },
      "fix_complexity": "Complex",
      "ai_fixable": false,
      "fix_recommendation": null,
      "side_effects": [
        "May require creating new helper functions",
        "Could affect function testing"
      ],
      "confidence_score": 0.3
    }
  ],
  "code_patterns": {
    "architectural_style": "Modular",
    "error_patterns": [
      "UnwrapUsage",
      "ExpectUsage",
      "PanicUsage",
      "IgnoredError",
      "PropagatedError"
    ],
    "common_patterns": [
      {
        "name": "Builder Pattern",
        "occurrences": 2,
        "locations": []
      },
      {
        "name": "Factory Pattern",
        "occurrences": 26,
        "locations": []
      }
    ]
  },
  "fix_strategies": [
    {
      "violation_type": "UnwrapInProduction",
      "strategy_name": "Replace unwrap with proper error handling",
      "description": "Replace 130 instances of .unwrap() with ? operator or proper error handling",
      "implementation_steps": [
        "Identify function return type",
        "If Result type, replace .unwrap() with ?",
        "If not, change return type to Result",
        "Update function callers"
      ],
      "estimated_effort": "Medium",
      "risk_level": "Low"
    },
    {
      "violation_type": "UnderscoreBandaid",
      "strategy_name": "Remove underscore prefixes",
      "description": "Fix 97 underscore parameter warnings properly",
      "implementation_steps": [
        "Identify unused parameters",
        "Either use the parameter or remove it",
        "Update function signatures if needed"
      ],
      "estimated_effort": "Low",
      "risk_level": "Low"
    },
    {
      "violation_type": "FunctionTooLarge",
      "strategy_name": "Refactor large functions",
      "description": "Break down 49 large functions into smaller ones",
      "implementation_steps": [
        "Identify logical sections",
        "Extract helper functions",
        "Improve code organization"
      ],
      "estimated_effort": "High",
      "risk_level": "Medium"
    },
    {
      "violation_type": "FileTooLarge",
      "strategy_name": "Split large files into modules",
      "description": "Modularize 11 large files",
      "implementation_steps": [
        "Identify logical components",
        "Create module structure",
        "Move code to appropriate modules",
        "Update imports"
      ],
      "estimated_effort": "High",
      "risk_level": "Medium"
    },
    {
      "violation_type": "LineTooLong",
      "strategy_name": "Generic fix",
      "description": "Fix 3 violations",
      "implementation_steps": [
        "Analyze violation",
        "Apply fix"
      ],
      "estimated_effort": "Medium",
      "risk_level": "Low"
    }
  ],
  "ai_instructions": {
    "summary": "Analyzed 290 violations. 108 are AI-fixable with varying complexity.",
    "prioritized_fixes": [
      "Fix LineTooLong at /mnt/projects/ferrous-forge/src/commands/fix/mod.rs:176 (confidence: 100%)",
      "Fix LineTooLong at /mnt/projects/ferrous-forge/src/commands/fix/mod.rs:215 (confidence: 100%)",
      "Fix LineTooLong at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:8 (confidence: 100%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/analyzer.rs:20 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs:32 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs:49 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs:56 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs:71 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/semantic.rs:111 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs:23 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/ai_analyzer/strategies.rs:189 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/edition.rs:233 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/fix/context.rs:103 (confidence: 85%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:27 (confidence: 65%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:29 (confidence: 65%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:38 (confidence: 65%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:43 (confidence: 65%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:44 (confidence: 65%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:52 (confidence: 65%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/fix/strategies.rs:56 (confidence: 65%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/rust.rs:144 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/safety.rs:10 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/safety.rs:100 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/safety.rs:227 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/update.rs:7 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/update.rs:33 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/update.rs:49 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/validate.rs:183 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/validate.rs:220 (confidence: 85%)",
      "Fix UnwrapInProduction at /mnt/projects/ferrous-forge/src/commands/validate.rs:227 (confidence: 65%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/validate.rs:270 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/validate.rs:371 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/commands/validate.rs:387 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/doc_coverage.rs:27 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/doc_coverage.rs:67 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/doc_coverage.rs:125 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/doc_coverage.rs:194 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/analyzer.rs:17 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/analyzer.rs:24 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/analyzer.rs:139 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/migrator.rs:18 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/migrator.rs:26 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/mod.rs:106 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/mod.rs:134 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/edition/mod.rs:157 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/error.rs:157 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/formatting.rs:78 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/formatting.rs:94 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/formatting.rs:117 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/formatting.rs:136 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/formatting.rs:163 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/formatting.rs:261 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/git_hooks.rs:138 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/git_hooks.rs:181 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/git_hooks.rs:231 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/git_hooks.rs:272 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/rust_version/detector.rs:32 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/rust_version/detector.rs:93 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/rust_version/github.rs:61 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/bypass.rs:124 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/audit.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/audit.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/build.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/build.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/clippy.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/clippy.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/doc.rs:14 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/doc.rs:28 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/doc.rs:37 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/format.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/format.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/license.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/license.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/mod.rs:27 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/mod.rs:58 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/publish.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/publish.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/semver.rs:16 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/semver.rs:30 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/standards.rs:14 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/standards.rs:28 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/test.rs:15 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/test.rs:29 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/checks/test_runner.rs:9 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/pipeline.rs:25 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/pipeline.rs:178 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/pipeline.rs:212 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/safety/report.rs:30 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/security.rs:91 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/security.rs:204 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/standards.rs:80 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/standards.rs:300 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/templates.rs:49 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/templates.rs:64 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/templates.rs:75 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/templates.rs:86 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/templates.rs:97 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/test_coverage.rs:154 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/test_coverage.rs:422 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/updater.rs:126 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/updater.rs:246 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/updater.rs:297 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/updater.rs:353 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/updater.rs:378 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/validation.rs:97 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/validation.rs:503 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/validation.rs:843 (confidence: 85%)",
      "Fix UnderscoreBandaid at /mnt/projects/ferrous-forge/src/validation.rs:844 (confidence: 85%)"
    ],
    "architectural_recommendations": [
      "Consider adopting consistent error handling patterns",
      "Modularize large files to improve maintainability",
      "Extract complex logic into well-tested utility functions"
    ],
    "code_quality_improvements": [
      "Add comprehensive documentation",
      "Increase test coverage",
      "Implement CI/CD checks for code standards"
    ]
  }
}