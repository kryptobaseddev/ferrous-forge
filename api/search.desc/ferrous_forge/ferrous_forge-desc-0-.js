searchState.loadedDescShard("ferrous_forge", 0, "Ferrous Forge\nMinimum supported Rust version\nEdition enforced by Ferrous Forge\nCurrent version of Ferrous Forge\nCommand Line Interface for Ferrous Forge\nCommand implementations for Ferrous Forge\nConfiguration management for Ferrous Forge\nDocumentation coverage checking module\nRust edition detection and migration assistance\nError handling for Ferrous Forge\nCode formatting and auto-correction module\nGit hooks installation and management\nRust version management and checking\nSecurity audit integration module\nRust coding standards definitions and enforcement\nTemplate system for Ferrous Forge\nTest coverage integration with cargo-tarpaulin\nSelf-update system for Ferrous Forge\nRust code validation engine\nFerrous Forge - The Type-Safe Rust Development Standards …\nHuman-readable output\nJSON output\nOutput format options\nYAML output\nThe command to execute\nConfiguration file path\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable verbose output\nAnalyze edition compatibility\nCheck current Rust version and available updates\nCheck edition compliance\nAvailable commands for Ferrous Forge\nManage configuration settings\nEdition management\nEdition management subcommands\nInitialize Ferrous Forge system-wide\nList recent Rust releases\nMigrate to a new edition\nGet update recommendations\nRollback to a previous version\nRust version management\nRust version management subcommands\nShow status of Ferrous Forge installation and configuration\nUninstall Ferrous Forge from the system\nUpdate Ferrous Forge to the latest version\nValidate a Rust project against standards\nConfig command implementation\nEdition management commands\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize command implementation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRollback command implementation\nRust version management commands\nStatus command implementation\nUninstall command implementation\nUpdate command implementation\nValidate command implementation\nUpdate channel to use (stable, beta, nightly)\nRust version management subcommand\nEdition management subcommand\nConfirm uninstallation without prompting\nShow what would be updated without actually updating\nForce initialization even if already configured\nGet a configuration value\nList all configuration values\nPath to the project to validate (defaults to current …\nReset configuration to defaults\nOnly update rules, not the binary\nSet a configuration value (key=value)\nVersion to rollback to\nTarget edition (2018, 2021, 2024)\nTarget edition\nApply edition idioms\nSkip backup creation\nProject path\nProject path\nRun tests after migration\nNumber of releases to show\nOnly consider stable releases\nShow verbose output\nExecute the config command\nHandle edition analyze command\nHandle edition check command\nHandle edition migrate command\nExecute the init command\nExecute the rollback command\nHandle rust version check command\nHandle rust version list command\nHandle rust version recommend command\nExecute the status command\nExecute the uninstall command\nExecute the update command\nExecute the validate command\nFerrous Forge configuration\nCustom validation rule\nWhether to automatically check for updates\nWhether to ban underscore bandaid patterns\nCustom clippy rules\nGet the path to the configuration directory\nGet the path to the configuration file\nCustom validation rules\nWhether this rule is enabled\nWhether to enforce Edition 2024\nEnsure configuration directories exist\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a configuration value by key\nWhether Ferrous Forge has been initialized\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if Ferrous Forge is initialized\nList all configuration keys and values\nLoad configuration from file\nLoad configuration from file, or return default if not …\nMark Ferrous Forge as initialized\nFile size limit in lines\nFunction size limit in lines\nError message to display\nName of the rule\nPattern to match (regex)\nWhether to require documentation\nReset configuration to defaults\nSave configuration to file\nSet a configuration value by key\nUpdate channel (stable, beta, nightly)\nVersion of the configuration format\nDocumentation coverage report\nCheck documentation coverage for a Rust project\nCoverage percentage\nNumber of documented items\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if coverage meets minimum threshold\nList of items missing documentation\nGenerate a human-readable report\nSuggest documentation for missing items\nTotal number of documentable items\nRust edition\nRust 2015 edition\nRust 2018 edition\nRust 2021 edition\nRust 2024 edition\nEdition compliance status\nEdition compatibility analyzer\nGet the edition as a string\nCheck edition compliance for a project\nCurrent edition in use\nDetect edition from Cargo.toml\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet edition migration recommendations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this edition is the latest\nIs the project using the latest edition?\nGet the latest stable edition\nLatest available edition\nPath to Cargo.toml\nGet edition-specific lints for migration\nRecommended migration path\nEdition migration assistance\nCreate a new edition status\nGet the next edition after this one\nParse edition from string\n<code>ToString::to_string</code>, but without panic on OOM.\nAnalysis report for edition compatibility\nEdition analyzer for checking compatibility\nEdition compatibility issue\nError - must be fixed\nInfo - informational\nIssue severity\nWarning - should be reviewed\nAnalyze the project for edition compatibility issues\nFile path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the project is ready for migration\nIssues found\nLine number\nIssue message\nCreate a new edition analyzer\nSeverity\nSuggestions for migration\nGet a summary of the analysis\nTarget edition\nTotal number of Rust files\nWarnings\nAlready on target edition\nEdition migrator for upgrading projects\nMigration failed\nMigration options\nMigration result\nMigration status\nPartially successful (with warnings)\nNot started\nMigration successful\nFix all targets\nAllow migration with dirty working directory\nAllow migration with staged changes\nBackup path if created\nCheck for uncommitted git changes\nContinue on error\nCreate backup before migration\nErrors\nApply edition idioms\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessages from the migration\nMigrate project to target edition\nCreate a new edition migrator\nNew edition after migration\nRollback migration using backup\nRun tests after migration\nMigration status\nUpdate Cargo.toml\nWarnings\nSet backup directory\nCLI argument errors\nCommand execution error\nConfiguration errors\nContains the error value\nFerrous Forge specific errors\nFile not found\nIO errors (file operations, etc.)\nMigration error\nNetwork/HTTP errors\nContains the success value\nParse errors\nExternal process errors\nRate limited\nRegex error\nResult type alias for Ferrous Forge operations\nRust not found\nSerialization errors\nStandards enforcement errors\nTemplate errors\nTOML parsing errors\nUpdate system errors\nUTF-8 conversion error\nValidation errors\nSemver parsing errors\nCreate a new CLI error\nCreate a new command error\nCreate a new configuration error\nCreate a new file not found error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new migration error\nCreate a new network error\nCreate a new parse error\nCreate a new process error\nCreate a new rate limited error\nCreate a new rust not found error\nCreate a new standards error\nCreate a new template error\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new update error\nCreate a new validation error\nFormatting check result\nA formatting suggestion for a file\nApply formatting configuration\nAuto-format code\nCheck formatting for a specific file\nCheck code formatting\nDescription of the formatting issue\nFile path\nFormat a specific file\nWhether the code is properly formatted\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet formatting diff without applying changes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number\nGenerate a human-readable report\nSuggested changes\nFiles that need formatting\nCheck if git hooks are installed\nInstall git hooks in a project\nRemove git hooks from a project\nBeta releases\nRust release channel\nCustom or unknown channel\nMajor update available\nMinor update available\nNightly builds\nSecurity update available\nStable releases\nAlready on latest version\nVersion update recommendation\nVersion manager for checking and recommending updates\nSimple in-memory cache with TTL support\nCheck current Rust installation\nRust version detection from local installation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet latest stable release\nGet multiple recent releases\nGet update recommendation\nGitHub API client for fetching Rust releases\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new version manager\n<code>ToString::to_string</code>, but without panic on OOM.\nCurrent Rust version\nCurrent Rust version\nCurrent Rust version\nSecurity update details\nLatest available version\nLatest available version\nLatest available version\nURL to the release page\nURL to the release page\nURL to the release page\nSimple cache with time-to-live (TTL) support\nRemove expired entries\nClear the cache\nReturns the argument unchanged.\nGet a value from the cache\nInsert a value into the cache\nCalls <code>U::from(self)</code>.\nInvalidate a specific entry\nCreate a new cache with the specified TTL\nRepresents the current Rust installation version\nRelease channel\nCommit date\nCommit hash\nDetect the currently installed Rust version\nReturns the argument unchanged.\nGet the active toolchain\nGet installed toolchains via rustup\nHost triple (e.g., x86_64-unknown-linux-gnu)\nCalls <code>U::from(self)</code>.\nCheck if rustup is available\nParse rustc version output\nRaw version string from rustc\n<code>ToString::to_string</code>, but without panic on OOM.\nSemantic version\nSimplified author information\nGitHub API client\nGitHub release information\nRelease description/notes\nCreation date\nIs this a draft?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the latest stable release\nGet multiple recent releases\nHTML URL to the release page\nRelease ID\nGitHub user ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGitHub username\nRelease name\nCreate a new GitHub client\nIs this a prerelease?\nPublication date\nTag name (e.g., “1.90.0”)\nParsed semantic version\nSecurity audit report\nA single security vulnerability\nCVE identifier if available\nCVSS score if available\nTotal number of dependencies\nDescription of the issue\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPackage name\nWhether the audit passed (no vulnerabilities)\nQuick security check (non-blocking)\nGenerate a human-readable report\nRun security audit on a project\nSeverity level\nTitle of the vulnerability\nVersion with vulnerability\nList of vulnerabilities found\nA custom banned pattern\nBanned patterns and practices\nRust coding standards enforced by Ferrous Forge\nDependency requirements\nDocumentation requirements\nRust edition requirements\nFile size limits\nFunction size limits\nSecurity requirements\nWhether this applies to test code\nMinimum security audit frequency (days)\nWhether to automatically upgrade projects\nBan .expect() calls in production\nBan panic! macro in production\nBan todo! macro in production\nBan underscore let assignments (let _ =)\nBan underscore parameter naming (_param)\nBan unimplemented! macro in production\nBan unsafe code blocks\nBan .unwrap() calls in production\nBanned dependencies\nBanned patterns and practices\nCheck if a project complies with these standards\nCustom banned patterns (regex)\nDependency requirements\nDocumentation requirements\nRust edition requirements\nFiles that are exempt from size limits\nFile size limits\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction size limits\nGenerate clippy.toml configuration\nGet all clippy rules based on these standards\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad standards from configuration\nMaximum cyclomatic complexity\nMaximum characters per line\nMaximum lines per file\nMaximum lines per function\nMaximum parameters per function\nError message to show\nMinimum documentation length (words)\nMinimum Rust version\nName of the pattern\nRegular expression to match\nRecommended dependencies\nRequire security audit dependencies\nRequire examples in documentation\nRequire documentation for private items\nRequire documentation for all public items\nRequired dependencies for all projects\nRequired Rust edition\nSave standards to configuration\nSecurity requirements\nSecurity-sensitive patterns to flag\nVersion requirements\nInformation about a project template\nTemplate manager for Ferrous Forge\nApply templates to an existing project\nGet available project templates\nDescription of what this template provides\nFiles that this template will create/modify\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a Cargo.toml file with Ferrous Forge standards\nGenerate GitHub Actions CI workflow\nGenerate a lib.rs file with Ferrous Forge standards\nGenerate a main.rs file with Ferrous Forge standards\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the template\nCreate a new template manager\nTest coverage analyzer\nTest coverage configuration\nTest coverage results\nCoverage information for a single file\nOverall branch coverage percentage\nBranches tested\nCheck coverage for a project\nCheck if cargo-tarpaulin is installed\nDirectories to exclude from coverage analysis\nFiles to exclude from coverage analysis\nWhether to fail builds on coverage below threshold\nPer-file coverage breakdown\nFile path relative to project root\nGenerate a human-readable coverage report\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOverall function coverage percentage\nFunction coverage percentage for this file\nFunctions tested\nFunctions tested in this file\nInstall cargo-tarpaulin if not already installed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverall line coverage percentage\nLine coverage percentage for this file\nTotal lines tested\nLines tested in this file\nMinimum branch coverage percentage (0-100)\nMinimum function coverage percentage (0-100)\nMinimum line coverage percentage (0-100)\nCreate a new coverage analyzer with default configuration\nRun test coverage analysis\nTotal branches\nTotal functions\nTotal functions in this file\nTotal lines in codebase\nTotal lines in this file\nValidate coverage meets minimum thresholds\nCreate a new coverage analyzer with custom configuration\nBeta releases with new features\nNightly builds with latest changes\nStable releases (recommended)\nUpdate channels available for Ferrous Forge\nInformation about an available update\nUpdate manager for Ferrous Forge\nRelease notes/changelog\nUpdate channel\nCheck if automatic updates are enabled and perform update …\nCheck if an update is available\nSHA256 checksum for verification\nDownload URL for the binary\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDownload and install an update\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is a security update\nList available backups\nCreate a new update manager\nRestore from a backup\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate only the rules/configuration without updating the …\nVersion of the update\nResult of running clippy\nError - must be fixed\nFile exceeds size limit\nFunction exceeds size limit\nInfo - good to know\nLine exceeds length limit\nMissing required dependencies\nMissing documentation\nRust version too old\nRust project validator\nSeverity levels for violations\nUnderscore parameter or let assignment bandaid\nUse of .unwrap() or .expect() in production code\nA single standards violation\nTypes of violations that can be detected\nWarning - should be fixed\nWrong Rust edition (not 2024)\nFile where violation occurred\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a human-readable report from violations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number (0-based)\nHuman-readable message\nCreate a new validator for the given project\nCombined stdout and stderr output\nRun clippy with strict configuration\nSeverity level\nWhether clippy passed without errors\nValidates a Cargo.toml file for standards compliance\nValidate the entire project\nValidates a Rust source file for standards compliance\nType of violation")