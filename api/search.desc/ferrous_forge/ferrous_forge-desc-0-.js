searchState.loadedDescShard("ferrous_forge", 0, "Ferrous Forge\nMinimum supported Rust version\nEdition enforced by Ferrous Forge\nCurrent version of Ferrous Forge\nCommand Line Interface for Ferrous Forge\nCommand implementations for Ferrous Forge\nConfiguration management for Ferrous Forge\nDocumentation coverage checking module\nError handling for Ferrous Forge\nCode formatting and auto-correction module\nGit hooks installation and management\nSecurity audit integration module\nRust coding standards definitions and enforcement\nTemplate system for Ferrous Forge\nTest coverage integration with cargo-tarpaulin\nSelf-update system for Ferrous Forge\nRust code validation engine\nFerrous Forge - The Type-Safe Rust Development Standards …\nHuman-readable output\nJSON output\nOutput format options\nYAML output\nThe command to execute\nConfiguration file path\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable verbose output\nAvailable commands for Ferrous Forge\nManage configuration settings\nInitialize Ferrous Forge system-wide\nRollback to a previous version\nShow status of Ferrous Forge installation and configuration\nUninstall Ferrous Forge from the system\nUpdate Ferrous Forge to the latest version\nValidate a Rust project against standards\nConfig command implementation\nReturns the argument unchanged.\nInitialize command implementation\nCalls <code>U::from(self)</code>.\nRollback command implementation\nStatus command implementation\nUninstall command implementation\nUpdate command implementation\nValidate command implementation\nUpdate channel to use (stable, beta, nightly)\nConfirm uninstallation without prompting\nShow what would be updated without actually updating\nForce initialization even if already configured\nGet a configuration value\nList all configuration values\nPath to the project to validate (defaults to current …\nReset configuration to defaults\nOnly update rules, not the binary\nSet a configuration value (key=value)\nVersion to rollback to\nExecute the config command\nExecute the init command\nExecute the rollback command\nExecute the status command\nExecute the uninstall command\nExecute the update command\nExecute the validate command\nFerrous Forge configuration\nCustom validation rule\nWhether to automatically check for updates\nWhether to ban underscore bandaid patterns\nCustom clippy rules\nGet the path to the configuration directory\nGet the path to the configuration file\nCustom validation rules\nWhether this rule is enabled\nWhether to enforce Edition 2024\nEnsure configuration directories exist\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a configuration value by key\nWhether Ferrous Forge has been initialized\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if Ferrous Forge is initialized\nList all configuration keys and values\nLoad configuration from file\nLoad configuration from file, or return default if not …\nMark Ferrous Forge as initialized\nFile size limit in lines\nFunction size limit in lines\nError message to display\nName of the rule\nPattern to match (regex)\nWhether to require documentation\nReset configuration to defaults\nSave configuration to file\nSet a configuration value by key\nUpdate channel (stable, beta, nightly)\nVersion of the configuration format\nDocumentation coverage report\nCheck documentation coverage for a Rust project\nCoverage percentage\nNumber of documented items\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if coverage meets minimum threshold\nList of items missing documentation\nGenerate a human-readable report\nSuggest documentation for missing items\nTotal number of documentable items\nCLI argument errors\nConfiguration errors\nContains the error value\nFerrous Forge specific errors\nIO errors (file operations, etc.)\nNetwork/HTTP errors\nContains the success value\nExternal process errors\nResult type alias for Ferrous Forge operations\nSerialization errors\nStandards enforcement errors\nTemplate errors\nTOML parsing errors\nUpdate system errors\nValidation errors\nSemver parsing errors\nCreate a new CLI error\nCreate a new configuration error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new process error\nCreate a new standards error\nCreate a new template error\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new update error\nCreate a new validation error\nFormatting check result\nA formatting suggestion for a file\nApply formatting configuration\nAuto-format code\nCheck formatting for a specific file\nCheck code formatting\nDescription of the formatting issue\nFile path\nFormat a specific file\nWhether the code is properly formatted\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet formatting diff without applying changes\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number\nGenerate a human-readable report\nSuggested changes\nFiles that need formatting\nCheck if git hooks are installed\nInstall git hooks in a project\nRemove git hooks from a project\nSecurity audit report\nA single security vulnerability\nCVE identifier if available\nCVSS score if available\nTotal number of dependencies\nDescription of the issue\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPackage name\nWhether the audit passed (no vulnerabilities)\nQuick security check (non-blocking)\nGenerate a human-readable report\nRun security audit on a project\nSeverity level\nTitle of the vulnerability\nVersion with vulnerability\nList of vulnerabilities found\nA custom banned pattern\nBanned patterns and practices\nRust coding standards enforced by Ferrous Forge\nDependency requirements\nDocumentation requirements\nRust edition requirements\nFile size limits\nFunction size limits\nSecurity requirements\nWhether this applies to test code\nMinimum security audit frequency (days)\nWhether to automatically upgrade projects\nBan .expect() calls in production\nBan panic! macro in production\nBan todo! macro in production\nBan underscore let assignments (let _ =)\nBan underscore parameter naming (_param)\nBan unimplemented! macro in production\nBan unsafe code blocks\nBan .unwrap() calls in production\nBanned dependencies\nBanned patterns and practices\nCheck if a project complies with these standards\nCustom banned patterns (regex)\nDependency requirements\nDocumentation requirements\nRust edition requirements\nFiles that are exempt from size limits\nFile size limits\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction size limits\nGenerate clippy.toml configuration\nGet all clippy rules based on these standards\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad standards from configuration\nMaximum cyclomatic complexity\nMaximum characters per line\nMaximum lines per file\nMaximum lines per function\nMaximum parameters per function\nError message to show\nMinimum documentation length (words)\nMinimum Rust version\nName of the pattern\nRegular expression to match\nRecommended dependencies\nRequire security audit dependencies\nRequire examples in documentation\nRequire documentation for private items\nRequire documentation for all public items\nRequired dependencies for all projects\nRequired Rust edition\nSave standards to configuration\nSecurity requirements\nSecurity-sensitive patterns to flag\nVersion requirements\nInformation about a project template\nTemplate manager for Ferrous Forge\nApply templates to an existing project\nGet available project templates\nDescription of what this template provides\nFiles that this template will create/modify\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a Cargo.toml file with Ferrous Forge standards\nGenerate GitHub Actions CI workflow\nGenerate a lib.rs file with Ferrous Forge standards\nGenerate a main.rs file with Ferrous Forge standards\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the template\nCreate a new template manager\nTest coverage analyzer\nTest coverage configuration\nTest coverage results\nCoverage information for a single file\nOverall branch coverage percentage\nBranches tested\nCheck coverage for a project\nCheck if cargo-tarpaulin is installed\nDirectories to exclude from coverage analysis\nFiles to exclude from coverage analysis\nWhether to fail builds on coverage below threshold\nPer-file coverage breakdown\nFile path relative to project root\nGenerate a human-readable coverage report\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOverall function coverage percentage\nFunction coverage percentage for this file\nFunctions tested\nFunctions tested in this file\nInstall cargo-tarpaulin if not already installed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverall line coverage percentage\nLine coverage percentage for this file\nTotal lines tested\nLines tested in this file\nMinimum branch coverage percentage (0-100)\nMinimum function coverage percentage (0-100)\nMinimum line coverage percentage (0-100)\nCreate a new coverage analyzer with default configuration\nRun test coverage analysis\nTotal branches\nTotal functions\nTotal functions in this file\nTotal lines in codebase\nTotal lines in this file\nValidate coverage meets minimum thresholds\nCreate a new coverage analyzer with custom configuration\nBeta releases with new features\nNightly builds with latest changes\nStable releases (recommended)\nUpdate channels available for Ferrous Forge\nInformation about an available update\nUpdate manager for Ferrous Forge\nRelease notes/changelog\nUpdate channel\nCheck if automatic updates are enabled and perform update …\nCheck if an update is available\nSHA256 checksum for verification\nDownload URL for the binary\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDownload and install an update\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is a security update\nList available backups\nCreate a new update manager\nRestore from a backup\n<code>ToString::to_string</code>, but without panic on OOM.\nUpdate only the rules/configuration without updating the …\nVersion of the update\nResult of running clippy\nError - must be fixed\nFile exceeds size limit\nFunction exceeds size limit\nInfo - good to know\nLine exceeds length limit\nMissing required dependencies\nMissing documentation\nRust version too old\nRust project validator\nSeverity levels for violations\nUnderscore parameter or let assignment bandaid\nUse of .unwrap() or .expect() in production code\nA single standards violation\nTypes of violations that can be detected\nWarning - should be fixed\nWrong Rust edition (not 2024)\nFile where violation occurred\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a human-readable report from violations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number (0-based)\nHuman-readable message\nCreate a new validator for the given project\nCombined stdout and stderr output\nRun clippy with strict configuration\nSeverity level\nWhether clippy passed without errors\nValidate the entire project\nType of violation")