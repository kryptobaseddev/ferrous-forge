searchState.loadedDescShard("ferrous_forge", 0, "Ferrous Forge\nMinimum supported Rust version\nEdition enforced by Ferrous Forge\nCurrent version of Ferrous Forge\nAI-powered violation analysis module AI analysis module …\nCommand Line Interface for Ferrous Forge\nCommand implementations for Ferrous Forge\nConfiguration management for Ferrous Forge\nDocumentation coverage checking module\nRust edition detection and migration assistance\nError handling for Ferrous Forge\nCode formatting and auto-correction module\nGit hooks installation and management\nRust version management and checking\nEnhanced Safety Pipeline for Ferrous Forge\nSecurity audit integration module\nRust coding standards definitions and enforcement\nTemplate System 2.0 - Project templates with Ferrous Forge …\nTest coverage module - now modularized for better …\nSelf-update system for Ferrous Forge\nRust code validation engine\nAnalyze violations and generate a comprehensive report\nLegacy async API for backwards compatibility\nMain AI analyzer implementation\nCode context extraction utilities\nGenerate orchestrator instructions from analysis report\nSemantic analysis of code violations\nFix strategy generation\nType definitions for AI analysis\nAI analyzer for automated violation analysis\nAnalyze violations and generate report\nAsync version of analyze_violations\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new AI analyzer\nSave analysis report to disk\nSave orchestrator instructions to file\nDetect the error handling style used in the code\nExtract code context around a violation line\nAssess the complexity of fixing a violation\nPerform semantic analysis on a violation\nGenerate AI instructions for fixing violations\nGenerate fix strategies from violation analyses\nIdentify code patterns in the given content\nMain AI analysis report structure\nInstructions for AI-based fixes\nDepth level of AI analysis\nMetadata about AI analysis results\nAnyhow Result type\nArchitectural level analysis\nArchitectural fix - design changes required\nArchitectural style of the codebase\nContext information about the code being analyzed\nCode patterns found in the codebase\nComplex fix - significant changes needed\nContext-aware analysis\nCustom Result type\nError handling style used in the code\nCommon error handling patterns\nEvent-driven architecture\nUsing expect\nComplexity level of a fix\nStrategy for fixing a violation\nIgnoring errors\nLayered architecture\nMicroservices architecture\nModerate fix - requires some refactoring\nModular architecture\nMonolithic architecture\nOption-based error handling\nUses panic for error handling\nUsing panic for errors\nA code pattern occurrence\nPropagating errors with ?\nSemantic code analysis\nSemantic analysis of code patterns and types\nSimple fix - straightforward change\nStandard Result type\nBasic surface analysis\nTrivial fix - simple replacement\nUnhandled Result type\nUnknown error handling style\nUnknown architecture style\nUsing unwrap\nAnalysis of a code violation with AI-powered insights\nPrompt for generating violation fixes\nActual type found in code\nWhether AI can automatically fix this\nAI instructions for fixes\nDepth of analysis performed\nViolations that can be analyzed\nArchitectural recommendations\nOverall architectural style\nContextual information about the code\nDetected code patterns\nCode quality improvement suggestions\nCommon code patterns detected\nConfidence in the fix recommendation (0-100)\nConstraints to consider\nDescription of the context\nControl flow analysis results\nData flow analysis results\nDependencies and imports required\nDescription of the strategy\nError handling style used in the code\nError handling patterns found\nHow errors propagate through code\nEstimated effort required\nExpected type based on context\nApproach for fixing the violation\nComplexity level of the required fix\nRecommended fix strategy\nGenerated fix strategies\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nName of the function containing the violation\nFull function signature\nSteps to implement the fix\nImport statements in the file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the function is async\nWhether the function uses generics\nLocations where pattern appears\nAnalysis metadata\nName of the pattern\nNumber of occurrences\nList of prioritized fixes\nProject path analyzed\nReturn type of the function\nRisk level of the fix\nSemantic analysis of the violation\nPotential side effects of applying the fix\nName of the strategy\nSummary of the instructions\nLines of code surrounding the violation\nTotal violations found\nTrait implementation context if any\nThe underlying violation being analyzed\nIndividual violation analyses\nSummary of the violation\nType of violation this strategy addresses\nFerrous Forge - The Type-Safe Rust Development Standards …\nHuman-readable output\nJSON output\nOutput format options\nYAML output\nThe command to execute\nConfiguration file path\nOutput format\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable verbose output\nAnalyze edition compatibility\nCheck current Rust version and available updates\nCheck edition compliance\nRun safety checks manually\nAvailable commands for Ferrous Forge\nManage configuration settings\nEdition management\nEdition management subcommands\nAutomatically fix code violations\nInitialize Ferrous Forge system-wide\nInstall git hooks for safety pipeline\nList recent Rust releases\nMigrate to a new edition\nGet update recommendations\nRollback to a previous version\nRust version management\nRust version management subcommands\nSafety pipeline management\nSafety pipeline management subcommands\nShow status of Ferrous Forge installation and configuration\nCheck safety pipeline status\nProject template management\nTest individual safety checks\nUninstall Ferrous Forge from the system\nUpdate Ferrous Forge to the latest version\nValidate a Rust project against standards\nConfig command implementation\nEdition management commands\nAuto-fix command for Ferrous Forge violations\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize command implementation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRollback command implementation\nRust version management commands\nSafety pipeline CLI commands\nStatus command implementation\nTemplate management commands\nUninstall command implementation\nUpdate command implementation\nValidate command implementation\nEnable AI-powered analysis for complex violations\nGenerate AI-friendly compliance report\nUpdate channel to use (stable, beta, nightly)\nRust version management subcommand\nEdition management subcommand\nSafety pipeline subcommand\nTemplate subcommand\nCompare with previous report\nConfirm uninstallation without prompting\nShow what would be updated without actually updating\nShow what would be fixed without making changes\nForce initialization even if already configured\nGet a configuration value\nFix at most this many violations (for testing)\nList all configuration values\nOnly fix specific violation types (comma-separated)\nPath to the project to validate (defaults to current …\nPath to the project to fix (defaults to current directory)\nReset configuration to defaults\nOnly update rules, not the binary\nSet a configuration value (key=value)\nSkip specific violation types (comma-separated)\nVersion to rollback to\nTarget edition (2018, 2021, 2024)\nTarget edition\nApply edition idioms\nSkip backup creation\nProject path\nProject path\nRun tests after migration\nNumber of releases to show\nOnly consider stable releases\nShow verbose output\nForce reinstall even if hooks already exist\nProject path\nProject path\nProject path\nPipeline stage to check\nShow verbose output\nExecute the config command\nHandle edition analyze command\nHandle edition check command\nHandle edition migrate command\nContext information about a file being fixed\nConfiguration for filter options\nConfiguration for fixing violations\nResult of attempting to fix a violation\nFix was successfully applied with description\nRepresents a function signature found in the file\nFix is not applicable to this violation\nFix was skipped with reason\nRun in dry-run mode\nExecute the fix command\nExecute the fix command with optional AI analysis\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction signatures in the file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this is a binary file\nWhether this is an example file\nWhether this is a test file\nLimit number of fixes\nEnding line number\nStarting line number\nName of the function\nOnly fix these violation types\nOnly fix violations of these types\nWhether function returns Option\nWhether function returns Result\nSkip these violation types\nSkip violations of these types\nExecute the init command\nExecute the rollback command\nDisplay functions for Rust version commands\nHandle rust version check command\nHandle rust list command\nHandle rust recommendation command\nUtility functions for Rust version commands\nDisplay update recommendation\nDisplay recommendation details based on update status\nDisplay recommendation header\nDisplay list of releases\nDisplay current and latest version status\nCreate a progress spinner with a message\nFetch latest version with progress indication\nHandle safety check command\nHandle safety install command\nHandle safety status command\nTest individual safety checks\nExecute the status command\nCreate a new project from template\nShow detailed information about a template\nList available templates\nTemplate subcommands\nValidate a template manifest\nCollect template variables from command line arguments\nCreate a new project from template\nExecute the template command\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParse variable from key=value format\nShow detailed information about a template\nValidate a template manifest\nPath to template manifest\nOutput directory\nTemplate name\nTemplate name\nTemplate variables in key=value format\nExecute the uninstall command\nExecute the update command\nAI-friendly compliance report generation\nAdditional validation checks (documentation, formatting, …\nExecute the validate command\nMarkdown report generation\nUtility functions for AI report generation\nMetadata for AI compliance reports\nAI-friendly compliance report structure\nSummary statistics for the AI compliance report\nIndividual violation details for AI analysis\nInstructions for fixing a specific type of violation\nWhether this violation can be automatically fixed\nCode snippet showing the violation in context\nPercentage of code that meets Ferrous Forge standards …\nNumber of this type of violation found\nEffort level required (“trivial”, “moderate”, “…\nEstimated time in hours to fix all violations\nExample code showing how to fix this violation\nVersion of Ferrous Forge used\nPath to the file containing the violation\nNumber of files analyzed in the project\nInstructions for fixing violations\nStrategy for fixing this type of violation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate AI-friendly compliance report\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number where the violation occurs\nDescriptive message about the violation\nReport metadata including timestamp and version\nList of the most critical issues found\nPriority level (1 = highest, 5 = lowest)\nPath to the project being analyzed\nVersion of the report format\nSuggested fix for the violation\nSummary of violations found\nISO timestamp when report was generated\nTotal number of violations found in the project\nType of violation (e.g., “UNWRAPINPRODUCTION”, “…\nType of violation this instruction applies to\nDetailed list of violations\nRun all additional checks (documentation, formatting, …\nRun clippy validation\nGenerate a markdown-formatted report from an AI compliance …\nCalculate compliance percentage\nCount Rust files in a directory\nCount violations by type\nGet code snippet from a file at specific line\nConfiguration file I/O operations\nConfiguration operations (get, set, list, etc.)\nConfiguration type definitions\nFerrous Forge configuration\nCustom validation rule\nWhether to automatically check for updates\nWhether to ban underscore bandaid patterns\nCustom clippy rules\nGet the path to the configuration directory\nGet the path to the configuration file\nCustom validation rules\nWhether this rule is enabled\nWhether to enforce Edition 2024\nEnsure configuration directories exist\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a configuration value by key\nWhether Ferrous Forge has been initialized\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if configuration has been initialized\nList all configuration keys and values\nLoad configuration from file\nLoad configuration from file, or return default if not …\nMark configuration as initialized\nFile size limit in lines\nFunction size limit in lines\nError message to display\nName of the rule\nPattern to match (regex)\nWhether to require documentation\nReset configuration to defaults\nSave configuration to file\nSet a configuration value by key\nUpdate channel (stable, beta, nightly)\nVersion of the configuration format\nDocumentation coverage report\nCheck documentation coverage for a Rust project\nCoverage percentage\nNumber of documented items\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if coverage meets minimum threshold\nList of items missing documentation\nGenerate a human-readable report\nSuggest documentation for missing items\nTotal number of documentable items\nRust edition\nRust 2015 edition\nRust 2018 edition\nRust 2021 edition\nRust 2024 edition\nEdition compliance status\nEdition compatibility analyzer\nGet the edition as a string\nCheck edition compliance for a project\nCurrent edition in use\nDetect edition from Cargo.toml\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet edition migration recommendations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this edition is the latest\nIs the project using the latest edition?\nGet the latest stable edition\nLatest available edition\nPath to Cargo.toml\nGet edition-specific lints for migration\nRecommended migration path\nEdition migration assistance\nCreate a new edition status\nGet the next edition after this one\nParse edition from string\n<code>ToString::to_string</code>, but without panic on OOM.\nAnalysis report for edition compatibility\nEdition analyzer for checking compatibility\nEdition compatibility issue\nError - must be fixed\nInfo - informational\nIssue severity\nWarning - should be reviewed\nAnalyze the project for edition compatibility issues\nFile path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the project is ready for migration\nIssues found\nLine number\nIssue message\nCreate a new edition analyzer\nSeverity\nSuggestions for migration\nGet a summary of the analysis\nTarget edition\nTotal number of Rust files\nWarnings\nEdition migrator for upgrading projects\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMigrate project to target edition\nCreate a new edition migrator\nTypes for edition migration\nSet backup directory\nAlready up to date\nCompleted successfully\nFailed with errors\nIn progress\nOptions for migration process\nResult of migration process\nCustom migration rule\nMigration status\nMigration step\nNot started\nPartially completed\nPartially successful (legacy name)\nPending\nCompleted successfully (legacy name)\nTest results\nApply code migrations\nApply rustfmt after migration\nAuto-commit changes\nBackup location if created\nBackup path (legacy name)\nCommit changes after migration\nCreate backup before migration\nCustom migration rules\nDependencies updated\nStep description\nErrors encountered\nFailed tests\nApply to file extensions\nFiles changed\nFiltered out tests\nFix edition-specific idioms\nFormat code after migration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIgnored tests\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional message\nMessages (legacy field)\nStep name\nPassed tests\nPattern to match\nReplacement\nRun tests after migration\nMigration status\nMigration steps performed\nSuccess status\nTest results if run\nTotal tests\nUpdate dependencies to latest compatible versions\nWarnings encountered\nCLI argument errors\nCommand execution error\nConfiguration errors\nContains the error value\nFerrous Forge specific errors\nFile not found\nIO errors (file operations, etc.)\nMigration error\nNetwork/HTTP errors\nContains the success value\nParse errors\nExternal process errors\nRate limited\nRegex error\nResult type alias for Ferrous Forge operations\nRust not found\nSafety pipeline error\nSafety pipeline blocked operation\nSerialization errors\nStandards enforcement errors\nTemplate errors\nTOML parsing errors\nUpdate system errors\nUTF-8 conversion error\nValidation errors\nSemver parsing errors\nCreate a new CLI error\nCreate a new command error\nCreate a new configuration error\nCreate a new file not found error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new IO error from a string\nCreate a new migration error\nCreate a new network error\nCreate a new parse error\nCreate a new process error\nCreate a new rate limited error\nCreate a new rust not found error\nCreate a new safety error\nCreate a new safety blocked error\nCreate a new security error\nCreate a new standards error\nCreate a new template error\nCreate a new tool not found error\n<code>ToString::to_string</code>, but without panic on OOM.\nCreate a new update error\nCreate a new validation error\nFormatting check result\nA formatting suggestion for a file\nApply rustfmt configuration to project\nAuto-format entire project\nCheck if a single file is properly formatted\nCheck formatting for entire project\nDescription of the formatting issue\nFile path\nFormat a single file\nWhether the code is properly formatted\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet formatting diff for the project\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number\nGenerate a human-readable report\nSuggested changes\nFiles that need formatting\nInstall git hooks for a project\nRemove git hooks from a project\nBeta releases\nRust release channel\nCustom or unknown channel\nMajor update available\nMinor update available\nNightly builds\nSecurity update available\nStable releases\nAlready on latest version\nUpdate information for available version\nVersion update recommendation\nVersion manager for checking and recommending updates\nSimple in-memory cache with TTL support\nCheck current Rust installation\nCurrent Rust version\nRust version detection from local installation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet latest stable release\nGet multiple recent releases\nGet update recommendation\nGitHub API client for fetching Rust releases\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLatest available version\nCreate a new version manager\nURL to the release page\nSecurity update details (if applicable)\n<code>ToString::to_string</code>, but without panic on OOM.\nSimple cache with time-to-live (TTL) support\nRemove expired entries\nClear the cache\nReturns the argument unchanged.\nGet a value from the cache\nInsert a value into the cache\nCalls <code>U::from(self)</code>.\nInvalidate a specific entry\nCreate a new cache with the specified TTL\nRepresents the current Rust installation version\nRelease channel\nCommit date\nCommit hash\nDetect the currently installed Rust version\nReturns the argument unchanged.\nGet the active toolchain\nGet installed toolchains via rustup\nHost triple (e.g., x86_64-unknown-linux-gnu)\nCalls <code>U::from(self)</code>.\nCheck if rustup is available\nParse rustc version output\nRaw version string from rustc\n<code>ToString::to_string</code>, but without panic on OOM.\nSemantic version\nSimplified author information\nGitHub API client\nGitHub release information\nRelease description/notes\nCreation date\nIs this a draft?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the latest stable release\nGet multiple recent releases\nHTML URL to the release page\nRelease ID\nGitHub user ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGitHub username\nRelease name\nCreate a new GitHub client\nIs this a prerelease?\nPublication date\nTag name (e.g., “1.90.0”)\nParsed semantic version\nSecurity audit (cargo audit)\nChecks failed - operation blocked\nBuild checking (cargo build –release)\nChecks bypassed - operation allowed with warning\nSafety check type\nClippy linting (cargo clippy – -D warnings)\nDocumentation build (cargo doc)\nDocumentation coverage check\nFormat checking (cargo fmt –check)\nLicense validation\nAll checks passed - operation allowed\nPipeline stage for safety checks\nPre-commit checks (fast, essential)\nPre-push checks (comprehensive)\nPublish checks (exhaustive)\nPublish dry run (cargo publish –dry-run)\nSafety enforcement result\nSemver compatibility check\nFerrous Forge standards validation\nTest execution (cargo test –all-features)\nEmergency bypass system for safety pipeline\nSafety check implementations\nSafety pipeline configuration\nGet the timeout for this stage\nGet the display name for the stage\nGet the display name for the check\nSafety pipeline execution logic\nGet the checks for a specific pipeline stage\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the operation should be allowed\nGet a user-friendly message\nGet the stage name as a string\nGet the check name as a string\nMain safety pipeline execution engine\nSafety check reporting and result handling\n<code>ToString::to_string</code>, but without panic on OOM.\nFailed checks\nReason for bypass\nSuggestions for fixes\nWho bypassed\nActive bypass record\nBypass audit log entry\nBypass manager for emergency situations\nCheck for active bypass\nCreate a temporary bypass\nWhen the bypass was created\nWhen the bypass expires\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet bypass audit log\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if bypass is enabled\nCreate a new bypass manager\nReason for bypass\nReason for bypass\nRemove an active bypass\nStage being bypassed\nStage that was bypassed\nWhether bypass was successful\nTimestamp of bypass\nUser who created the bypass\nUser who bypassed\nRegistry of all available safety checks\nTrait for implementing safety checks\nGet all available check types\nSecurity audit checking\nBuild checking with cargo build\nClippy checking with strict warnings\nGet a description of what this check does\nDocumentation checking - placeholder for now, using …\nFormat checking with cargo fmt\nReturns the argument unchanged.\nGet description for a check type\nCalls <code>U::from(self)</code>.\nLicense validation checking\nGet the name of this check\nPublish validation checking\nRun the safety check\nSemantic versioning compliance checking\nFerrous Forge standards checking\nTest execution checking\nTest runner for safety checks\nAudit check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun cargo audit\nBuild check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun cargo build –release\nClippy check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun cargo clippy with strict warnings\nDoc check implementation\nCheck documentation coverage (placeholder)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun documentation build check (placeholder)\nFormat check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun cargo fmt –check\nLicense check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidate license configuration\nPublish dry run check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun cargo publish –dry-run\nSemver check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck semantic versioning compliance\nStandards check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun Ferrous Forge standards validation\nTest check implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun cargo test –all-targets –all-features\nRun a quick test of the safety checks\nBypass system configuration\nSafety pipeline configuration\nConfiguration for a specific pipeline stage\nBypass configuration\nChecks to run in this stage\nGet the path to the safety configuration file\nWhether to continue on non-critical failures\nWhether safety pipeline is enabled\nWhether this stage is enabled\nWhether bypass is enabled\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a configuration value\nGet configuration for a specific stage\nGet mutable configuration for a specific stage\nGet timeout for a specific stage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a specific check is enabled for a stage\nLoad configuration from file\nLoad configuration from file, or return default if not …\nLog all bypasses for audit\nMaximum bypasses per day\nRun checks in parallel when possible\nPre-commit configuration\nPre-push configuration\nPublish configuration\nRequire confirmation for bypass\nRequire reason for bypass\nSave configuration to file\nSet a configuration value\nShow progress indicators\nStrict mode - block operations on failure\nTimeout for this stage\nProgress display and execution coordinator\nExecute a specific check type\nExecute checks for the stage\nReturns the argument unchanged.\nGet the appropriate stage for a check type\nHandle check result and convert errors to check results\nCalls <code>U::from(self)</code>.\nCreate a new execution manager\nSetup progress indicators and display header\nMain safety pipeline coordinator\nGet the current configuration\nEnforce safety checks and block operation if they fail\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if safety pipeline is enabled\nCreate a new safety pipeline\nRun safety checks for a specific stage\nResult of a single safety check\nComprehensive safety report for a pipeline stage\nAdd a check result to the report\nAdd context information\nAdd an error message\nAdd a suggestion\nGet all error messages\nGet all suggestions\nType of check that was run\nIndividual check results\nAdditional context information\nDuration the check took to run\nError messages if check failed\nMark the check as failed\nGet failed checks\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge another report into this one\nCreate a new check result\nCreate a new safety report\nWhether the check passed\nWhether all checks passed\nPrint a detailed report with errors and suggestions\nPrint a concise report\nSave report to file for audit trail\nSet the duration\nPipeline stage this report is for\nGet a colored status for display\nGet a status emoji for display\nSuggestions for fixing issues\nTimestamp when report was generated\nTotal duration for all checks\nSecurity audit report\nA single security vulnerability\nCVE identifier if available\nCVSS score if available\nTotal number of dependencies\nDescription of the issue\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPackage name\nWhether the audit passed (no vulnerabilities)\nQuick security check (non-blocking)\nGenerate a human-readable report\nRun security audit on a project\nSeverity level\nTitle of the vulnerability\nVersion with vulnerability\nList of vulnerabilities found\nA custom banned pattern\nBanned patterns and practices\nRust coding standards enforced by Ferrous Forge\nDependency requirements\nDocumentation requirements\nRust edition requirements\nFile size limits\nFunction size limits\nSecurity requirements\nWhether to automatically upgrade projects\nBan expect() in production code\nBan panic!() in production code\nBan todo!() in production code\nBan underscore variable names as error handling bandaids\nBan unimplemented!() in production code\nBan unsafe code\nBan unwrap() in production code\nBanned licenses\nBanned patterns and practices\nCheck if a project complies with these standards\nCustom banned patterns\nDependency requirements\nDocumentation requirements\nRust edition requirements\nFiles that are exempt from size limits\nFunctions that are exempt from size limits\nFile size limits\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunction size limits\nGenerate clippy.toml configuration\nGet all clippy rules based on these standards\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad standards from configuration\nMaximum cyclomatic complexity\nMaximum allowed CVE score\nMaximum number of dependencies\nMaximum characters per line\nMaximum lines per file\nMaximum lines per function\nError message to display\nMinimum documentation coverage percentage\nMinimum Rust version\nPattern name\nRegular expression to match\nRequire security audit\nRequire examples in documentation\nRequire license checking\nRequired MSRV compatibility\nRequire documentation for private items\nRequire documentation for public items\nRequired Rust edition\nSave standards to configuration\nSecurity requirements\nSeverity level (error, warning, info)\nBuilt-in template definitions\nTemplate engine for processing and generating projects\nTemplate manifest and metadata types\nTemplate registry for managing available templates\nCLI application template\nLibrary template\nWeb service template definition\nCreate the CLI application template\nCreate the library template\nCreate the web service template\nTemplate engine for processing templates\nVariable for template substitution\nReturns the argument unchanged.\nGenerate project from template\nCalls <code>U::from(self)</code>.\nCreate a new template engine\nGet list of optional variables\nGet list of required variables\nSet a variable value\nSet multiple variables at once\nCommand-line application\nCustom template\nEmbedded application\nLibrary crate\nFile to be generated from template\nKind of project template\nTemplate manifest describing a project template\nVariable that can be substituted in templates\nWeb service\nWorkspace with multiple crates\nAdd a file to the manifest\nAdd a post-generation command\nAdd a variable to the manifest\nAuthor of the template\nDefault value if not provided\nGet a human-readable description\nDescription of what the template creates\nDescription shown to user\nDestination path (can include variables)\nDefault Rust edition to use\nFiles included in the template\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKind of project this template creates\nMinimum Rust version required\nName of the template\nVariable name (e.g., “project_name”)\nCreate a new manifest with defaults\nCreate a new template file\nCreate a new optional variable with default\nValidation regex pattern\nFile permissions (Unix-style)\nPost-generation commands to run\nWhether to process this file for variable substitution\nCreate a new required variable\nWhether this variable is required\nSource path in template\nCreate a static file (no processing)\nValidate the manifest\nVariables that can be substituted in the template\nVersion of the template\nSet validation pattern\nSet file permissions\nBuilt-in template definition\nRegistry of available templates\nTemplate files as strings\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a built-in template\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all available templates\nTemplate manifest\nCreate a new registry with built-in templates\nRegister a custom template\nTest coverage analyzer implementation\nCoverage reporting and validation\nTest coverage module tests\nTest coverage types and configuration\nTest coverage analyzer\nCheck coverage for a project\nCheck if cargo-tarpaulin is installed\nGet config reference\nGenerate a human-readable coverage report\nReturns the argument unchanged.\nInstall cargo-tarpaulin if not already installed\nCalls <code>U::from(self)</code>.\nCreate a new coverage analyzer with default configuration\nRun test coverage analysis\nValidate coverage meets minimum thresholds\nCreate a new coverage analyzer with custom configuration\nTest coverage configuration\nTest coverage results\nCoverage information for a single file\nOverall branch coverage percentage\nBranches tested\nDirectories to exclude from coverage analysis\nFiles to exclude from coverage analysis\nWhether to fail builds on coverage below threshold\nPer-file coverage breakdown\nFile path relative to project root\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOverall function coverage percentage\nFunction coverage percentage for this file\nFunctions tested\nFunctions tested in this file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOverall line coverage percentage\nLine coverage percentage for this file\nTotal lines tested\nLines tested in this file\nMinimum branch coverage percentage (0-100)\nMinimum function coverage percentage (0-100)\nMinimum line coverage percentage (0-100)\nTotal branches\nTotal functions\nTotal functions in this file\nTotal lines in codebase\nTotal lines in this file\nAuto-update functionality\nGitHub API integration for fetching updates\nUpdate manager implementation\nUpdate system types\nCheck for automatic updates based on configuration\nFetch update information from GitHub releases\nBeta releases with new features\nNightly builds with latest changes\nStable releases (recommended)\nUpdate channels available for Ferrous Forge\nInformation about an available update\nUpdate manager for handling self-updates\nPath to the current binary\nChannel to check for updates\nCheck for available updates\nWhether this is a critical security update\nCurrent version of Ferrous Forge\nDownload URL for the update\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new update manager\nRelease notes or changelog\nPerform the actual update\nInteractive update prompt\nSHA256 hash of the download\nSize of the download in bytes\n<code>ToString::to_string</code>, but without panic on OOM.\nVersion being updated to\nCore Rust validation - modularized structure\nViolation types and reporting\nResult from running clippy\nCore Rust validator\nFile-level validation checks\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a human-readable report from violations\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new validator for the given project\nOutput from clippy command\nValidation patterns for Rust code\nGet reference to validation patterns\nRun clippy with strict configuration\nWhether clippy ran successfully\nValidate all Rust code in the project\nValidates a Cargo.toml file for standards compliance\nValidates a Rust source file for standards compliance\nCompiled regex patterns for validation\nPattern for detecting expect() calls\nReturns the argument unchanged.\nPattern for detecting function definitions\nCalls <code>U::from(self)</code>.\nHelper function to check if a pattern is inside a string …\nCreate and compile all validation patterns\nPattern for detecting underscore in let bindings\nPattern for detecting underscore parameters\nPattern for detecting unwrap() calls\nViolation that prevents code from compiling\nFile exceeds size limit\nFunction exceeds size limit\nLine exceeds length limit\nMissing required dependencies\nMissing documentation\nRust version too old\nSeverity level of a violation\nUnderscore parameter or let assignment bandaid\nUse of .unwrap() or .expect() in production code\nA single standards violation\nTypes of violations that can be detected\nViolation that should be fixed but doesn’t break …\nWrong Rust edition (not 2024)\nFile where violation occurred\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine number (1-based for display)\nHuman-readable message\nCreate a new violation\nSeverity of the violation\nType of violation")